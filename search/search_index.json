{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u7b80\u4ecb \u00b6 \u672c\u9879\u76ee\u65e8\u5728\u8bb0\u5f55\u4e00\u4e9b\u5b66\u4e60\u7b14\u8bb0\u4ee5\u53ca\u5b66\u4e60\u5fc3\u5f97\uff0c\u5076\u5c14\u4e5f\u4f1a\u5199\u4e00\u4e9b\u6280\u672f\u65e0\u5173\u7684\u65e5\u8bb0\u7c7b\u7684\u6587\u7ae0\u3002 \u4e0d\u4f7f\u7528\u5f00\u6e90\u6a21\u677f\u6216\u8005\u4e00\u4e9b\u535a\u5ba2\u5e73\u53f0\u662f\u56e0\u4e3a\u60f3\u8981\u6309\u7167\u81ea\u5df1\u7684\u610f\u613f\u5206\u95e8\u522b\u7c7b\uff0c\u7ed9\u4eba\u4e00\u76ee\u4e86\u7136\u4e4b\u611f\u3002 \u540c\u65f6\u4e5f\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u53d1\u5e03\u6587\u7ae0\uff0c\u53ea\u9700\u8981\u5728\u672c\u5730\u4ed3\u5e93\u6dfb\u52a0\u6587\u7ae0\uff0c\u7136\u540epush\u4e0a\u53bb\uff0c\u8bbe\u7f6e\u597d\u7684action\u5c31\u4f1a\u81ea\u52a8\u53d1\u5e03\u4e86\u3002","title":"\u7b80\u4ecb"},{"location":"#_1","text":"\u672c\u9879\u76ee\u65e8\u5728\u8bb0\u5f55\u4e00\u4e9b\u5b66\u4e60\u7b14\u8bb0\u4ee5\u53ca\u5b66\u4e60\u5fc3\u5f97\uff0c\u5076\u5c14\u4e5f\u4f1a\u5199\u4e00\u4e9b\u6280\u672f\u65e0\u5173\u7684\u65e5\u8bb0\u7c7b\u7684\u6587\u7ae0\u3002 \u4e0d\u4f7f\u7528\u5f00\u6e90\u6a21\u677f\u6216\u8005\u4e00\u4e9b\u535a\u5ba2\u5e73\u53f0\u662f\u56e0\u4e3a\u60f3\u8981\u6309\u7167\u81ea\u5df1\u7684\u610f\u613f\u5206\u95e8\u522b\u7c7b\uff0c\u7ed9\u4eba\u4e00\u76ee\u4e86\u7136\u4e4b\u611f\u3002 \u540c\u65f6\u4e5f\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u53d1\u5e03\u6587\u7ae0\uff0c\u53ea\u9700\u8981\u5728\u672c\u5730\u4ed3\u5e93\u6dfb\u52a0\u6587\u7ae0\uff0c\u7136\u540epush\u4e0a\u53bb\uff0c\u8bbe\u7f6e\u597d\u7684action\u5c31\u4f1a\u81ea\u52a8\u53d1\u5e03\u4e86\u3002","title":"\u7b80\u4ecb"},{"location":"algorithm/BFS/","text":"\u5e7f\u5ea6\u4f18\u5148 \u00b6 BFS \u7684\u6838\u5fc3\u601d\u60f3\u5e94\u8be5\u4e0d\u96be\u7406\u89e3\u7684\uff0c\u5c31\u662f\u628a\u4e00\u4e9b\u95ee\u9898\u62bd\u8c61\u6210\u56fe\uff0c\u4ece\u4e00\u4e2a\u70b9\u5f00\u59cb\uff0c\u5411\u56db\u5468\u5f00\u59cb\u6269\u6563\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u5199 BFS \u7b97\u6cd5\u90fd\u662f\u7528\u300c\u961f\u5217\u300d\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u6bcf\u6b21\u5c06\u4e00\u4e2a\u8282\u70b9\u5468\u56f4\u7684\u6240\u6709\u8282\u70b9\u52a0\u5165\u961f\u5217\u3002 111. \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6 \u00b6 752. \u6253\u5f00\u8f6c\u76d8\u9501 \u00b6","title":"\u5e7f\u5ea6\u4f18\u5148"},{"location":"algorithm/BFS/#_1","text":"BFS \u7684\u6838\u5fc3\u601d\u60f3\u5e94\u8be5\u4e0d\u96be\u7406\u89e3\u7684\uff0c\u5c31\u662f\u628a\u4e00\u4e9b\u95ee\u9898\u62bd\u8c61\u6210\u56fe\uff0c\u4ece\u4e00\u4e2a\u70b9\u5f00\u59cb\uff0c\u5411\u56db\u5468\u5f00\u59cb\u6269\u6563\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u5199 BFS \u7b97\u6cd5\u90fd\u662f\u7528\u300c\u961f\u5217\u300d\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u6bcf\u6b21\u5c06\u4e00\u4e2a\u8282\u70b9\u5468\u56f4\u7684\u6240\u6709\u8282\u70b9\u52a0\u5165\u961f\u5217\u3002","title":"\u5e7f\u5ea6\u4f18\u5148"},{"location":"algorithm/BFS/#111","text":"","title":"111. \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6"},{"location":"algorithm/BFS/#752","text":"","title":"752. \u6253\u5f00\u8f6c\u76d8\u9501"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","text":"\u7b97\u6cd5\u5f15\u5165 \u00b6 \u52a8\u6001\u89c4\u5212\uff08\u82f1\u8bed\uff1aDynamic programming\uff0c\u7b80\u79f0 DP\uff09\u662f\u4e00\u79cd\u5728\u6570\u5b66\u3001\u7ba1\u7406\u79d1\u5b66\u3001\u8ba1\u7b97\u673a\u79d1\u5b66\u3001\u7ecf\u6d4e\u5b66\u548c\u751f\u7269\u4fe1\u606f\u5b66\u4e2d\u4f7f\u7528\u7684\uff0c\u901a\u8fc7\u628a\u539f\u95ee\u9898\u5206\u89e3\u4e3a\u76f8\u5bf9\u7b80\u5355\u7684\u5b50\u95ee\u9898\u7684\u65b9\u5f0f\u6c42\u89e3\u590d\u6742\u95ee\u9898\u7684\u65b9\u6cd5\u3002 \u52a8\u6001\u89c4\u5212\u5e38\u5e38\u9002\u7528\u4e8e\u6709\u91cd\u53e0\u5b50\u95ee\u9898\u548c\u6700\u4f18\u5b50\u7ed3\u6784\u6027\u8d28\u7684\u95ee\u9898\uff0c\u52a8\u6001\u89c4\u5212\u65b9\u6cd5\u6240\u8017\u65f6\u95f4\u5f80\u5f80\u8fdc\u5c11\u4e8e\u6734\u7d20\u89e3\u6cd5\u3002 \u52a8\u6001\u89c4\u5212\u80cc\u540e\u7684\u57fa\u672c\u601d\u60f3\u975e\u5e38\u7b80\u5355\u3002\u5927\u81f4\u4e0a\uff0c\u82e5\u8981\u89e3\u4e00\u4e2a\u7ed9\u5b9a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u89e3\u5176\u4e0d\u540c\u90e8\u5206\uff08\u5373\u5b50\u95ee\u9898\uff09\uff0c\u518d\u6839\u636e\u5b50\u95ee\u9898\u7684\u89e3\u4ee5\u5f97\u51fa\u539f\u95ee\u9898\u7684\u89e3\u3002\u52a8\u6001\u89c4\u5212\u5f80\u5f80\u7528\u4e8e\u4f18\u5316\u9012\u5f52\u95ee\u9898\uff0c\u4f8b\u5982\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u5982\u679c\u8fd0\u7528\u9012\u5f52\u7684\u65b9\u5f0f\u6765\u6c42\u89e3\u4f1a\u91cd\u590d\u8ba1\u7b97\u5f88\u591a\u76f8\u540c\u7684\u5b50\u95ee\u9898\uff0c\u5229\u7528\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\u53ef\u4ee5\u51cf\u5c11\u8ba1\u7b97\u91cf\u3002 \u901a\u5e38\u8bb8\u591a\u5b50\u95ee\u9898\u975e\u5e38\u76f8\u4f3c\uff0c\u4e3a\u6b64\u52a8\u6001\u89c4\u5212\u6cd5\u8bd5\u56fe\u4ec5\u4ec5\u89e3\u51b3\u6bcf\u4e2a\u5b50\u95ee\u9898\u4e00\u6b21\uff0c\u5177\u6709\u5929\u7136\u526a\u679d\u7684\u529f\u80fd\uff0c\u4ece\u800c\u51cf\u5c11\u8ba1\u7b97\u91cf\uff1a\u4e00\u65e6\u67d0\u4e2a\u7ed9\u5b9a\u5b50\u95ee\u9898\u7684\u89e3\u5df2\u7ecf\u7b97\u51fa\uff0c\u5219\u5c06\u5176\u8bb0\u5fc6\u5316\u5b58\u50a8\uff0c\u4ee5\u4fbf\u4e0b\u6b21\u9700\u8981\u540c\u4e00\u4e2a\u5b50\u95ee\u9898\u89e3\u4e4b\u65f6\u76f4\u63a5\u67e5\u8868\u3002\u8fd9\u79cd\u505a\u6cd5\u5728\u91cd\u590d\u5b50\u95ee\u9898\u7684\u6570\u76ee\u5173\u4e8e\u8f93\u5165\u7684\u89c4\u6a21\u5448\u6307\u6570\u589e\u957f\u65f6\u7279\u522b\u6709\u7528\u3002 \u6590\u6ce2\u90a3\u5951\u6570\u5217 \u00b6 \u5b9a\u4e49\u4e3a\uff1a\u7531 0 \u548c 1 \u5f00\u59cb\uff0c\u540e\u9762\u7684\u6bcf\u4e00\u9879\u6570\u5b57\u90fd\u662f\u524d\u9762\u4e24\u9879\u6570\u5b57\u7684\u548c\u3002 1.\u66b4\u529b\u9012\u5f52 \u00b6 \u4f9d\u7136\u53ef\u4ee5\u8fd0\u7528\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \uff1a $$ f(n)=f(n-1)+f(n-2) $$ \u4ee3\u7801\u5b9e\u73b0\u5c31\u51fa\u6765\u4e86\uff1a def fib ( n ): # \u8fb9\u754c\u6761\u4ef6\uff08base case\uff09 if n in ( 1 , 2 ): return 1 return fib ( n - 1 ) + fib ( n - 2 ) \u8fd9\u6837\u66b4\u529b\u9012\u5f52\u5176\u5b9e\u662f\u6548\u7387\u5f88\u4f4e\u7684\uff0c\u753b\u51fa\u9012\u5f52\u6811\u5c31\u53ef\u4ee5\u5f88\u660e\u663e\u7684\u770b\u5230\uff1a \u8ba1\u7b97f(20)\u7684\u65f6\u5019\uff0c\u8ba1\u7b97\u51fa\u4e86f(19)\u548cf(18)\uff0c\u5230\u4e86\u8ba1\u7b97f(19)\u7684\u65f6\u5019\uff0c\u53c8\u628af(18)\u8ba1\u7b97\u4e86\u4e00\u904d\uff0c\u8fd9\u6837\u91cd\u590d\u8ba1\u7b97\u5bfc\u81f4\u6548\u7387\u53d8\u4f4e\u3002 2.\u5907\u5fd8\u5f55\u4f18\u5316 \u00b6 \u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u6216\u8005\u5b57\u5178\uff0c\u5c06\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u7684\u503c\u5b58\u8fdb\u53bb\uff0c\u5c31\u50cf\u4e00\u4e2a\u7f13\u5b58\u4e00\u6837\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u51cf\u5c11\u91cd\u590d\u8ba1\u7b97\u3002 \u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a def fib ( n , tb : List ): # \u8fb9\u754c\u6761\u4ef6\uff08base case\uff09 if n in ( 1 , 2 ): return 1 if tb [ n - 1 ] is None : tb [ n - 1 ] = fib ( n - 1 , tb ) + fib ( n - 2 , tb ) return tb [ n - 1 ] \u9012\u5f52\u56fe\u5982\u4e0b\uff1a \u8fd9\u6837\u5c31\u5c06\u9012\u5f52\u6811\u4e2d\u7684\u5197\u4f59\u8ba1\u7b97\u90fd\u53bb\u6389\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4ece O(n^2) \u4f18\u5316\u5230\u4e86 O(n) \uff0c\u53ef\u4ee5\u8bf4\u662f\u964d\u7ef4\u6253\u51fb\u3002 \u6839\u636e\u601d\u8003\u89e3\u9898\u7684\u65b9\u5411\u53ef\u77e5\uff0c\u8fd9\u662f\u4e00\u79cd\u81ea\u9876\u5411\u4e0b\u7684\u65b9\u5f0f\uff0c\u4ece\u6700\u7ec8\u7ed3\u679c\u4e5f\u5c31\u662f\u9012\u5f52\u6811\u7684\u6839\u8282\u70b9\uff0c\u9012\u5f52\u5f80\u4e0b\u8ba1\u7b97\u76f4\u81f3\u8fd4\u56de\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a 3.dp\u6570\u7ec4\u81ea\u5e95\u5411\u4e0a\u8fed\u4ee3 \u00b6 \u5176\u5b9e\u6211\u4eec\u8fd8\u53ef\u4ee5\u81ea\u5e95\u5411\u4e0a\u7684\u8fed\u4ee3\u6c42\u89e3\uff0c\u4ece\u6700\u5c0f\u7684f(1)\u548cf(2)\u5f80\u4e0a\u63a8\u51faf(20)\uff0c\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a def fib ( n ): if n in ( 1 , 2 ): return 1 dp = [ 0 ] * ( n + 1 ) dp [ 1 ] = dp [ 2 ] = 1 for i in range ( 3 , n + 1 ): dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] return dp [ n ] 4.dp\u6570\u7ec4\u7a7a\u95f4\u4f18\u5316 \u00b6 \u6211\u4eec\u89c2\u5bdf\u5230\uff0c\u6bcf\u4e00\u6b21\u7684\u7ed3\u679c\u5b9e\u9645\u53ea\u8ddf\u524d\u4e24\u6b21\u7684\u7ed3\u679c\u6709\u5173\uff0c\u6240\u4ee5\u53ef\u4ee5\u53ea\u5b58\u50a8\u524d\u4e24\u6b21\u7684\u7ed3\u679c\uff0c\u5bf9\u7a7a\u95f4\u8fdb\u884c\u7b80\u5316\u3002 def fib ( n ): if n in ( 1 , 2 ): return 1 dp_1 = dp_2 = 1 for i in range ( 3 , n + 1 ): dp_1 , dp_2 = dp_1 + dp_2 , dp_1 return dp_1 \u51d1\u96f6\u94b1\u95ee\u9898 \u00b6 \u5148\u770b\u4e0b\u9898\u2f6c\uff1a\u7ed9\u4f60 k \u79cd\u2faf\u503c\u7684\u786c\u5e01\uff0c\u2faf\u503c\u5206\u522b\u4e3a c1, c2 ... ck \uff0c\u6bcf\u79cd\u786c \u5e01\u7684\u6570\u91cf\u2f46\u9650\uff0c\u518d\u7ed9\u2f00\u4e2a\u603b\u2fa6\u989d amount \uff0c\u95ee\u4f60 \u6700\u5c11 \u9700\u8981\u2f0f\u679a\u786c\u5e01\u51d1\u51fa\u8fd9\u4e2a\u2fa6\u989d\uff0c\u5982\u679c\u4e0d\u53ef\u80fd\u51d1\u51fa\uff0c\u7b97\u6cd5\u8fd4\u56de -1 \u3002 \u81ea\u9876\u5411\u4e0b\u601d\u8003 \u00b6 \u601d\u8003\u6b65\u9aa4\uff1a \u6b64\u95ee\u9898\u5305\u542b \u6700\u4f18\u5b50\u7ed3\u6784 \u7684\u7279\u70b9\uff0c\u5e76\u4e14\u5b50\u95ee\u9898\u4e4b\u95f4\u76f8\u4e92\u72ec\u7acb\uff0c\u6240\u4ee5\u662f\u52a8\u6001\u89c4\u5212\u7684\u95ee\u9898\u3002 \u5b9a\u4e49\u6b63\u786e\u7684dp\u51fd\u6570\uff0c dp(amount)=n \u8868\u793a\u6700\u5c11\u9700\u8981n\u4e2a\u786c\u5e01\u51d1\u51faamount\u91d1\u989d\u7684\u94b1\uff0c\u8fd9\u4e2a\u5f0f\u5b50\u5176\u5b9e\u4e5f\u5f88\u597d\u5217\u51fa\u6765\uff0c\u9898\u5e72\u4e2d\u53ea\u6709amount\u8fd9\u4e00\u4e2a\u53d8\u91cf\uff0c\u6211\u4eec\u8981\u6c42\u89e3\u7684\u5c31\u662f\u6700\u5c11\u7684\u786c\u5e01\u6570\uff0c\u8bbe\u4e3an\uff0c\u8fd9\u6837\u5c31\u5f88\u5bb9\u6613\u5b9a\u4e49\u51fadp\u51fd\u6570\u4e86\u3002 \u5217\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a $$ dp(amount)=min(dp(amount-c1)+1, dp(amount-c2)+1, ...) $$ \u6ce8\u610f\u8fb9\u754c\u6761\u4ef6\uff0c\u5982\u679c\u4e0d\u80fd\u51d1\u51fa\u7684\u60c5\u51b5\u5c31\u662f\u5f53amount\u6bd4\u5176\u4e2d\u6700\u5c0f\u7684\u786c\u5e01\u9762\u989d\u8fd8\u8981\u5c0f\u5e76\u4e14\u4e0d\u4e3a0\u3002 \u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a from typing import List def min_coin_num ( coins : List , amount : int ): def dp ( n ): # \u8fb9\u754c\u6761\u4ef6 if n == 0 : # \u91d1\u989d\u4e3a0\uff0c\u4e0d\u9700\u8981\u786c\u5e01\u4e86 return 0 if n < 0 : # \u91d1\u989d\u4e3a\u8d1f\u4e86\uff0c\u5f53\u524d\u9012\u5f52\u5b50\u8282\u70b9\u65e0\u89e3 return - 1 ret = float ( \"inf\" ) for coin in coins : sub_problem = dp ( n - coin ) if sub_problem == - 1 : continue ret = min ( ret , sub_problem + 1 ) return ret if ret != float ( \"inf\" ) else - 1 return dp ( amount ) \u753b\u51fa\u9012\u5f52\u6811\u540e\u53ef\u4ee5\u770b\u5230\uff0c\u4f9d\u7136\u5b58\u5728\u5197\u4f59\u7684\u8ba1\u7b97\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6b64\u7a0d\u4f5c\u4f18\u5316\uff0c\u7528\u4e00\u4e2a\u5907\u5fd8\u5f55\u8bb0\u5f55\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u7684\u7ed3\u679c\uff0c\u4e0b\u6b21\u7528\u5230\u65f6\uff0c\u5c31\u4e0d\u9700\u8981\u91cd\u590d\u8ba1\u7b97\u4e86\u3002 \u4f18\u5316\u540e\u7684\u4ee3\u7801\uff1a from typing import List # \u5907\u5fd8\u5f55\u4f18\u5316 def min_coin_num ( coins : List , amount : int ): memo = [ None ] * ( amount + 1 ) def dp ( n ): if memo [ n ] is not None : return memo [ n ] # \u8fb9\u754c\u6761\u4ef6 if n == 0 : # \u91d1\u989d\u4e3a0\uff0c\u4e0d\u9700\u8981\u786c\u5e01\u4e86 return 0 if n < 0 : # \u91d1\u989d\u4e3a\u8d1f\u4e86\uff0c\u5f53\u524d\u9012\u5f52\u5b50\u8282\u70b9\u65e0\u89e3 return - 1 ret = float ( \"inf\" ) for coin in coins : sub_problem = dp ( n - coin ) if sub_problem == - 1 : continue ret = min ( ret , sub_problem + 1 ) # \u8bb0\u5165\u5907\u5fd8\u5f55 memo [ n ] = ret if ret != float ( \"inf\" ) else - 1 return memo [ n ] return dp ( amount ) \u8fd9\u91cc\u662f\u7528\u6570\u7ec4\u5f53\u5907\u5fd8\u5f55\uff0c\u5b9e\u9645\u7528\u5b57\u5178\u4e5f\u662f\u4e00\u6837\u3002 \u81ea\u5e95\u5411\u4e0a\u601d\u8003 \u00b6 \u4e00\u822c\u81ea\u9876\u5411\u4e0b\u9700\u8981\u7528\u5230\u9012\u5f52\uff0c\u601d\u8def\u662f\u5c06\u6700\u7ec8\u7684\u95ee\u9898\u9012\u5f52\u5206\u89e3\u4e3a\u4e00\u4e2a\u4e00\u4e2a\u7684\u5b50\u95ee\u9898\uff0c\u540c\u6837\u6211\u4eec\u4e5f\u53ef\u4ee5\u81ea\u5e95\u5411\u4e0a\u8ba1\u7b97\u51fa\u7ed3\u679c\uff0c\u4ece\u6700\u521d\u7684\u60c5\u51b5\u5411\u4e0a\u7ecf\u5386\u6709\u9650\u6b21\u7684\u8fed\u4ee3\uff0c\u6700\u7ec8\u5f97\u5230\u7ed3\u679c\u3002 \u4ee3\u7801\u5b9e\u73b0\uff1a from typing import List # \u81ea\u5e95\u5411\u4e0a def min_coin_num ( coins : List , amount : int ): dp = [ float ( \"inf\" )] * ( amount + 1 ) dp [ 0 ] = 0 for n in range ( amount + 1 ): for coin in coins : if coin <= n : dp [ n ] = min ( dp [ n ], dp [ n - coin ] + 1 ) return dp [ amount ] if dp [ amount ] != float ( \"inf\" ) else - 1 \u65b9\u6cd5\u603b\u7ed3 \u00b6 \u9002\u7528\u60c5\u5f62\uff1a\u6700\u4f18\u5b50\u95ee\u9898\uff0c\u5e76\u4e14\u5b50\u95ee\u9898\u4e92\u76f8\u72ec\u7acb\u3002 \u601d\u8003\u65b9\u5411\uff1a1.\u81ea\u9876\u5411\u4e0b\u9012\u5f52\uff1b2.\u81ea\u5e95\u5411\u4e0a\u6709\u9650\u8fed\u4ee3\u3002 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\u4e00\u822c\u5f62\u5f0f\u4e3a \\(dp(\u53d8\u91cf1\uff0c\u53d8\u91cf2\uff0c...)=\u76ee\u6807\u7ed3\u679c\\) \u4f18\u5316\u65b9\u5f0f\uff1a\u6570\u7ec4\u6216\u8005\u5b57\u5178\u4f5c\u4e3a\u5907\u5fd8\u5f55\u8bb0\u5f55\u4e2d\u95f4\u5b50\u95ee\u9898\u7684\u7ed3\u679c\uff0c\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002 \u7ecf\u5178\u7cfb\u5217\u95ee\u9898 \u00b6 \u80a1\u7968\u4e70\u5356 \u00b6 \u4e70\u5356\u80a1\u7968\u2160 \u00b6 \u9898\u76ee\u63cf\u8ff0 \u89e3\u9898\u601d\u8def \u76ee\u6807\u662f\u8981\u6c42\u5f97\u6700\u5927\u5229\u6da6\uff0c\u53ef\u89c1\u5305\u542b\u6700\u4f18\u5b50\u95ee\u9898\u7684\u7279\u70b9\uff0c\u540c\u65f6\u5f88\u663e\u800c\u6613\u89c1\uff0c\u8fd9\u4e9b\u5b50\u95ee\u9898\u662f\u4e92\u65a5\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u5f80\u52a8\u6001\u89c4\u5212\u65b9\u9762\u8003\u8651\u3002 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \u53ef\u4ee5\u5148\u5217\u51fadp\u7684\u5173\u7cfb\u548c\u5229\u6da6\u7684\u5173\u7cfb\u65b9\u7a0b\uff0c \\(dp(n, status)=profit\\) \uff0cn\u8868\u793a\u662f\u7b2c\u51e0\u5929\uff0cstatus\u8868\u793a\u5f53\u5929\u7684\u6301\u4ed3\u72b6\u6001\uff0c\u6709\u4e24\u79cd\u6301\u4ed3\u548c\u672a\u6301\u4ed3\u3002\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5219\u4e3a\uff1a \\(dp(n,0)=max(dp(n-1,0), dp(n-1,1)+prices[n])\\) \u548c \\(dp(n,1)=max(dp(n-1,1),-prices[n])\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 \u81ea\u9876\u5411\u4e0b\uff0c\u66b4\u529b\u9012\u5f52 from typing import List # \u81ea\u9876\u5411\u4e0b class Solution : def maxProfit ( self , prices : List [ int ]) -> int : def dp ( n , status ): # base case if n == 0 : if status == 0 : return 0 else : return - prices [ 0 ] if status == 0 : # \u4eca\u65e5\u672a\u6301\u6709\u80a1\u7968 return max ( dp ( n - 1 , 0 ), dp ( n - 1 , 1 ) + prices [ n ]) # \u4eca\u65e5\u6301\u6709\u80a1\u7968 return max ( dp ( n - 1 , 1 ), - prices [ n ]) return dp ( len ( prices ) - 1 , 0 ) \u6267\u884c\u7ed3\u679c\uff1a \u81ea\u9876\u5411\u4e0b\uff0c\u5907\u5fd8\u5f55\u4f18\u5316 from typing import List # \u81ea\u9876\u5411\u4e0b class Solution : def maxProfit ( self , prices : List [ int ]) -> int : memo = [[ None ] * 2 for _ in range ( len ( prices ))] memo [ 0 ] = 0 , - prices [ 0 ] def dp ( n , status ): # base case if memo [ n ][ status ] is not None : return memo [ n ][ status ] else : if status == 0 : # \u4eca\u65e5\u672a\u6301\u6709\u80a1\u7968 ret = max ( dp ( n - 1 , 0 ), dp ( n - 1 , 1 ) + prices [ n ]) else : # \u4eca\u65e5\u6301\u6709\u80a1\u7968 ret = max ( dp ( n - 1 , 1 ), - prices [ n ]) memo [ n ][ status ] = ret return ret return dp ( len ( prices ) - 1 , 0 ) \u6267\u884c\u7ed3\u679c\uff1a \u53ef\u4ee5\u770b\u5230\uff0c\u4f18\u5316\u540e\u867d\u7136\u63d0\u4ea4\u7ed3\u679c\u57ab\u5e95\uff0c\u4f46\u662f\u5df2\u7ecf\u4e0d\u8d85\u65f6\u4e86\u3002 \u81ea\u5e95\u5411\u4e0a\uff0c\u6709\u9650\u8fed\u4ee3 \u9664\u4e86\u4ece\u7ed3\u679c\uff08\u4e5f\u5c31\u662f\u9012\u5f52\u6811\u7684\u6839\u8282\u70b9\uff09\u51fa\u53d1\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4ecebase case\u51fa\u53d1\uff0c\u6709\u9650\u6b21\u7684\u8fed\u4ee3\u6c42\u51fa\u6700\u7ec8\u7684\u7ed3\u679c\u3002 \u4ee3\u7801\u5b9e\u73b0\uff1a from typing import List # \u81ea\u5e95\u5411\u4e0a class Solution : def maxProfit ( self , prices : List [ int ]) -> int : n = len ( prices ) dp = [[ 0 , 0 ] for _ in range ( n )] dp [ 0 ] = [ 0 , - prices [ 0 ]] for i in range ( 1 , n ): dp [ i ][ 0 ] = max ( dp [ i - 1 ][ 0 ], dp [ i - 1 ][ 1 ] + prices [ i ]) dp [ i ][ 1 ] = max ( dp [ i - 1 ][ 1 ], - prices [ i ]) return dp [ n - 1 ][ 0 ] \u6267\u884c\u7ed3\u679c\uff1a \u81ea\u5e95\u5411\u4e0a\uff0c\u7a7a\u95f4\u4f18\u5316 \u53ef\u4ee5\u53d1\u73b0\u6bcf\u6b21\u7684\u8fd0\u884c\u7ed3\u679c\u90fd\u53ea\u8ddf\u524d\u4e00\u6b21\u7684\u6709\u5173\uff0cdp\u6570\u7ec4\u53ef\u4ee5\u7b80\u5316\u4e3a\u4e24\u4e2a\u53d8\u91cf from typing import List # \u81ea\u5e95\u5411\u4e0a\uff0c\u7a7a\u95f4\u4f18\u5316 class Solution : def maxProfit ( self , prices : List [ int ]) -> int : n = len ( prices ) dp_i_0 = 0 dp_i_1 = - prices [ 0 ] for i in range ( 1 , n ): dp_i_0 , dp_i_1 = max ( dp_i_0 , dp_i_1 + prices [ i ]), max ( dp_i_1 , - prices [ i ]) return dp_i_0 \u6267\u884c\u7ed3\u679c\uff1a \u80a1\u7968\u4e70\u5356\u2161 \u00b6 \u9898\u76ee\u63cf\u8ff0 \u7b80\u5355\u6765\u8bf4\u5c31\u662f\u5728\u4e0a\u9898\u7684\u57fa\u7840\u4e0a\uff0c\u4e0d\u9650\u5236\u4e70\u5356\u80a1\u7968\u7684\u6b21\u6570\uff0c\u80a1\u7968\u4ea4\u6613\u6b21\u6570\u4e3a\u65e0\u9650\u6b21\u3002 \u89e3\u9898\u601d\u8def \u89e3\u9898\u601d\u8def\u57fa\u672c\u8ddf\u4e0a\u9898\u4e00\u81f4\uff0c\u4e0d\u540c\u7684\u662f\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e2d\u7684 \\(dp(n,1)\\) \u6539\u4e3a \\(dp(n,1)=max(dp(n-1,1),dp(n-1,0)-prices[n])\\) \u4ee3\u7801\u5b9e\u73b0 from typing import List class Solution : def maxProfit ( self , prices : List [ int ]) -> int : n = len ( prices ) dp_i_0 = 0 dp_i_1 = - prices [ 0 ] for i in range ( 1 , n ): dp_i_0 , dp_i_1 = max ( dp_i_0 , dp_i_1 + prices [ i ]), max ( dp_i_1 , dp_i_0 - prices [ i ]) return dp_i_0 \u63d0\u4ea4\u7ed3\u679c \u80a1\u7968\u4e70\u5356\u2162 \u00b6 \u9898\u76ee\u63cf\u8ff0 \u89e3\u9898\u601d\u8def \u672c\u9898\u5c06\u4e70\u5356\u6b21\u6570\u9650\u5b9a\u4e3a\u4e24\u6b21\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u5c06\u5f53\u5929\u672a\u6301\u4ed3\u548c\u5f53\u5929\u6301\u4ed3\u8fd9\u4e24\u79cd\u72b6\u6001\u518d\u8ddf\u4e70\u5356\u7684\u6b21\u6570\u7ed3\u5408\u8d77\u6765\uff0c\u6240\u4ee5\u4e00\u5171\u6709\u4e86\u56db\u79cd\u72b6\u6001\uff1a \u4e70\u8fc7\u4e00\u6b21\uff0c\u5f53\u524d\u4e3a\u6301\u4ed3\u72b6\u6001 \u5356\u8fc7\u4e00\u6b21\uff0c\u5f53\u524d\u4e3a\u672a\u6301\u4ed3\u72b6\u6001 \u4e70\u8fc7\u4e24\u6b21\uff0c\u5f53\u524d\u4e3a\u6301\u4ed3\u72b6\u6001 \u5356\u8fc7\u4e24\u6b21\uff0c\u5f53\u524d\u4e3a\u672a\u6301\u4ed3\u72b6\u6001 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5c31\u53d8\u4e3a\uff1a \\(buy1=max(buy1,-prices[i])\\) \\(sell1=max(sell1,buy1+prices[i]\\) \\(buy2=max(buy2,sell1-prices[i])\\) \\(sell2=max(sell2,buy2+prices[i])\\) \u4ee3\u7801\u5b9e\u73b0 from typing import List class Solution : def maxProfit ( self , prices : List [ int ]) -> int : n = len ( prices ) # \u521d\u59cb\u72b6\u6001\u8bbe\u7f6e buy1 = buy2 = - prices [ 0 ] sell1 = sell2 = 0 for i in range ( 1 , n ): buy1 = max ( buy1 , - prices [ i ]) sell1 = max ( sell1 , buy1 + prices [ i ]) buy2 = max ( buy2 , sell1 - prices [ i ]) sell2 = max ( sell2 , buy2 + prices [ i ]) return sell2 \u63d0\u4ea4\u7ed3\u679c \uff1a \u80a1\u7968\u4e70\u5356\u2163 \u00b6 \u9898\u76ee\u63cf\u8ff0 \u89e3\u9898\u601d\u8def \u6b64\u9898\u5c06\u6700\u5927\u4ea4\u6613\u6b21\u6570\u4f5c\u4e3a\u53d8\u91cfk\u8f93\u5165\uff0c\u90a3\u4e48\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5c31\u9700\u8981\u5c06k\u4e5f\u8003\u8651\u8fdb\u53bb\uff1a \\(buy[i][k]=max(buy[i-1][k], sell[i-1][k-1]-prices[i])\\) \\(sell[i][k]=max(sell[i-1][k], buy[i-1][k]+prices[i])\\) \u540c\u65f6\u9700\u8981\u6ce8\u610f\u8003\u8651\u8fb9\u754c\u6761\u4ef6\u3002 \u4ee3\u7801\u5b9e\u73b0 from typing import List class Solution : def maxProfit ( self , k : int , prices : List [ int ]) -> int : n = len ( prices ) k = min ( k , n // 2 ) if not prices or k == 0 : return 0 dp = [[[ 0 ] * k , [ 0 ] * k ] for _ in range ( n )] # \u521d\u59cb\u5316\uff0c\u7b2c\u4e00\u5929\u4e70\u7684\u90fd\u4e3a-prices[0] dp [ 0 ][ 0 ] = [ - prices [ 0 ]] * k for i in range ( 1 , n ): for j in range ( 0 , k ): # \u5982\u679c\u662f\u7b2c\u4e00\u6b21\u4e70\u76f4\u63a5\u5c31\u662f-prices[i] # buy_j=max(buy_j, sell_j-1 - price) dp [ i ][ 0 ][ j ] = max ( dp [ i - 1 ][ 0 ][ j ], - prices [ i ] if j == 0 else dp [ i - 1 ][ 1 ][ j - 1 ] - prices [ i ]) # sell_j=max(sell_j,buy_j + price) dp [ i ][ 1 ][ j ] = max ( dp [ i - 1 ][ 1 ][ j ], dp [ i - 1 ][ 0 ][ j ] + prices [ i ]) return dp [ n - 1 ][ 1 ][ k - 1 ] \u63d0\u4ea4\u7ed3\u679c\uff1a \u80a1\u7968\u4e70\u5356\uff08\u51b7\u51bb\u671f\uff09 \u00b6 \u9898\u76ee\u63cf\u8ff0 \u89e3\u9898\u601d\u8def \u6709\u4e86\u51b7\u51bb\u671f\uff0c\u90a3\u4e48\u4e70\u5165\u65f6\u5019\u7684\u6700\u5927\u5229\u6da6\u5c31\u662f\u8ddf\u524d\u4e24\u5929\u7684\u5356\u51fa\u5229\u6da6\u6709\u5173\uff0c\u8fd9\u91cc\u6ca1\u6709\u5bf9\u4e70\u5356\u6b21\u6570\u505a\u9650\u5236\uff0c\u90a3\u4e48\u53ef\u4ee5\u5728 \u80a1\u7968\u4e70\u5356\u2161 \u7684\u57fa\u7840\u4e0a\u4fee\u6539\uff0c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5c31\u53ef\u4ee5\u66f4\u6539\u4e3a\uff1a \\(dp[n][0]=max(dp[n-1][0], dp[n-2][1]+prices[i])\\) \u4ee3\u7801\u5b9e\u73b0 from typing import List class Solution : def maxProfit ( self , prices : List [ int ]) -> int : n = len ( prices ) if n <= 1 : return 0 dp = [[ 0 , 0 ] for _ in range ( n )] dp [ 0 ] = [ 0 , - prices [ 0 ]] dp [ 1 ][ 1 ] = max ( dp [ 0 ][ 1 ], dp [ 0 ][ 0 ] - prices [ 1 ]) for i in range ( 1 , n ): # \u672a\u6301\u6709 dp [ i ][ 0 ] = max ( dp [ i - 1 ][ 0 ], dp [ i - 1 ][ 1 ] + prices [ i ]) if i > 1 : # \u6301\u6709 dp [ i ][ 1 ] = max ( dp [ i - 1 ][ 1 ], dp [ i - 2 ][ 0 ] - prices [ i ]) return dp [ n - 1 ][ 0 ] \u63d0\u4ea4\u7ed3\u679c\uff1a \u80a1\u7968\u4e70\u5356\uff08\u624b\u7eed\u8d39\uff09 \u00b6 \u9898\u76ee\u63cf\u8ff0 \u89e3\u9898\u601d\u8def \u8ddf\u80a1\u7968\u4e70\u5356\u2161\u57fa\u672c\u4e00\u81f4\uff0c\u53ea\u662f\u5c06fee\u4e5f\u7b97\u5230\u6210\u672c\u4e2d\u53bb\u3002 \u4ee3\u7801\u5b9e\u73b0 class Solution : def maxProfit ( self , prices : List [ int ], fee : int ) -> int : n = len ( prices ) dp_i_0 = 0 dp_i_1 = - prices [ 0 ] for i in range ( 1 , n ): dp_i_0 , dp_i_1 = max ( dp_i_0 , dp_i_1 + prices [ i ] - fee ), max ( dp_i_1 , dp_i_0 - prices [ i ]) return dp_i_0 \u63d0\u4ea4\u7ed3\u679c \uff1a \u6253\u5bb6\u52ab\u820d \u00b6 \u6253\u5bb6\u52ab\u820d\u2160 \u00b6 \u9898\u76ee\u63cf\u8ff0 \u89e3\u9898\u601d\u8def \u57fa\u672c\u4e0a\u6d89\u53ca\u5230\u6700\u4f18\u5b50\u95ee\u9898\u7684\u9898\u76ee\uff0c\u90fd\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u52a8\u6001\u4f18\u5316\u3002\u6839\u636e\u9898\u610f\u53ef\u4ee5\u5148\u5217\u51fa\u7ed3\u679c\u65b9\u7a0b\uff1a \\(dp(n)=amount\\) \uff0c\u65b9\u7a0b\u542b\u4e49\u4e3a\u5077\u5230\u7b2cn\u95f4\u5c4b\u5b50\u5077\u7a83\u5230\u7684\u6700\u5927\u91d1\u989d\u4e3aamount\u3002\u63a5\u7740\u53ef\u4ee5\u5217\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \\(dp(n)=max(dp(n-2)+nums[n],dp[n-1])\\) \u4ee3\u7801\u5b9e\u73b0 from typing import List class Solution : def rob ( self , nums : List [ int ]) -> int : n = len ( nums ) n = len ( nums ) if n == 0 : return 0 if n == 1 : return nums [ 0 ] dp_pre_1 = max ( nums [ 0 ], nums [ 1 ]) # \u524d\u4e00\u95f4 dp_pre_2 = nums [ 0 ] # \u524d\u4e24\u95f4 for i in range ( 2 , n ): dp_i = max ( dp_pre_1 , dp_pre_2 + nums [ i ]) dp_pre_2 = dp_pre_1 dp_pre_1 = dp_i return dp_pre_1 \u63d0\u4ea4\u7ed3\u679c \uff1a \u6253\u5bb6\u52ab\u820d\u2161 \u00b6 \u9898\u76ee\u63cf\u8ff0 \u89e3\u9898\u601d\u8def \u8ddf\u4e0a\u9898\u76f8\u6bd4\uff0c\u5217\u8868\u9996\u5c3e\u7684\u623f\u5b50\u4e5f\u662f\u76f8\u90bb\u7684\u3002\u5b9e\u9645\u4e0a\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u95ee\u9898\u7b80\u5316\u4e3anums[:-1]\u548cnums[1:]\u4e24\u4e2a\u5b50\u95ee\u9898\u7684\u7ed3\u679c\u3002 \u4ee3\u7801\u5b9e\u73b0 class Solution : def rob ( self , nums : List [ int ]) -> int : if len ( nums ) == 1 : return nums [ 0 ] return max ( self . _rob ( nums [ 1 :]), self . _rob ( nums [: - 1 ])) def _rob ( self , nums : List [ int ]) -> int : n = len ( nums ) if n == 0 : return 0 if n == 1 : return nums [ 0 ] dp_pre_1 = max ( nums [ 0 ], nums [ 1 ]) # \u524d\u4e00\u95f4 dp_pre_2 = nums [ 0 ] # \u524d\u4e24\u95f4 for i in range ( 2 , n ): dp_i = max ( dp_pre_1 , dp_pre_2 + nums [ i ]) dp_pre_2 = dp_pre_1 dp_pre_1 = dp_i return dp_pre_1 \u63d0\u4ea4\u7ed3\u679c \uff1a \u6253\u5bb6\u52ab\u820d\u2162 \u00b6 \u9898\u76ee\u63cf\u8ff0 \u89e3\u9898\u601d\u8def \u623f\u5c4b\u76f8\u8fde\u7684\u65b9\u5f0f\u5df2\u7ecf\u53d8\u4e3a\u6811\u5f62\u7ed3\u6784\u4e86\uff0c\u770b\u5230\u8fd9\u79cd\u7ed3\u6784\u60f3\u5230\u6811\u7684\u904d\u5386\uff0c\u6240\u4ee5\u4f7f\u7528\u81ea\u9876\u5411\u4e0b\u9012\u5f52\u7684\u65b9\u5f0f\u662f\u6bd4\u8f83\u5bb9\u6613\u5b9e\u73b0\u7684\u3002\u53d8\u91cf\u7ed3\u679c\u7b49\u5f0f\u53ef\u4ee5\u5148\u5217\u51fa\uff1a \\(dp(node)=not\\_rob,is\\_rob\\) \uff0c\u542b\u4e49\u662f\u5f53\u524d\u8282\u70b9\u4e3anode\u65f6\uff0c\u8fd4\u56de\u5077\u5f53\u524dnode\u548c\u4e0d\u5077\u5f53\u524dnode\u65f6\u7684\u6700\u9ad8\u91d1\u989d\u3002 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a\uff1a $$ dp(node)=max(dp(node.left)) + max(dp(node.right)), \\ node.val + dp(node.left)[0] + dp(node.right)[0] $$ \u53f3\u8fb9\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u5c31\u5206\u522b\u4ee3\u8868\u4e86 \\(not\\_rob\\) \u548c \\(is\\_rob\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 class Solution : def rob ( self , root : TreeNode ) -> int : return max ( self . _rob ( root )) def _rob ( self , node ): if not node : return 0 , 0 left = self . _rob ( node . left ) right = self . _rob ( node . right ) # \u5230\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u90fd\u6709\u5077\u6216\u8005\u4e0d\u5077\u4e24\u79cd\u72b6\u6001 # \u5982\u679c\u5077\u5f53\u524d\u8282\u70b9 is_rob = node . val + left [ 0 ] + right [ 0 ] # \u5982\u679c\u4e0d\u5077\u5f53\u524d\u8282\u70b9 not_rob = max ( left ) + max ( right ) return not_rob , is_rob \u63d0\u4ea4\u7ed3\u679c \uff1a \u4e00\u822c\u7ec3\u4e60\u9898 \u00b6 \u4e09\u89d2\u5f62\u6700\u5c0f\u8def\u5f84\u548c \u00b6 \u9898\u76ee\u63cf\u8ff0: \u89e3\u9898\u601d\u8def\uff1a pass \u4ee3\u7801\u5b9e\u73b0\uff1a class Solution : def minimumTotal ( self , triangle : List [ List [ int ]]) -> int : # dp[i][j]\u8868\u793a\u5230\u5750\u6807[i,j]\u7684\u70b9\u7684\u6700\u5c0f\u8def\u5f84 n = len ( triangle ) dp = [ None ] * n dp [ 0 ] = triangle [ 0 ][ 0 ] for i in range ( 1 , n ): j = i while j >= 0 : if j == i : # \u6700\u540e\u4e00\u5217 dp [ j ] = triangle [ i ][ j ] + dp [ j - 1 ] elif j == 0 : dp [ j ] = triangle [ i ][ j ] + dp [ j ] else : dp [ j ] = triangle [ i ][ j ] + min ( dp [ j - 1 ], dp [ j ]) j -= 1 return min ( dp ) \u63d0\u4ea4\u7ed3\u679c\uff1a \u8ba1\u7b97\u5404\u4e2a\u4f4d\u6570\u4e0d\u540c\u7684\u6570\u5b57\u4e2a\u6570 \u00b6 \u9898\u76ee\u63cf\u8ff0\uff1a \u89e3\u9898\u601d\u8def\uff1a \u53ef\u4ee5\u4f9d\u6b21\u5199\u51fa\u524d\u51e0\u4e2a\u7684\u7ed3\u679c,\u770b\u662f\u5426\u80fd\u5f97\u51fa\u8f6c\u79fb\u65b9\u7a0b: \\(dp[0]=1\\) \\(dp[1]=dp[0]+9\\) \\(dp[2]=dp[1]+9*9\\) \\(dp[3]=dp[2]+9*9*8\\) \u6839\u636e\u4e0a\u9762\u7684\u5f0f\u5b50,\u53ef\u4ee5\u5f52\u7eb3\u51fa\u52a8\u6001\u8f6c\u79fb\u65b9\u7a0b: $$ \\tag{n>=2} dp[n]=dp[n-1]+9*\\prod_{i=0}^{n-2} {9-i} $$ \u5f53\u7136\u8981\u6ce8\u610fn\u7684\u53d6\u503c\u8303\u56f4. \u4ee3\u7801\u5b9e\u73b0: class Solution : def countNumbersWithUniqueDigits ( self , n : int ) -> int : dp_i = 1 for i in range ( 1 , n + 1 ): temp = 9 for j in range ( i - 1 ): temp *= ( 9 - j ) dp_i += temp return dp_i print ( Solution () . countNumbersWithUniqueDigits ( 3 )) \u63d0\u4ea4\u7ed3\u679c\uff1a \u6574\u6570\u62c6\u5206 \u00b6 \u9898\u76ee\u63cf\u8ff0\uff1a \u89e3\u9898\u601d\u8def\uff1a \u8bbe \\(dp[i]\\) \u4e3a\u5c06\u6b63\u6574\u6570 \\(i\\) \u62c6\u5206\u4e3a\u81f3\u5c11\u4e24\u4e2a\u6b63\u6574\u6570\u7684\u548c\u65f6\u7684\u6700\u5927\u4e58\u79ef\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \\(dp[i]=max(dp[i-j] \\times j, (i-j) \\times j)\\) \uff0c \\((0<j<i)\\) \u65b9\u7a0b\u7684\u542b\u4e49\u5c31\u662f\uff0c\u8981\u6c42\u89e3 \\(i\\) \u7684\u6700\u5927\u4e58\u79ef\uff0c\u53ef\u4ee5\u5c06 \\(i\\) \u62c6\u5206\u6210\u4e24\u90e8\u5206 \\(j\\) \u548c \\(i-j\\) ,\u90a3\u4e48\u6b64\u65f6 \\(dp[i]\\) \u5c31\u662f \\(dp[i-j]\\times j\\) \u548c \\((i-j)*j\\) \u4e2d\u7684\u8f83\u5927\u503c\uff0c\u5176\u4e2d \\(j\\) \u7684\u53d6\u503c\u8303\u56f4\u4e3a \\((0,i)\\) \u6211\u4eec\u77e5\u9053,\u7b49\u5206\u7684\u65f6\u5019\u4e58\u79ef\u4f1a\u662f\u6700\u5927\u7684,\u5047\u8bbe \\(n=a\\times x\\) , \\(a\\) \u662f\u5206\u6210\u7684\u4efd\u6570,\u90a3\u4e48\u6211\u4eec\u8981\u6c42\u7684 \\(y=x^{\\frac n x}\\) \u7684\u6700\u5927\u503c,\u5176\u5b9e\u5c31\u662f\u6c42 \\(y=x^{\\frac 1 x}\\) \u7684\u6700\u5927\u503c,\u6839\u636e\u6570\u5b66\u7684\u6c42\u5bfc\u53ef\u4ee5\u5f97\u51fa\u6b64\u65f6 \\(x\\) \u5e94\u8be5\u4e3a \\(e\\) ( \\(e\\approx 2.7\\) ),\u56e0\u4e3a \\(x\\) \u4e3a\u6b63\u6574\u6570,\u6240\u4ee5 \\(x\\) \u53ef\u4ee5\u4e3a2\u6216\u80053,\u843d\u5b9e\u5230\u4f18\u5316, \\(j\\) \u7684\u53d6\u503c\u8303\u56f4\u53ef\u4ee5\u53ea\u8003\u86512\u548c3\u7684\u60c5\u51b5. \u4ee3\u7801\u5b9e\u73b0: class Solution : def integerBreak ( self , n : int ) -> int : if n < 4 : return n - 1 dp = [ 0 ] * ( n + 1 ) dp [ 2 ] = 1 for i in range ( 2 , n + 1 ): dp [ i ] = max ( dp [ i - 2 ] * 2 , 2 * ( i - 2 ), dp [ i - 3 ] * 3 , 3 * ( i - 3 )) return dp [ - 1 ] \u63d0\u4ea4\u7ed3\u679c\uff1a \u4e00\u548c\u96f6 \u00b6 \u9898\u76ee\u63cf\u8ff0\uff1a \u89e3\u9898\u601d\u8def: \u8bbe \\(dp[i][j]\\) \u4e3a \\(i\\) \u4e2a0\u548c \\(j\\) \u4e2a1\u80fd\u62fc\u51fa\u5b58\u5728\u4e8e\u6570\u7ec4 \\(s\\) \u4e2d\u7684\u6700\u5927\u6570\u91cf,\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u52a8\u6001\u8f6c\u79fb\u65b9\u7a0b: $$ dp[i][j]=max(1+dp[i-cost_zeros(k)][j-cost_ones(k)]) $$ \u5176\u4e2d \\(i>=cost\\_zeros(k),j>cost\\_ones(k)\\) \u8fd9\u4e2a\u65b9\u7a0b\u8981\u8868\u8fbe\u7684\u610f\u601d\u5c31\u662f,\u5047\u5b9a\u5f53\u524d\u5b57\u7b26\u4e32\u4e3ak,\u5982\u679c\u80fd\u4ecek\u5230 \\(dp[i][j]\\) ,\u90a3\u4e48 \\(dp[i][j]\\) \u5c31\u7b49\u4e8ek\u5904\u6700\u5927\u6570\u91cf\u52a01, \u4ee3\u7801\u5b9e\u73b0: class Solution : def findMaxForm ( self , strs : List [ str ], m : int , n : int ) -> int : dp = [[ 0 ] * ( n + 1 ) for _ in range ( m + 1 )] for s in strs : zeros = s . count ( \"0\" ) ones = s . count ( \"1\" ) for i in range ( m , zeros - 1 , - 1 ): for j in range ( n , ones - 1 , - 1 ): dp [ i ][ j ] = max ( dp [ i ][ j ], dp [ i - zeros ][ j - ones ] + 1 ) return dp [ m ][ n ] K \u7ad9\u4e2d\u8f6c\u5185\u6700\u4fbf\u5b9c\u7684\u822a\u73ed \u00b6 \u89e3\u9898\u601d\u8def: \u8bbe \\(dp[k][d]\\) \u4e3a\u7ecf\u8fc7 \\(k\\) \u6b21\u8f6c\u673a\u5230\u8fbe\u76ee\u7684\u5730 \\(d\\) \u7684\u6700\u6700\u5c11\u8d39\u7528,\u90a3\u4e48\u52a8\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a: $$ dp[k][d]=min(dp[k][d], dp[k-1][s]+p) $$ \u5176\u4e2d \\(s\\) \u4e3a\u51fa\u53d1\u5730, \\(p\\) \u4e3a \\(s\\) \u5230 \\(d\\) \u7684\u8ddd\u79bb,\u4e5f\u5c31\u662f\u8bf4\u5f53\u524d \\(dp[k][d]\\) \u7b49\u4e8e\u524d\u4e00\u6b21 \\(dp[k-1][s]+p\\) \u4e2d\u7684\u6700\u5c0f\u7684\u4e00\u4e2a \u4ee3\u7801\u5b9e\u73b0: \u4f18\u5316\u4ee3\u7801\uff1a class Solution ( object ): def findCheapestPrice ( self , n , flights , src , dst , K ): # \u4f7f\u7528\u4e00\u4e2a2*n\u7684\u77e9\u9635\u662f\u4e3a\u4e86\u4f18\u5316\u7a7a\u95f4,\u4e0d\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528k*n dp = [[ float ( 'inf' )] * n for i in range ( 2 )] # \u521d\u59cb\u5316\u5f53\u524dsrc\u548c\u524d\u63d0\u4e2asrc\u7684\u503c,\u90fd\u4e3a0 dp [ 0 ][ src ] = dp [ 1 ][ src ] = 0 for k in range ( K + 1 ): for s , d , p in flights : # \u56e0\u4e3a\u53ea\u6709src\u662f\u6709\u503c\u7684,\u6240\u4ee5\u6700\u5f00\u59cb\u53ea\u6709\u5f53s=src\u7684\u65f6\u5019,d\u7684\u503c\u624d\u4f1a\u66f4\u65b0 dp [ k & 1 ][ d ] = min ( dp [ k & 1 ][ d ], dp [ ~ k & 1 ][ s ] + p ) return dp [ K & 1 ][ dst ] if dp [ K & 1 ][ dst ] < float ( 'inf' ) else - 1 \u77e9\u9635\u533a\u57df\u548c \u00b6 \u65b9\u6cd51:\u52a8\u6001\u89c4\u5212 \u4ee3\u7801\u5b9e\u73b0: from typing import List class Solution : def matrixBlockSum ( self , mat : List [ List [ int ]], K : int ) -> List [ List [ int ]]: m = len ( mat ) # \u884c n = len ( mat [ 0 ]) # \u5217 answer = [[ 0 ] * n for _ in range ( m )] for j in range ( n ): jrange = ( max ( 0 , j - K ), min ( m , j + K + 1 )) for i in range ( m ): if i == 0 : for x in mat [ 0 : min ( K + 1 , m )]: answer [ 0 ][ j ] += sum ( x [ jrange [ 0 ]: jrange [ 1 ]]) else : irange = ( max ( 0 , i - K ), min ( m , i + K + 1 )) add_item = 0 if i + K + 1 > m else sum ( mat [ i + K ][ jrange [ 0 ]: jrange [ 1 ]]) minus_item = 0 if i - K <= 0 else sum ( mat [ irange [ 0 ] - 1 ][ jrange [ 0 ]: jrange [ 1 ]]) answer [ i ][ j ] = answer [ i - 1 ][ j ] + add_item - minus_item return answer print ( Solution () . matrixBlockSum ([[ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ]], 1 )) \u65b9\u6cd52:\u4e8c\u7ef4\u524d\u7f00\u548c \u4ee3\u7801\u5b9e\u73b0: from typing import List \"\"\" \u4f7f\u7528\u524d\u7f00\u548c \"\"\" class Solution : def matrixBlockSum ( self , mat : List [ List [ int ]], K : int ) -> List [ List [ int ]]: m = len ( mat ) # \u884c n = len ( mat [ 0 ]) # \u5217 answer = [[ 0 ] * ( n + 1 ) for _ in range ( m + 1 )] # \u6c42\u51fa\u524d\u7f00\u548c for i in range ( 1 , m + 1 ): for j in range ( 1 , n + 1 ): answer [ i ][ j ] = answer [ i ][ j - 1 ] + answer [ i - 1 ][ j ] - answer [ i - 1 ][ j - 1 ] + mat [ i - 1 ][ j - 1 ] def get ( x , y ): # \u5904\u7406\u8fb9\u754c\u95ee\u9898 x = max ( min ( x , m ), 0 ) y = max ( min ( y , n ), 0 ) return answer [ x ][ y ] ans = [[ 0 ] * n for _ in range ( m )] for i in range ( m ): for j in range ( n ): ans [ i ][ j ] = get ( i + K + 1 , j + K + 1 ) - \\ get ( i - K , j + K + 1 ) - \\ get ( i + K + 1 , j - K ) + \\ get ( i - K , j - K ) return ans print ( Solution () . matrixBlockSum ([[ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ]], 1 )) \u8868\u793a\u6570\u5b57\u7684\u6700\u5c11\u8fd0\u7b97\u7b26 \u00b6 \u4ee3\u7801\u5b9e\u73b0\uff1a from functools import lru_cache class Solution : def leastOpsExpressTarget ( self , x : int , target : int ) -> int : cost = list ( range ( 40 )) cost [ 0 ] = 2 @lru_cache ( None ) def dp ( i , target ): # i\u8868\u793a\u662fx\u7684\u51e0\u6b21\u5e42\uff0ctarget\u662f\u5f53\u524d\u8981\u5f97\u5230\u7684\u76ee\u6807\u6570 if target == 0 : return 0 if target == 1 : return cost [ i ] if i >= 39 : return float ( 'inf' ) t , r = divmod ( target , x ) return min ( r * cost [ i ] + dp ( i + 1 , t ), ( x - r ) * cost [ i ] + dp ( i + 1 , t + 1 )) return dp ( 0 , target ) - 1 \u73af\u7ed5\u5b57\u7b26\u4e32\u4e2d\u552f\u4e00\u7684\u5b50\u5b57\u7b26\u4e32 \u00b6 \u4ee3\u7801\u5b9e\u73b0\uff1a # \u4f7f\u7528hashmap import collections class Solution : def findSubstringInWraproundString ( self , p : str ) -> int : p = \"^\" + p # len_mapper\u4e3a\u4ee5\u5f53\u524d\u5b57\u7b26\u7ed3\u5c3e\u7684\u6700\u957f\u5b50\u4e32\u7684\u957f\u5ea6 len_mapper = collections . defaultdict ( lambda : 0 ) w = 1 for i in range ( 1 , len ( p )): if ord ( p [ i ]) - ord ( p [ i - 1 ]) in ( 1 , - 25 ): w += 1 else : w = 1 len_mapper [ p [ i ]] = max ( len_mapper [ p [ i ]], w ) # print(dict(len_mapper)) return sum ( len_mapper . values ()) \u53ea\u6709\u4e24\u4e2a\u952e\u7684\u952e\u76d8 \u00b6 \u601d\u8def\uff1a \u5c06\u6240\u6709\u64cd\u4f5c\u5206\u6210\u4ee5 copy \u4e3a\u9996\u7684\u591a\u7ec4\uff0c\u5f62\u5982 (copy, paste, ..., paste)\uff0c\u518d\u4f7f\u7528 C \u4ee3\u8868 copy\uff0cP \u4ee3\u8868 paste\u3002\u4f8b\u5982\u64cd\u4f5c CPPCPPPPCP \u53ef\u4ee5\u5206\u4e3a [CPP][CPPPP][CP] \u4e09\u7ec4\u3002 \u5047\u8bbe\u6bcf\u7ec4\u7684\u957f\u5ea6\u4e3a g_1, g_2, ...\u3002\u5b8c\u6210\u7b2c\u4e00\u7ec4\u64cd\u4f5c\u540e\uff0c\u5b57\u7b26\u4e32\u6709 g_1 \u4e2a A\uff0c\u5b8c\u6210\u7b2c\u4e8c\u7ec4\u64cd\u4f5c\u540e\u5b57\u7b26\u4e32\u6709 g_1 * g_2 \u4e2a A\u3002\u5f53\u5b8c\u6210\u6240\u6709\u64cd\u4f5c\u65f6\uff0c\u5171\u6709 g_1 * g_2 * ... * g_n \u4e2a 'A'\u3002 \u6211\u4eec\u6700\u7ec8\u60f3\u8981 N = g_1 * g_2 * ... * g_n \u4e2a A\u3002\u5982\u679c g_i \u662f\u5408\u6570\uff0c\u5b58\u5728 g_i = p * q\uff0c\u90a3\u4e48\u8fd9\u7ec4\u64cd\u4f5c\u53ef\u4ee5\u5206\u89e3\u4e3a\u4e24\u7ec4\uff0c\u7b2c\u4e00\u7ec4\u5305\u542b 1 \u4e2a C \u548c p-1 \u4e2a P\uff0c\u7b2c\u4e8c\u7ec4\u5305\u542b 1 \u4e2a C \u548c q-1 \u4e2a P\u3002 \u73b0\u5728\u8bc1\u660e\u8fd9\u79cd\u5206\u5272\u65b9\u5f0f\u4f7f\u7528\u7684\u64cd\u4f5c\u6700\u5c11\u3002\u539f\u672c\u9700\u8981 \\(pq\\) \u6b65\u64cd\u4f5c\uff0c\u5206\u89e3\u540e\u9700\u8981 \\(p+q\\) \u6b65\u3002\u56e0\u4e3a \\(p+q <= pq\\) \uff0c\u7b49\u4ef7\u4e8e \\(1 <= (p-1)(q-1)\\) \uff0c\u5f53 \\(p >= 2\\) \u4e14 \\(q >= 2\\) \u65f6\u4e0a\u5f0f\u6c38\u8fdc\u6210\u7acb\u3002 \u4ee3\u7801\uff1a class Solution : def minSteps ( self , n : int ) -> int : i = 2 res = 0 # \u8fdb\u884c\u8d28\u56e0\u6570\u5206\u89e3 while n > 1 : while n % i == 0 : n //= i res += i i += 1 return res","title":"\u52a8\u6001\u89c4\u5212"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_1","text":"\u52a8\u6001\u89c4\u5212\uff08\u82f1\u8bed\uff1aDynamic programming\uff0c\u7b80\u79f0 DP\uff09\u662f\u4e00\u79cd\u5728\u6570\u5b66\u3001\u7ba1\u7406\u79d1\u5b66\u3001\u8ba1\u7b97\u673a\u79d1\u5b66\u3001\u7ecf\u6d4e\u5b66\u548c\u751f\u7269\u4fe1\u606f\u5b66\u4e2d\u4f7f\u7528\u7684\uff0c\u901a\u8fc7\u628a\u539f\u95ee\u9898\u5206\u89e3\u4e3a\u76f8\u5bf9\u7b80\u5355\u7684\u5b50\u95ee\u9898\u7684\u65b9\u5f0f\u6c42\u89e3\u590d\u6742\u95ee\u9898\u7684\u65b9\u6cd5\u3002 \u52a8\u6001\u89c4\u5212\u5e38\u5e38\u9002\u7528\u4e8e\u6709\u91cd\u53e0\u5b50\u95ee\u9898\u548c\u6700\u4f18\u5b50\u7ed3\u6784\u6027\u8d28\u7684\u95ee\u9898\uff0c\u52a8\u6001\u89c4\u5212\u65b9\u6cd5\u6240\u8017\u65f6\u95f4\u5f80\u5f80\u8fdc\u5c11\u4e8e\u6734\u7d20\u89e3\u6cd5\u3002 \u52a8\u6001\u89c4\u5212\u80cc\u540e\u7684\u57fa\u672c\u601d\u60f3\u975e\u5e38\u7b80\u5355\u3002\u5927\u81f4\u4e0a\uff0c\u82e5\u8981\u89e3\u4e00\u4e2a\u7ed9\u5b9a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u89e3\u5176\u4e0d\u540c\u90e8\u5206\uff08\u5373\u5b50\u95ee\u9898\uff09\uff0c\u518d\u6839\u636e\u5b50\u95ee\u9898\u7684\u89e3\u4ee5\u5f97\u51fa\u539f\u95ee\u9898\u7684\u89e3\u3002\u52a8\u6001\u89c4\u5212\u5f80\u5f80\u7528\u4e8e\u4f18\u5316\u9012\u5f52\u95ee\u9898\uff0c\u4f8b\u5982\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u5982\u679c\u8fd0\u7528\u9012\u5f52\u7684\u65b9\u5f0f\u6765\u6c42\u89e3\u4f1a\u91cd\u590d\u8ba1\u7b97\u5f88\u591a\u76f8\u540c\u7684\u5b50\u95ee\u9898\uff0c\u5229\u7528\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\u53ef\u4ee5\u51cf\u5c11\u8ba1\u7b97\u91cf\u3002 \u901a\u5e38\u8bb8\u591a\u5b50\u95ee\u9898\u975e\u5e38\u76f8\u4f3c\uff0c\u4e3a\u6b64\u52a8\u6001\u89c4\u5212\u6cd5\u8bd5\u56fe\u4ec5\u4ec5\u89e3\u51b3\u6bcf\u4e2a\u5b50\u95ee\u9898\u4e00\u6b21\uff0c\u5177\u6709\u5929\u7136\u526a\u679d\u7684\u529f\u80fd\uff0c\u4ece\u800c\u51cf\u5c11\u8ba1\u7b97\u91cf\uff1a\u4e00\u65e6\u67d0\u4e2a\u7ed9\u5b9a\u5b50\u95ee\u9898\u7684\u89e3\u5df2\u7ecf\u7b97\u51fa\uff0c\u5219\u5c06\u5176\u8bb0\u5fc6\u5316\u5b58\u50a8\uff0c\u4ee5\u4fbf\u4e0b\u6b21\u9700\u8981\u540c\u4e00\u4e2a\u5b50\u95ee\u9898\u89e3\u4e4b\u65f6\u76f4\u63a5\u67e5\u8868\u3002\u8fd9\u79cd\u505a\u6cd5\u5728\u91cd\u590d\u5b50\u95ee\u9898\u7684\u6570\u76ee\u5173\u4e8e\u8f93\u5165\u7684\u89c4\u6a21\u5448\u6307\u6570\u589e\u957f\u65f6\u7279\u522b\u6709\u7528\u3002","title":"\u7b97\u6cd5\u5f15\u5165"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_2","text":"\u5b9a\u4e49\u4e3a\uff1a\u7531 0 \u548c 1 \u5f00\u59cb\uff0c\u540e\u9762\u7684\u6bcf\u4e00\u9879\u6570\u5b57\u90fd\u662f\u524d\u9762\u4e24\u9879\u6570\u5b57\u7684\u548c\u3002","title":"\u6590\u6ce2\u90a3\u5951\u6570\u5217"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#1","text":"\u4f9d\u7136\u53ef\u4ee5\u8fd0\u7528\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \uff1a $$ f(n)=f(n-1)+f(n-2) $$ \u4ee3\u7801\u5b9e\u73b0\u5c31\u51fa\u6765\u4e86\uff1a def fib ( n ): # \u8fb9\u754c\u6761\u4ef6\uff08base case\uff09 if n in ( 1 , 2 ): return 1 return fib ( n - 1 ) + fib ( n - 2 ) \u8fd9\u6837\u66b4\u529b\u9012\u5f52\u5176\u5b9e\u662f\u6548\u7387\u5f88\u4f4e\u7684\uff0c\u753b\u51fa\u9012\u5f52\u6811\u5c31\u53ef\u4ee5\u5f88\u660e\u663e\u7684\u770b\u5230\uff1a \u8ba1\u7b97f(20)\u7684\u65f6\u5019\uff0c\u8ba1\u7b97\u51fa\u4e86f(19)\u548cf(18)\uff0c\u5230\u4e86\u8ba1\u7b97f(19)\u7684\u65f6\u5019\uff0c\u53c8\u628af(18)\u8ba1\u7b97\u4e86\u4e00\u904d\uff0c\u8fd9\u6837\u91cd\u590d\u8ba1\u7b97\u5bfc\u81f4\u6548\u7387\u53d8\u4f4e\u3002","title":"1.\u66b4\u529b\u9012\u5f52"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#2","text":"\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u6216\u8005\u5b57\u5178\uff0c\u5c06\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u7684\u503c\u5b58\u8fdb\u53bb\uff0c\u5c31\u50cf\u4e00\u4e2a\u7f13\u5b58\u4e00\u6837\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u51cf\u5c11\u91cd\u590d\u8ba1\u7b97\u3002 \u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a def fib ( n , tb : List ): # \u8fb9\u754c\u6761\u4ef6\uff08base case\uff09 if n in ( 1 , 2 ): return 1 if tb [ n - 1 ] is None : tb [ n - 1 ] = fib ( n - 1 , tb ) + fib ( n - 2 , tb ) return tb [ n - 1 ] \u9012\u5f52\u56fe\u5982\u4e0b\uff1a \u8fd9\u6837\u5c31\u5c06\u9012\u5f52\u6811\u4e2d\u7684\u5197\u4f59\u8ba1\u7b97\u90fd\u53bb\u6389\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4ece O(n^2) \u4f18\u5316\u5230\u4e86 O(n) \uff0c\u53ef\u4ee5\u8bf4\u662f\u964d\u7ef4\u6253\u51fb\u3002 \u6839\u636e\u601d\u8003\u89e3\u9898\u7684\u65b9\u5411\u53ef\u77e5\uff0c\u8fd9\u662f\u4e00\u79cd\u81ea\u9876\u5411\u4e0b\u7684\u65b9\u5f0f\uff0c\u4ece\u6700\u7ec8\u7ed3\u679c\u4e5f\u5c31\u662f\u9012\u5f52\u6811\u7684\u6839\u8282\u70b9\uff0c\u9012\u5f52\u5f80\u4e0b\u8ba1\u7b97\u76f4\u81f3\u8fd4\u56de\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a","title":"2.\u5907\u5fd8\u5f55\u4f18\u5316"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#3dp","text":"\u5176\u5b9e\u6211\u4eec\u8fd8\u53ef\u4ee5\u81ea\u5e95\u5411\u4e0a\u7684\u8fed\u4ee3\u6c42\u89e3\uff0c\u4ece\u6700\u5c0f\u7684f(1)\u548cf(2)\u5f80\u4e0a\u63a8\u51faf(20)\uff0c\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a def fib ( n ): if n in ( 1 , 2 ): return 1 dp = [ 0 ] * ( n + 1 ) dp [ 1 ] = dp [ 2 ] = 1 for i in range ( 3 , n + 1 ): dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] return dp [ n ]","title":"3.dp\u6570\u7ec4\u81ea\u5e95\u5411\u4e0a\u8fed\u4ee3"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#4dp","text":"\u6211\u4eec\u89c2\u5bdf\u5230\uff0c\u6bcf\u4e00\u6b21\u7684\u7ed3\u679c\u5b9e\u9645\u53ea\u8ddf\u524d\u4e24\u6b21\u7684\u7ed3\u679c\u6709\u5173\uff0c\u6240\u4ee5\u53ef\u4ee5\u53ea\u5b58\u50a8\u524d\u4e24\u6b21\u7684\u7ed3\u679c\uff0c\u5bf9\u7a7a\u95f4\u8fdb\u884c\u7b80\u5316\u3002 def fib ( n ): if n in ( 1 , 2 ): return 1 dp_1 = dp_2 = 1 for i in range ( 3 , n + 1 ): dp_1 , dp_2 = dp_1 + dp_2 , dp_1 return dp_1","title":"4.dp\u6570\u7ec4\u7a7a\u95f4\u4f18\u5316"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_3","text":"\u5148\u770b\u4e0b\u9898\u2f6c\uff1a\u7ed9\u4f60 k \u79cd\u2faf\u503c\u7684\u786c\u5e01\uff0c\u2faf\u503c\u5206\u522b\u4e3a c1, c2 ... ck \uff0c\u6bcf\u79cd\u786c \u5e01\u7684\u6570\u91cf\u2f46\u9650\uff0c\u518d\u7ed9\u2f00\u4e2a\u603b\u2fa6\u989d amount \uff0c\u95ee\u4f60 \u6700\u5c11 \u9700\u8981\u2f0f\u679a\u786c\u5e01\u51d1\u51fa\u8fd9\u4e2a\u2fa6\u989d\uff0c\u5982\u679c\u4e0d\u53ef\u80fd\u51d1\u51fa\uff0c\u7b97\u6cd5\u8fd4\u56de -1 \u3002","title":"\u51d1\u96f6\u94b1\u95ee\u9898"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_4","text":"\u601d\u8003\u6b65\u9aa4\uff1a \u6b64\u95ee\u9898\u5305\u542b \u6700\u4f18\u5b50\u7ed3\u6784 \u7684\u7279\u70b9\uff0c\u5e76\u4e14\u5b50\u95ee\u9898\u4e4b\u95f4\u76f8\u4e92\u72ec\u7acb\uff0c\u6240\u4ee5\u662f\u52a8\u6001\u89c4\u5212\u7684\u95ee\u9898\u3002 \u5b9a\u4e49\u6b63\u786e\u7684dp\u51fd\u6570\uff0c dp(amount)=n \u8868\u793a\u6700\u5c11\u9700\u8981n\u4e2a\u786c\u5e01\u51d1\u51faamount\u91d1\u989d\u7684\u94b1\uff0c\u8fd9\u4e2a\u5f0f\u5b50\u5176\u5b9e\u4e5f\u5f88\u597d\u5217\u51fa\u6765\uff0c\u9898\u5e72\u4e2d\u53ea\u6709amount\u8fd9\u4e00\u4e2a\u53d8\u91cf\uff0c\u6211\u4eec\u8981\u6c42\u89e3\u7684\u5c31\u662f\u6700\u5c11\u7684\u786c\u5e01\u6570\uff0c\u8bbe\u4e3an\uff0c\u8fd9\u6837\u5c31\u5f88\u5bb9\u6613\u5b9a\u4e49\u51fadp\u51fd\u6570\u4e86\u3002 \u5217\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a $$ dp(amount)=min(dp(amount-c1)+1, dp(amount-c2)+1, ...) $$ \u6ce8\u610f\u8fb9\u754c\u6761\u4ef6\uff0c\u5982\u679c\u4e0d\u80fd\u51d1\u51fa\u7684\u60c5\u51b5\u5c31\u662f\u5f53amount\u6bd4\u5176\u4e2d\u6700\u5c0f\u7684\u786c\u5e01\u9762\u989d\u8fd8\u8981\u5c0f\u5e76\u4e14\u4e0d\u4e3a0\u3002 \u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a from typing import List def min_coin_num ( coins : List , amount : int ): def dp ( n ): # \u8fb9\u754c\u6761\u4ef6 if n == 0 : # \u91d1\u989d\u4e3a0\uff0c\u4e0d\u9700\u8981\u786c\u5e01\u4e86 return 0 if n < 0 : # \u91d1\u989d\u4e3a\u8d1f\u4e86\uff0c\u5f53\u524d\u9012\u5f52\u5b50\u8282\u70b9\u65e0\u89e3 return - 1 ret = float ( \"inf\" ) for coin in coins : sub_problem = dp ( n - coin ) if sub_problem == - 1 : continue ret = min ( ret , sub_problem + 1 ) return ret if ret != float ( \"inf\" ) else - 1 return dp ( amount ) \u753b\u51fa\u9012\u5f52\u6811\u540e\u53ef\u4ee5\u770b\u5230\uff0c\u4f9d\u7136\u5b58\u5728\u5197\u4f59\u7684\u8ba1\u7b97\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6b64\u7a0d\u4f5c\u4f18\u5316\uff0c\u7528\u4e00\u4e2a\u5907\u5fd8\u5f55\u8bb0\u5f55\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u7684\u7ed3\u679c\uff0c\u4e0b\u6b21\u7528\u5230\u65f6\uff0c\u5c31\u4e0d\u9700\u8981\u91cd\u590d\u8ba1\u7b97\u4e86\u3002 \u4f18\u5316\u540e\u7684\u4ee3\u7801\uff1a from typing import List # \u5907\u5fd8\u5f55\u4f18\u5316 def min_coin_num ( coins : List , amount : int ): memo = [ None ] * ( amount + 1 ) def dp ( n ): if memo [ n ] is not None : return memo [ n ] # \u8fb9\u754c\u6761\u4ef6 if n == 0 : # \u91d1\u989d\u4e3a0\uff0c\u4e0d\u9700\u8981\u786c\u5e01\u4e86 return 0 if n < 0 : # \u91d1\u989d\u4e3a\u8d1f\u4e86\uff0c\u5f53\u524d\u9012\u5f52\u5b50\u8282\u70b9\u65e0\u89e3 return - 1 ret = float ( \"inf\" ) for coin in coins : sub_problem = dp ( n - coin ) if sub_problem == - 1 : continue ret = min ( ret , sub_problem + 1 ) # \u8bb0\u5165\u5907\u5fd8\u5f55 memo [ n ] = ret if ret != float ( \"inf\" ) else - 1 return memo [ n ] return dp ( amount ) \u8fd9\u91cc\u662f\u7528\u6570\u7ec4\u5f53\u5907\u5fd8\u5f55\uff0c\u5b9e\u9645\u7528\u5b57\u5178\u4e5f\u662f\u4e00\u6837\u3002","title":"\u81ea\u9876\u5411\u4e0b\u601d\u8003"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_5","text":"\u4e00\u822c\u81ea\u9876\u5411\u4e0b\u9700\u8981\u7528\u5230\u9012\u5f52\uff0c\u601d\u8def\u662f\u5c06\u6700\u7ec8\u7684\u95ee\u9898\u9012\u5f52\u5206\u89e3\u4e3a\u4e00\u4e2a\u4e00\u4e2a\u7684\u5b50\u95ee\u9898\uff0c\u540c\u6837\u6211\u4eec\u4e5f\u53ef\u4ee5\u81ea\u5e95\u5411\u4e0a\u8ba1\u7b97\u51fa\u7ed3\u679c\uff0c\u4ece\u6700\u521d\u7684\u60c5\u51b5\u5411\u4e0a\u7ecf\u5386\u6709\u9650\u6b21\u7684\u8fed\u4ee3\uff0c\u6700\u7ec8\u5f97\u5230\u7ed3\u679c\u3002 \u4ee3\u7801\u5b9e\u73b0\uff1a from typing import List # \u81ea\u5e95\u5411\u4e0a def min_coin_num ( coins : List , amount : int ): dp = [ float ( \"inf\" )] * ( amount + 1 ) dp [ 0 ] = 0 for n in range ( amount + 1 ): for coin in coins : if coin <= n : dp [ n ] = min ( dp [ n ], dp [ n - coin ] + 1 ) return dp [ amount ] if dp [ amount ] != float ( \"inf\" ) else - 1","title":"\u81ea\u5e95\u5411\u4e0a\u601d\u8003"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_6","text":"\u9002\u7528\u60c5\u5f62\uff1a\u6700\u4f18\u5b50\u95ee\u9898\uff0c\u5e76\u4e14\u5b50\u95ee\u9898\u4e92\u76f8\u72ec\u7acb\u3002 \u601d\u8003\u65b9\u5411\uff1a1.\u81ea\u9876\u5411\u4e0b\u9012\u5f52\uff1b2.\u81ea\u5e95\u5411\u4e0a\u6709\u9650\u8fed\u4ee3\u3002 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\u4e00\u822c\u5f62\u5f0f\u4e3a \\(dp(\u53d8\u91cf1\uff0c\u53d8\u91cf2\uff0c...)=\u76ee\u6807\u7ed3\u679c\\) \u4f18\u5316\u65b9\u5f0f\uff1a\u6570\u7ec4\u6216\u8005\u5b57\u5178\u4f5c\u4e3a\u5907\u5fd8\u5f55\u8bb0\u5f55\u4e2d\u95f4\u5b50\u95ee\u9898\u7684\u7ed3\u679c\uff0c\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002","title":"\u65b9\u6cd5\u603b\u7ed3"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_7","text":"","title":"\u7ecf\u5178\u7cfb\u5217\u95ee\u9898"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_8","text":"","title":"\u80a1\u7968\u4e70\u5356"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#i","text":"\u9898\u76ee\u63cf\u8ff0 \u89e3\u9898\u601d\u8def \u76ee\u6807\u662f\u8981\u6c42\u5f97\u6700\u5927\u5229\u6da6\uff0c\u53ef\u89c1\u5305\u542b\u6700\u4f18\u5b50\u95ee\u9898\u7684\u7279\u70b9\uff0c\u540c\u65f6\u5f88\u663e\u800c\u6613\u89c1\uff0c\u8fd9\u4e9b\u5b50\u95ee\u9898\u662f\u4e92\u65a5\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u5f80\u52a8\u6001\u89c4\u5212\u65b9\u9762\u8003\u8651\u3002 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \u53ef\u4ee5\u5148\u5217\u51fadp\u7684\u5173\u7cfb\u548c\u5229\u6da6\u7684\u5173\u7cfb\u65b9\u7a0b\uff0c \\(dp(n, status)=profit\\) \uff0cn\u8868\u793a\u662f\u7b2c\u51e0\u5929\uff0cstatus\u8868\u793a\u5f53\u5929\u7684\u6301\u4ed3\u72b6\u6001\uff0c\u6709\u4e24\u79cd\u6301\u4ed3\u548c\u672a\u6301\u4ed3\u3002\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5219\u4e3a\uff1a \\(dp(n,0)=max(dp(n-1,0), dp(n-1,1)+prices[n])\\) \u548c \\(dp(n,1)=max(dp(n-1,1),-prices[n])\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 \u81ea\u9876\u5411\u4e0b\uff0c\u66b4\u529b\u9012\u5f52 from typing import List # \u81ea\u9876\u5411\u4e0b class Solution : def maxProfit ( self , prices : List [ int ]) -> int : def dp ( n , status ): # base case if n == 0 : if status == 0 : return 0 else : return - prices [ 0 ] if status == 0 : # \u4eca\u65e5\u672a\u6301\u6709\u80a1\u7968 return max ( dp ( n - 1 , 0 ), dp ( n - 1 , 1 ) + prices [ n ]) # \u4eca\u65e5\u6301\u6709\u80a1\u7968 return max ( dp ( n - 1 , 1 ), - prices [ n ]) return dp ( len ( prices ) - 1 , 0 ) \u6267\u884c\u7ed3\u679c\uff1a \u81ea\u9876\u5411\u4e0b\uff0c\u5907\u5fd8\u5f55\u4f18\u5316 from typing import List # \u81ea\u9876\u5411\u4e0b class Solution : def maxProfit ( self , prices : List [ int ]) -> int : memo = [[ None ] * 2 for _ in range ( len ( prices ))] memo [ 0 ] = 0 , - prices [ 0 ] def dp ( n , status ): # base case if memo [ n ][ status ] is not None : return memo [ n ][ status ] else : if status == 0 : # \u4eca\u65e5\u672a\u6301\u6709\u80a1\u7968 ret = max ( dp ( n - 1 , 0 ), dp ( n - 1 , 1 ) + prices [ n ]) else : # \u4eca\u65e5\u6301\u6709\u80a1\u7968 ret = max ( dp ( n - 1 , 1 ), - prices [ n ]) memo [ n ][ status ] = ret return ret return dp ( len ( prices ) - 1 , 0 ) \u6267\u884c\u7ed3\u679c\uff1a \u53ef\u4ee5\u770b\u5230\uff0c\u4f18\u5316\u540e\u867d\u7136\u63d0\u4ea4\u7ed3\u679c\u57ab\u5e95\uff0c\u4f46\u662f\u5df2\u7ecf\u4e0d\u8d85\u65f6\u4e86\u3002 \u81ea\u5e95\u5411\u4e0a\uff0c\u6709\u9650\u8fed\u4ee3 \u9664\u4e86\u4ece\u7ed3\u679c\uff08\u4e5f\u5c31\u662f\u9012\u5f52\u6811\u7684\u6839\u8282\u70b9\uff09\u51fa\u53d1\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4ecebase case\u51fa\u53d1\uff0c\u6709\u9650\u6b21\u7684\u8fed\u4ee3\u6c42\u51fa\u6700\u7ec8\u7684\u7ed3\u679c\u3002 \u4ee3\u7801\u5b9e\u73b0\uff1a from typing import List # \u81ea\u5e95\u5411\u4e0a class Solution : def maxProfit ( self , prices : List [ int ]) -> int : n = len ( prices ) dp = [[ 0 , 0 ] for _ in range ( n )] dp [ 0 ] = [ 0 , - prices [ 0 ]] for i in range ( 1 , n ): dp [ i ][ 0 ] = max ( dp [ i - 1 ][ 0 ], dp [ i - 1 ][ 1 ] + prices [ i ]) dp [ i ][ 1 ] = max ( dp [ i - 1 ][ 1 ], - prices [ i ]) return dp [ n - 1 ][ 0 ] \u6267\u884c\u7ed3\u679c\uff1a \u81ea\u5e95\u5411\u4e0a\uff0c\u7a7a\u95f4\u4f18\u5316 \u53ef\u4ee5\u53d1\u73b0\u6bcf\u6b21\u7684\u8fd0\u884c\u7ed3\u679c\u90fd\u53ea\u8ddf\u524d\u4e00\u6b21\u7684\u6709\u5173\uff0cdp\u6570\u7ec4\u53ef\u4ee5\u7b80\u5316\u4e3a\u4e24\u4e2a\u53d8\u91cf from typing import List # \u81ea\u5e95\u5411\u4e0a\uff0c\u7a7a\u95f4\u4f18\u5316 class Solution : def maxProfit ( self , prices : List [ int ]) -> int : n = len ( prices ) dp_i_0 = 0 dp_i_1 = - prices [ 0 ] for i in range ( 1 , n ): dp_i_0 , dp_i_1 = max ( dp_i_0 , dp_i_1 + prices [ i ]), max ( dp_i_1 , - prices [ i ]) return dp_i_0 \u6267\u884c\u7ed3\u679c\uff1a","title":"\u4e70\u5356\u80a1\u7968\u2160"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#ii","text":"\u9898\u76ee\u63cf\u8ff0 \u7b80\u5355\u6765\u8bf4\u5c31\u662f\u5728\u4e0a\u9898\u7684\u57fa\u7840\u4e0a\uff0c\u4e0d\u9650\u5236\u4e70\u5356\u80a1\u7968\u7684\u6b21\u6570\uff0c\u80a1\u7968\u4ea4\u6613\u6b21\u6570\u4e3a\u65e0\u9650\u6b21\u3002 \u89e3\u9898\u601d\u8def \u89e3\u9898\u601d\u8def\u57fa\u672c\u8ddf\u4e0a\u9898\u4e00\u81f4\uff0c\u4e0d\u540c\u7684\u662f\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e2d\u7684 \\(dp(n,1)\\) \u6539\u4e3a \\(dp(n,1)=max(dp(n-1,1),dp(n-1,0)-prices[n])\\) \u4ee3\u7801\u5b9e\u73b0 from typing import List class Solution : def maxProfit ( self , prices : List [ int ]) -> int : n = len ( prices ) dp_i_0 = 0 dp_i_1 = - prices [ 0 ] for i in range ( 1 , n ): dp_i_0 , dp_i_1 = max ( dp_i_0 , dp_i_1 + prices [ i ]), max ( dp_i_1 , dp_i_0 - prices [ i ]) return dp_i_0 \u63d0\u4ea4\u7ed3\u679c","title":"\u80a1\u7968\u4e70\u5356\u2161"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#iii","text":"\u9898\u76ee\u63cf\u8ff0 \u89e3\u9898\u601d\u8def \u672c\u9898\u5c06\u4e70\u5356\u6b21\u6570\u9650\u5b9a\u4e3a\u4e24\u6b21\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u5c06\u5f53\u5929\u672a\u6301\u4ed3\u548c\u5f53\u5929\u6301\u4ed3\u8fd9\u4e24\u79cd\u72b6\u6001\u518d\u8ddf\u4e70\u5356\u7684\u6b21\u6570\u7ed3\u5408\u8d77\u6765\uff0c\u6240\u4ee5\u4e00\u5171\u6709\u4e86\u56db\u79cd\u72b6\u6001\uff1a \u4e70\u8fc7\u4e00\u6b21\uff0c\u5f53\u524d\u4e3a\u6301\u4ed3\u72b6\u6001 \u5356\u8fc7\u4e00\u6b21\uff0c\u5f53\u524d\u4e3a\u672a\u6301\u4ed3\u72b6\u6001 \u4e70\u8fc7\u4e24\u6b21\uff0c\u5f53\u524d\u4e3a\u6301\u4ed3\u72b6\u6001 \u5356\u8fc7\u4e24\u6b21\uff0c\u5f53\u524d\u4e3a\u672a\u6301\u4ed3\u72b6\u6001 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5c31\u53d8\u4e3a\uff1a \\(buy1=max(buy1,-prices[i])\\) \\(sell1=max(sell1,buy1+prices[i]\\) \\(buy2=max(buy2,sell1-prices[i])\\) \\(sell2=max(sell2,buy2+prices[i])\\) \u4ee3\u7801\u5b9e\u73b0 from typing import List class Solution : def maxProfit ( self , prices : List [ int ]) -> int : n = len ( prices ) # \u521d\u59cb\u72b6\u6001\u8bbe\u7f6e buy1 = buy2 = - prices [ 0 ] sell1 = sell2 = 0 for i in range ( 1 , n ): buy1 = max ( buy1 , - prices [ i ]) sell1 = max ( sell1 , buy1 + prices [ i ]) buy2 = max ( buy2 , sell1 - prices [ i ]) sell2 = max ( sell2 , buy2 + prices [ i ]) return sell2 \u63d0\u4ea4\u7ed3\u679c \uff1a","title":"\u80a1\u7968\u4e70\u5356\u2162"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#iv","text":"\u9898\u76ee\u63cf\u8ff0 \u89e3\u9898\u601d\u8def \u6b64\u9898\u5c06\u6700\u5927\u4ea4\u6613\u6b21\u6570\u4f5c\u4e3a\u53d8\u91cfk\u8f93\u5165\uff0c\u90a3\u4e48\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5c31\u9700\u8981\u5c06k\u4e5f\u8003\u8651\u8fdb\u53bb\uff1a \\(buy[i][k]=max(buy[i-1][k], sell[i-1][k-1]-prices[i])\\) \\(sell[i][k]=max(sell[i-1][k], buy[i-1][k]+prices[i])\\) \u540c\u65f6\u9700\u8981\u6ce8\u610f\u8003\u8651\u8fb9\u754c\u6761\u4ef6\u3002 \u4ee3\u7801\u5b9e\u73b0 from typing import List class Solution : def maxProfit ( self , k : int , prices : List [ int ]) -> int : n = len ( prices ) k = min ( k , n // 2 ) if not prices or k == 0 : return 0 dp = [[[ 0 ] * k , [ 0 ] * k ] for _ in range ( n )] # \u521d\u59cb\u5316\uff0c\u7b2c\u4e00\u5929\u4e70\u7684\u90fd\u4e3a-prices[0] dp [ 0 ][ 0 ] = [ - prices [ 0 ]] * k for i in range ( 1 , n ): for j in range ( 0 , k ): # \u5982\u679c\u662f\u7b2c\u4e00\u6b21\u4e70\u76f4\u63a5\u5c31\u662f-prices[i] # buy_j=max(buy_j, sell_j-1 - price) dp [ i ][ 0 ][ j ] = max ( dp [ i - 1 ][ 0 ][ j ], - prices [ i ] if j == 0 else dp [ i - 1 ][ 1 ][ j - 1 ] - prices [ i ]) # sell_j=max(sell_j,buy_j + price) dp [ i ][ 1 ][ j ] = max ( dp [ i - 1 ][ 1 ][ j ], dp [ i - 1 ][ 0 ][ j ] + prices [ i ]) return dp [ n - 1 ][ 1 ][ k - 1 ] \u63d0\u4ea4\u7ed3\u679c\uff1a","title":"\u80a1\u7968\u4e70\u5356\u2163"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_9","text":"\u9898\u76ee\u63cf\u8ff0 \u89e3\u9898\u601d\u8def \u6709\u4e86\u51b7\u51bb\u671f\uff0c\u90a3\u4e48\u4e70\u5165\u65f6\u5019\u7684\u6700\u5927\u5229\u6da6\u5c31\u662f\u8ddf\u524d\u4e24\u5929\u7684\u5356\u51fa\u5229\u6da6\u6709\u5173\uff0c\u8fd9\u91cc\u6ca1\u6709\u5bf9\u4e70\u5356\u6b21\u6570\u505a\u9650\u5236\uff0c\u90a3\u4e48\u53ef\u4ee5\u5728 \u80a1\u7968\u4e70\u5356\u2161 \u7684\u57fa\u7840\u4e0a\u4fee\u6539\uff0c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5c31\u53ef\u4ee5\u66f4\u6539\u4e3a\uff1a \\(dp[n][0]=max(dp[n-1][0], dp[n-2][1]+prices[i])\\) \u4ee3\u7801\u5b9e\u73b0 from typing import List class Solution : def maxProfit ( self , prices : List [ int ]) -> int : n = len ( prices ) if n <= 1 : return 0 dp = [[ 0 , 0 ] for _ in range ( n )] dp [ 0 ] = [ 0 , - prices [ 0 ]] dp [ 1 ][ 1 ] = max ( dp [ 0 ][ 1 ], dp [ 0 ][ 0 ] - prices [ 1 ]) for i in range ( 1 , n ): # \u672a\u6301\u6709 dp [ i ][ 0 ] = max ( dp [ i - 1 ][ 0 ], dp [ i - 1 ][ 1 ] + prices [ i ]) if i > 1 : # \u6301\u6709 dp [ i ][ 1 ] = max ( dp [ i - 1 ][ 1 ], dp [ i - 2 ][ 0 ] - prices [ i ]) return dp [ n - 1 ][ 0 ] \u63d0\u4ea4\u7ed3\u679c\uff1a","title":"\u80a1\u7968\u4e70\u5356\uff08\u51b7\u51bb\u671f\uff09"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_10","text":"\u9898\u76ee\u63cf\u8ff0 \u89e3\u9898\u601d\u8def \u8ddf\u80a1\u7968\u4e70\u5356\u2161\u57fa\u672c\u4e00\u81f4\uff0c\u53ea\u662f\u5c06fee\u4e5f\u7b97\u5230\u6210\u672c\u4e2d\u53bb\u3002 \u4ee3\u7801\u5b9e\u73b0 class Solution : def maxProfit ( self , prices : List [ int ], fee : int ) -> int : n = len ( prices ) dp_i_0 = 0 dp_i_1 = - prices [ 0 ] for i in range ( 1 , n ): dp_i_0 , dp_i_1 = max ( dp_i_0 , dp_i_1 + prices [ i ] - fee ), max ( dp_i_1 , dp_i_0 - prices [ i ]) return dp_i_0 \u63d0\u4ea4\u7ed3\u679c \uff1a","title":"\u80a1\u7968\u4e70\u5356\uff08\u624b\u7eed\u8d39\uff09"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_11","text":"","title":"\u6253\u5bb6\u52ab\u820d"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#i_1","text":"\u9898\u76ee\u63cf\u8ff0 \u89e3\u9898\u601d\u8def \u57fa\u672c\u4e0a\u6d89\u53ca\u5230\u6700\u4f18\u5b50\u95ee\u9898\u7684\u9898\u76ee\uff0c\u90fd\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u52a8\u6001\u4f18\u5316\u3002\u6839\u636e\u9898\u610f\u53ef\u4ee5\u5148\u5217\u51fa\u7ed3\u679c\u65b9\u7a0b\uff1a \\(dp(n)=amount\\) \uff0c\u65b9\u7a0b\u542b\u4e49\u4e3a\u5077\u5230\u7b2cn\u95f4\u5c4b\u5b50\u5077\u7a83\u5230\u7684\u6700\u5927\u91d1\u989d\u4e3aamount\u3002\u63a5\u7740\u53ef\u4ee5\u5217\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \\(dp(n)=max(dp(n-2)+nums[n],dp[n-1])\\) \u4ee3\u7801\u5b9e\u73b0 from typing import List class Solution : def rob ( self , nums : List [ int ]) -> int : n = len ( nums ) n = len ( nums ) if n == 0 : return 0 if n == 1 : return nums [ 0 ] dp_pre_1 = max ( nums [ 0 ], nums [ 1 ]) # \u524d\u4e00\u95f4 dp_pre_2 = nums [ 0 ] # \u524d\u4e24\u95f4 for i in range ( 2 , n ): dp_i = max ( dp_pre_1 , dp_pre_2 + nums [ i ]) dp_pre_2 = dp_pre_1 dp_pre_1 = dp_i return dp_pre_1 \u63d0\u4ea4\u7ed3\u679c \uff1a","title":"\u6253\u5bb6\u52ab\u820d\u2160"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#ii_1","text":"\u9898\u76ee\u63cf\u8ff0 \u89e3\u9898\u601d\u8def \u8ddf\u4e0a\u9898\u76f8\u6bd4\uff0c\u5217\u8868\u9996\u5c3e\u7684\u623f\u5b50\u4e5f\u662f\u76f8\u90bb\u7684\u3002\u5b9e\u9645\u4e0a\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u95ee\u9898\u7b80\u5316\u4e3anums[:-1]\u548cnums[1:]\u4e24\u4e2a\u5b50\u95ee\u9898\u7684\u7ed3\u679c\u3002 \u4ee3\u7801\u5b9e\u73b0 class Solution : def rob ( self , nums : List [ int ]) -> int : if len ( nums ) == 1 : return nums [ 0 ] return max ( self . _rob ( nums [ 1 :]), self . _rob ( nums [: - 1 ])) def _rob ( self , nums : List [ int ]) -> int : n = len ( nums ) if n == 0 : return 0 if n == 1 : return nums [ 0 ] dp_pre_1 = max ( nums [ 0 ], nums [ 1 ]) # \u524d\u4e00\u95f4 dp_pre_2 = nums [ 0 ] # \u524d\u4e24\u95f4 for i in range ( 2 , n ): dp_i = max ( dp_pre_1 , dp_pre_2 + nums [ i ]) dp_pre_2 = dp_pre_1 dp_pre_1 = dp_i return dp_pre_1 \u63d0\u4ea4\u7ed3\u679c \uff1a","title":"\u6253\u5bb6\u52ab\u820d\u2161"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#iii_1","text":"\u9898\u76ee\u63cf\u8ff0 \u89e3\u9898\u601d\u8def \u623f\u5c4b\u76f8\u8fde\u7684\u65b9\u5f0f\u5df2\u7ecf\u53d8\u4e3a\u6811\u5f62\u7ed3\u6784\u4e86\uff0c\u770b\u5230\u8fd9\u79cd\u7ed3\u6784\u60f3\u5230\u6811\u7684\u904d\u5386\uff0c\u6240\u4ee5\u4f7f\u7528\u81ea\u9876\u5411\u4e0b\u9012\u5f52\u7684\u65b9\u5f0f\u662f\u6bd4\u8f83\u5bb9\u6613\u5b9e\u73b0\u7684\u3002\u53d8\u91cf\u7ed3\u679c\u7b49\u5f0f\u53ef\u4ee5\u5148\u5217\u51fa\uff1a \\(dp(node)=not\\_rob,is\\_rob\\) \uff0c\u542b\u4e49\u662f\u5f53\u524d\u8282\u70b9\u4e3anode\u65f6\uff0c\u8fd4\u56de\u5077\u5f53\u524dnode\u548c\u4e0d\u5077\u5f53\u524dnode\u65f6\u7684\u6700\u9ad8\u91d1\u989d\u3002 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a\uff1a $$ dp(node)=max(dp(node.left)) + max(dp(node.right)), \\ node.val + dp(node.left)[0] + dp(node.right)[0] $$ \u53f3\u8fb9\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u5c31\u5206\u522b\u4ee3\u8868\u4e86 \\(not\\_rob\\) \u548c \\(is\\_rob\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 class Solution : def rob ( self , root : TreeNode ) -> int : return max ( self . _rob ( root )) def _rob ( self , node ): if not node : return 0 , 0 left = self . _rob ( node . left ) right = self . _rob ( node . right ) # \u5230\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u90fd\u6709\u5077\u6216\u8005\u4e0d\u5077\u4e24\u79cd\u72b6\u6001 # \u5982\u679c\u5077\u5f53\u524d\u8282\u70b9 is_rob = node . val + left [ 0 ] + right [ 0 ] # \u5982\u679c\u4e0d\u5077\u5f53\u524d\u8282\u70b9 not_rob = max ( left ) + max ( right ) return not_rob , is_rob \u63d0\u4ea4\u7ed3\u679c \uff1a","title":"\u6253\u5bb6\u52ab\u820d\u2162"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_12","text":"","title":"\u4e00\u822c\u7ec3\u4e60\u9898"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_13","text":"\u9898\u76ee\u63cf\u8ff0: \u89e3\u9898\u601d\u8def\uff1a pass \u4ee3\u7801\u5b9e\u73b0\uff1a class Solution : def minimumTotal ( self , triangle : List [ List [ int ]]) -> int : # dp[i][j]\u8868\u793a\u5230\u5750\u6807[i,j]\u7684\u70b9\u7684\u6700\u5c0f\u8def\u5f84 n = len ( triangle ) dp = [ None ] * n dp [ 0 ] = triangle [ 0 ][ 0 ] for i in range ( 1 , n ): j = i while j >= 0 : if j == i : # \u6700\u540e\u4e00\u5217 dp [ j ] = triangle [ i ][ j ] + dp [ j - 1 ] elif j == 0 : dp [ j ] = triangle [ i ][ j ] + dp [ j ] else : dp [ j ] = triangle [ i ][ j ] + min ( dp [ j - 1 ], dp [ j ]) j -= 1 return min ( dp ) \u63d0\u4ea4\u7ed3\u679c\uff1a","title":"\u4e09\u89d2\u5f62\u6700\u5c0f\u8def\u5f84\u548c"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_14","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u89e3\u9898\u601d\u8def\uff1a \u53ef\u4ee5\u4f9d\u6b21\u5199\u51fa\u524d\u51e0\u4e2a\u7684\u7ed3\u679c,\u770b\u662f\u5426\u80fd\u5f97\u51fa\u8f6c\u79fb\u65b9\u7a0b: \\(dp[0]=1\\) \\(dp[1]=dp[0]+9\\) \\(dp[2]=dp[1]+9*9\\) \\(dp[3]=dp[2]+9*9*8\\) \u6839\u636e\u4e0a\u9762\u7684\u5f0f\u5b50,\u53ef\u4ee5\u5f52\u7eb3\u51fa\u52a8\u6001\u8f6c\u79fb\u65b9\u7a0b: $$ \\tag{n>=2} dp[n]=dp[n-1]+9*\\prod_{i=0}^{n-2} {9-i} $$ \u5f53\u7136\u8981\u6ce8\u610fn\u7684\u53d6\u503c\u8303\u56f4. \u4ee3\u7801\u5b9e\u73b0: class Solution : def countNumbersWithUniqueDigits ( self , n : int ) -> int : dp_i = 1 for i in range ( 1 , n + 1 ): temp = 9 for j in range ( i - 1 ): temp *= ( 9 - j ) dp_i += temp return dp_i print ( Solution () . countNumbersWithUniqueDigits ( 3 )) \u63d0\u4ea4\u7ed3\u679c\uff1a","title":"\u8ba1\u7b97\u5404\u4e2a\u4f4d\u6570\u4e0d\u540c\u7684\u6570\u5b57\u4e2a\u6570"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_15","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u89e3\u9898\u601d\u8def\uff1a \u8bbe \\(dp[i]\\) \u4e3a\u5c06\u6b63\u6574\u6570 \\(i\\) \u62c6\u5206\u4e3a\u81f3\u5c11\u4e24\u4e2a\u6b63\u6574\u6570\u7684\u548c\u65f6\u7684\u6700\u5927\u4e58\u79ef\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \\(dp[i]=max(dp[i-j] \\times j, (i-j) \\times j)\\) \uff0c \\((0<j<i)\\) \u65b9\u7a0b\u7684\u542b\u4e49\u5c31\u662f\uff0c\u8981\u6c42\u89e3 \\(i\\) \u7684\u6700\u5927\u4e58\u79ef\uff0c\u53ef\u4ee5\u5c06 \\(i\\) \u62c6\u5206\u6210\u4e24\u90e8\u5206 \\(j\\) \u548c \\(i-j\\) ,\u90a3\u4e48\u6b64\u65f6 \\(dp[i]\\) \u5c31\u662f \\(dp[i-j]\\times j\\) \u548c \\((i-j)*j\\) \u4e2d\u7684\u8f83\u5927\u503c\uff0c\u5176\u4e2d \\(j\\) \u7684\u53d6\u503c\u8303\u56f4\u4e3a \\((0,i)\\) \u6211\u4eec\u77e5\u9053,\u7b49\u5206\u7684\u65f6\u5019\u4e58\u79ef\u4f1a\u662f\u6700\u5927\u7684,\u5047\u8bbe \\(n=a\\times x\\) , \\(a\\) \u662f\u5206\u6210\u7684\u4efd\u6570,\u90a3\u4e48\u6211\u4eec\u8981\u6c42\u7684 \\(y=x^{\\frac n x}\\) \u7684\u6700\u5927\u503c,\u5176\u5b9e\u5c31\u662f\u6c42 \\(y=x^{\\frac 1 x}\\) \u7684\u6700\u5927\u503c,\u6839\u636e\u6570\u5b66\u7684\u6c42\u5bfc\u53ef\u4ee5\u5f97\u51fa\u6b64\u65f6 \\(x\\) \u5e94\u8be5\u4e3a \\(e\\) ( \\(e\\approx 2.7\\) ),\u56e0\u4e3a \\(x\\) \u4e3a\u6b63\u6574\u6570,\u6240\u4ee5 \\(x\\) \u53ef\u4ee5\u4e3a2\u6216\u80053,\u843d\u5b9e\u5230\u4f18\u5316, \\(j\\) \u7684\u53d6\u503c\u8303\u56f4\u53ef\u4ee5\u53ea\u8003\u86512\u548c3\u7684\u60c5\u51b5. \u4ee3\u7801\u5b9e\u73b0: class Solution : def integerBreak ( self , n : int ) -> int : if n < 4 : return n - 1 dp = [ 0 ] * ( n + 1 ) dp [ 2 ] = 1 for i in range ( 2 , n + 1 ): dp [ i ] = max ( dp [ i - 2 ] * 2 , 2 * ( i - 2 ), dp [ i - 3 ] * 3 , 3 * ( i - 3 )) return dp [ - 1 ] \u63d0\u4ea4\u7ed3\u679c\uff1a","title":"\u6574\u6570\u62c6\u5206"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_16","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u89e3\u9898\u601d\u8def: \u8bbe \\(dp[i][j]\\) \u4e3a \\(i\\) \u4e2a0\u548c \\(j\\) \u4e2a1\u80fd\u62fc\u51fa\u5b58\u5728\u4e8e\u6570\u7ec4 \\(s\\) \u4e2d\u7684\u6700\u5927\u6570\u91cf,\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u52a8\u6001\u8f6c\u79fb\u65b9\u7a0b: $$ dp[i][j]=max(1+dp[i-cost_zeros(k)][j-cost_ones(k)]) $$ \u5176\u4e2d \\(i>=cost\\_zeros(k),j>cost\\_ones(k)\\) \u8fd9\u4e2a\u65b9\u7a0b\u8981\u8868\u8fbe\u7684\u610f\u601d\u5c31\u662f,\u5047\u5b9a\u5f53\u524d\u5b57\u7b26\u4e32\u4e3ak,\u5982\u679c\u80fd\u4ecek\u5230 \\(dp[i][j]\\) ,\u90a3\u4e48 \\(dp[i][j]\\) \u5c31\u7b49\u4e8ek\u5904\u6700\u5927\u6570\u91cf\u52a01, \u4ee3\u7801\u5b9e\u73b0: class Solution : def findMaxForm ( self , strs : List [ str ], m : int , n : int ) -> int : dp = [[ 0 ] * ( n + 1 ) for _ in range ( m + 1 )] for s in strs : zeros = s . count ( \"0\" ) ones = s . count ( \"1\" ) for i in range ( m , zeros - 1 , - 1 ): for j in range ( n , ones - 1 , - 1 ): dp [ i ][ j ] = max ( dp [ i ][ j ], dp [ i - zeros ][ j - ones ] + 1 ) return dp [ m ][ n ]","title":"\u4e00\u548c\u96f6"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#k","text":"\u89e3\u9898\u601d\u8def: \u8bbe \\(dp[k][d]\\) \u4e3a\u7ecf\u8fc7 \\(k\\) \u6b21\u8f6c\u673a\u5230\u8fbe\u76ee\u7684\u5730 \\(d\\) \u7684\u6700\u6700\u5c11\u8d39\u7528,\u90a3\u4e48\u52a8\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a: $$ dp[k][d]=min(dp[k][d], dp[k-1][s]+p) $$ \u5176\u4e2d \\(s\\) \u4e3a\u51fa\u53d1\u5730, \\(p\\) \u4e3a \\(s\\) \u5230 \\(d\\) \u7684\u8ddd\u79bb,\u4e5f\u5c31\u662f\u8bf4\u5f53\u524d \\(dp[k][d]\\) \u7b49\u4e8e\u524d\u4e00\u6b21 \\(dp[k-1][s]+p\\) \u4e2d\u7684\u6700\u5c0f\u7684\u4e00\u4e2a \u4ee3\u7801\u5b9e\u73b0: \u4f18\u5316\u4ee3\u7801\uff1a class Solution ( object ): def findCheapestPrice ( self , n , flights , src , dst , K ): # \u4f7f\u7528\u4e00\u4e2a2*n\u7684\u77e9\u9635\u662f\u4e3a\u4e86\u4f18\u5316\u7a7a\u95f4,\u4e0d\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528k*n dp = [[ float ( 'inf' )] * n for i in range ( 2 )] # \u521d\u59cb\u5316\u5f53\u524dsrc\u548c\u524d\u63d0\u4e2asrc\u7684\u503c,\u90fd\u4e3a0 dp [ 0 ][ src ] = dp [ 1 ][ src ] = 0 for k in range ( K + 1 ): for s , d , p in flights : # \u56e0\u4e3a\u53ea\u6709src\u662f\u6709\u503c\u7684,\u6240\u4ee5\u6700\u5f00\u59cb\u53ea\u6709\u5f53s=src\u7684\u65f6\u5019,d\u7684\u503c\u624d\u4f1a\u66f4\u65b0 dp [ k & 1 ][ d ] = min ( dp [ k & 1 ][ d ], dp [ ~ k & 1 ][ s ] + p ) return dp [ K & 1 ][ dst ] if dp [ K & 1 ][ dst ] < float ( 'inf' ) else - 1","title":"K \u7ad9\u4e2d\u8f6c\u5185\u6700\u4fbf\u5b9c\u7684\u822a\u73ed"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_17","text":"\u65b9\u6cd51:\u52a8\u6001\u89c4\u5212 \u4ee3\u7801\u5b9e\u73b0: from typing import List class Solution : def matrixBlockSum ( self , mat : List [ List [ int ]], K : int ) -> List [ List [ int ]]: m = len ( mat ) # \u884c n = len ( mat [ 0 ]) # \u5217 answer = [[ 0 ] * n for _ in range ( m )] for j in range ( n ): jrange = ( max ( 0 , j - K ), min ( m , j + K + 1 )) for i in range ( m ): if i == 0 : for x in mat [ 0 : min ( K + 1 , m )]: answer [ 0 ][ j ] += sum ( x [ jrange [ 0 ]: jrange [ 1 ]]) else : irange = ( max ( 0 , i - K ), min ( m , i + K + 1 )) add_item = 0 if i + K + 1 > m else sum ( mat [ i + K ][ jrange [ 0 ]: jrange [ 1 ]]) minus_item = 0 if i - K <= 0 else sum ( mat [ irange [ 0 ] - 1 ][ jrange [ 0 ]: jrange [ 1 ]]) answer [ i ][ j ] = answer [ i - 1 ][ j ] + add_item - minus_item return answer print ( Solution () . matrixBlockSum ([[ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ]], 1 )) \u65b9\u6cd52:\u4e8c\u7ef4\u524d\u7f00\u548c \u4ee3\u7801\u5b9e\u73b0: from typing import List \"\"\" \u4f7f\u7528\u524d\u7f00\u548c \"\"\" class Solution : def matrixBlockSum ( self , mat : List [ List [ int ]], K : int ) -> List [ List [ int ]]: m = len ( mat ) # \u884c n = len ( mat [ 0 ]) # \u5217 answer = [[ 0 ] * ( n + 1 ) for _ in range ( m + 1 )] # \u6c42\u51fa\u524d\u7f00\u548c for i in range ( 1 , m + 1 ): for j in range ( 1 , n + 1 ): answer [ i ][ j ] = answer [ i ][ j - 1 ] + answer [ i - 1 ][ j ] - answer [ i - 1 ][ j - 1 ] + mat [ i - 1 ][ j - 1 ] def get ( x , y ): # \u5904\u7406\u8fb9\u754c\u95ee\u9898 x = max ( min ( x , m ), 0 ) y = max ( min ( y , n ), 0 ) return answer [ x ][ y ] ans = [[ 0 ] * n for _ in range ( m )] for i in range ( m ): for j in range ( n ): ans [ i ][ j ] = get ( i + K + 1 , j + K + 1 ) - \\ get ( i - K , j + K + 1 ) - \\ get ( i + K + 1 , j - K ) + \\ get ( i - K , j - K ) return ans print ( Solution () . matrixBlockSum ([[ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ]], 1 ))","title":"\u77e9\u9635\u533a\u57df\u548c"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_18","text":"\u4ee3\u7801\u5b9e\u73b0\uff1a from functools import lru_cache class Solution : def leastOpsExpressTarget ( self , x : int , target : int ) -> int : cost = list ( range ( 40 )) cost [ 0 ] = 2 @lru_cache ( None ) def dp ( i , target ): # i\u8868\u793a\u662fx\u7684\u51e0\u6b21\u5e42\uff0ctarget\u662f\u5f53\u524d\u8981\u5f97\u5230\u7684\u76ee\u6807\u6570 if target == 0 : return 0 if target == 1 : return cost [ i ] if i >= 39 : return float ( 'inf' ) t , r = divmod ( target , x ) return min ( r * cost [ i ] + dp ( i + 1 , t ), ( x - r ) * cost [ i ] + dp ( i + 1 , t + 1 )) return dp ( 0 , target ) - 1","title":"\u8868\u793a\u6570\u5b57\u7684\u6700\u5c11\u8fd0\u7b97\u7b26"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_19","text":"\u4ee3\u7801\u5b9e\u73b0\uff1a # \u4f7f\u7528hashmap import collections class Solution : def findSubstringInWraproundString ( self , p : str ) -> int : p = \"^\" + p # len_mapper\u4e3a\u4ee5\u5f53\u524d\u5b57\u7b26\u7ed3\u5c3e\u7684\u6700\u957f\u5b50\u4e32\u7684\u957f\u5ea6 len_mapper = collections . defaultdict ( lambda : 0 ) w = 1 for i in range ( 1 , len ( p )): if ord ( p [ i ]) - ord ( p [ i - 1 ]) in ( 1 , - 25 ): w += 1 else : w = 1 len_mapper [ p [ i ]] = max ( len_mapper [ p [ i ]], w ) # print(dict(len_mapper)) return sum ( len_mapper . values ())","title":"\u73af\u7ed5\u5b57\u7b26\u4e32\u4e2d\u552f\u4e00\u7684\u5b50\u5b57\u7b26\u4e32"},{"location":"algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_20","text":"\u601d\u8def\uff1a \u5c06\u6240\u6709\u64cd\u4f5c\u5206\u6210\u4ee5 copy \u4e3a\u9996\u7684\u591a\u7ec4\uff0c\u5f62\u5982 (copy, paste, ..., paste)\uff0c\u518d\u4f7f\u7528 C \u4ee3\u8868 copy\uff0cP \u4ee3\u8868 paste\u3002\u4f8b\u5982\u64cd\u4f5c CPPCPPPPCP \u53ef\u4ee5\u5206\u4e3a [CPP][CPPPP][CP] \u4e09\u7ec4\u3002 \u5047\u8bbe\u6bcf\u7ec4\u7684\u957f\u5ea6\u4e3a g_1, g_2, ...\u3002\u5b8c\u6210\u7b2c\u4e00\u7ec4\u64cd\u4f5c\u540e\uff0c\u5b57\u7b26\u4e32\u6709 g_1 \u4e2a A\uff0c\u5b8c\u6210\u7b2c\u4e8c\u7ec4\u64cd\u4f5c\u540e\u5b57\u7b26\u4e32\u6709 g_1 * g_2 \u4e2a A\u3002\u5f53\u5b8c\u6210\u6240\u6709\u64cd\u4f5c\u65f6\uff0c\u5171\u6709 g_1 * g_2 * ... * g_n \u4e2a 'A'\u3002 \u6211\u4eec\u6700\u7ec8\u60f3\u8981 N = g_1 * g_2 * ... * g_n \u4e2a A\u3002\u5982\u679c g_i \u662f\u5408\u6570\uff0c\u5b58\u5728 g_i = p * q\uff0c\u90a3\u4e48\u8fd9\u7ec4\u64cd\u4f5c\u53ef\u4ee5\u5206\u89e3\u4e3a\u4e24\u7ec4\uff0c\u7b2c\u4e00\u7ec4\u5305\u542b 1 \u4e2a C \u548c p-1 \u4e2a P\uff0c\u7b2c\u4e8c\u7ec4\u5305\u542b 1 \u4e2a C \u548c q-1 \u4e2a P\u3002 \u73b0\u5728\u8bc1\u660e\u8fd9\u79cd\u5206\u5272\u65b9\u5f0f\u4f7f\u7528\u7684\u64cd\u4f5c\u6700\u5c11\u3002\u539f\u672c\u9700\u8981 \\(pq\\) \u6b65\u64cd\u4f5c\uff0c\u5206\u89e3\u540e\u9700\u8981 \\(p+q\\) \u6b65\u3002\u56e0\u4e3a \\(p+q <= pq\\) \uff0c\u7b49\u4ef7\u4e8e \\(1 <= (p-1)(q-1)\\) \uff0c\u5f53 \\(p >= 2\\) \u4e14 \\(q >= 2\\) \u65f6\u4e0a\u5f0f\u6c38\u8fdc\u6210\u7acb\u3002 \u4ee3\u7801\uff1a class Solution : def minSteps ( self , n : int ) -> int : i = 2 res = 0 # \u8fdb\u884c\u8d28\u56e0\u6570\u5206\u89e3 while n > 1 : while n % i == 0 : n //= i res += i i += 1 return res","title":"\u53ea\u6709\u4e24\u4e2a\u952e\u7684\u952e\u76d8"},{"location":"algorithm/%E5%9B%9E%E6%BA%AF%E6%B3%95/","text":"\u56de\u6eaf\u7b97\u6cd5 \u00b6 \u89e3\u51b3\u4e00\u4e2a\u56de\u6eaf\u95ee\u9898\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u4e2a\u51b3\u7b56\u6811\u7684\u904d\u5386\u8fc7\u7a0b\u3002\u9700\u8981\u6ce8\u610f\u4e09\u70b9\uff1a1.\u8def\u5f84\uff1b2.\u9009\u62e9\u5217\u8868\uff1b3.\u7ed3\u675f\u6761\u4ef6\u3002 46. \u5168\u6392\u5217 \u00b6 51. N \u7687\u540e \u00b6 78. \u5b50\u96c6 \u00b6 77. \u7ec4\u5408 \u00b6 \u5355\u8bcd\u641c\u7d22 \u00b6 \u601d\u8def\uff1a \u5229\u7528\u56de\u6eaf\u6cd5\uff0c\u5916\u90e8\u5faa\u73af\u6bcf\u6b21\u9009\u53d6\u4e00\u4e2a board \u4e2d\u7684\u4e0b\u6807\u4e3a\u8d77\u70b9\uff0c\u9012\u5f52\u8fdb\u884c\u56de\u6eaf\uff0c\u5c06\u8bbf\u95ee\u8fc7\u7684\u4e0b\u6807\u8bb0\u5230 visited \u4e2d\uff0c\u9012\u5f52\u7ed3\u675f\u6761\u4ef6\u662f cur \u6307\u5411 word \u6700\u540e\u4e00\u4e2a\u3002 \u89e3\u9898\uff1a from typing import List class Solution : directions = [( 0 , 1 ), ( 1 , 0 ), ( 0 , - 1 ), ( - 1 , 0 )] def exist ( self , board : List [ List [ str ]], word : str ) -> bool : m = len ( board ) n = len ( board [ 0 ]) visited = [[ False ] * n for _ in range ( m )] def dfs ( x , y , cur ): # \u8df3\u51fa\u6761\u4ef6\u662fcur\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u5e76\u4e14\u4e0e\u5f53\u524d(x,y)\u76f8\u7b49 if cur == len ( word ) - 1 : return word [ cur ] == board [ x ][ y ] if word [ cur ] == board [ x ][ y ]: visited [ x ][ y ] = True for d in self . directions : next_x , next_y = x + d [ 0 ], y + d [ 1 ] if 0 <= next_x < m and 0 <= next_y < n and \\ not visited [ next_x ][ next_y ] and \\ dfs ( next_x , next_y , cur + 1 ): return True visited [ x ][ y ] = False for i in range ( m ): for j in range ( n ): if dfs ( i , j , 0 ): return True return False \u7ec4\u5408 \u00b6 \u4ee3\u7801\uff1a from typing import List class Solution : def combine ( self , n : int , k : int ) -> List [ List [ int ]]: ret = [] def dfs ( path , start ): # \u526a\u679d if k - len ( path ) > n - start + 1 : return # \u9000\u51fa\u6761\u4ef6 if len ( path ) == k : ret . append ( path ) return for i in range ( start , n + 1 ): dfs ( path + [ i ], i + 1 ) dfs ([], 1 ) return ret \u4e8c\u8fdb\u5236\u624b\u8868 \u00b6 \u4ee3\u7801\uff1a class Solution : data = [ 1 , 2 , 4 , 8 , 16 , 32 , 1 , 2 , 4 , 8 ,] def readBinaryWatch ( self , num : int ) -> List [ str ]: if num == 0 : return [ \"0:00\" ] n = len ( self . data ) visited = [ False ] * len ( self . data ) ret = [] def dfs ( path , start ): # \u7ed3\u675f\u6761\u4ef6 if len ( path ) == num : # \u5904\u7406\u7ed3\u679c m = 0 h = 0 for p in path : if p < 6 : # \u5206\u949f m += self . data [ p ] else : h += self . data [ p ] # \u9664\u53bb\u4e0d\u5408\u7406\u7ed3\u679c if h > 11 or m > 59 : return ret . append ( \" %1d : %02d \" % ( h , m )) return for i in range ( start , n ): dfs ( path + [ i ], i + 1 ) dfs ([], 0 ) return ret \u5206\u5272\u56de\u6587\u4e32 \u00b6 \u4ee3\u7801\uff1a","title":"\u56de\u6eaf\u7b97\u6cd5"},{"location":"algorithm/%E5%9B%9E%E6%BA%AF%E6%B3%95/#_1","text":"\u89e3\u51b3\u4e00\u4e2a\u56de\u6eaf\u95ee\u9898\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u4e2a\u51b3\u7b56\u6811\u7684\u904d\u5386\u8fc7\u7a0b\u3002\u9700\u8981\u6ce8\u610f\u4e09\u70b9\uff1a1.\u8def\u5f84\uff1b2.\u9009\u62e9\u5217\u8868\uff1b3.\u7ed3\u675f\u6761\u4ef6\u3002","title":"\u56de\u6eaf\u7b97\u6cd5"},{"location":"algorithm/%E5%9B%9E%E6%BA%AF%E6%B3%95/#46","text":"","title":"46. \u5168\u6392\u5217"},{"location":"algorithm/%E5%9B%9E%E6%BA%AF%E6%B3%95/#51-n","text":"","title":"51. N \u7687\u540e"},{"location":"algorithm/%E5%9B%9E%E6%BA%AF%E6%B3%95/#78","text":"","title":"78. \u5b50\u96c6"},{"location":"algorithm/%E5%9B%9E%E6%BA%AF%E6%B3%95/#77","text":"","title":"77. \u7ec4\u5408"},{"location":"algorithm/%E5%9B%9E%E6%BA%AF%E6%B3%95/#_2","text":"\u601d\u8def\uff1a \u5229\u7528\u56de\u6eaf\u6cd5\uff0c\u5916\u90e8\u5faa\u73af\u6bcf\u6b21\u9009\u53d6\u4e00\u4e2a board \u4e2d\u7684\u4e0b\u6807\u4e3a\u8d77\u70b9\uff0c\u9012\u5f52\u8fdb\u884c\u56de\u6eaf\uff0c\u5c06\u8bbf\u95ee\u8fc7\u7684\u4e0b\u6807\u8bb0\u5230 visited \u4e2d\uff0c\u9012\u5f52\u7ed3\u675f\u6761\u4ef6\u662f cur \u6307\u5411 word \u6700\u540e\u4e00\u4e2a\u3002 \u89e3\u9898\uff1a from typing import List class Solution : directions = [( 0 , 1 ), ( 1 , 0 ), ( 0 , - 1 ), ( - 1 , 0 )] def exist ( self , board : List [ List [ str ]], word : str ) -> bool : m = len ( board ) n = len ( board [ 0 ]) visited = [[ False ] * n for _ in range ( m )] def dfs ( x , y , cur ): # \u8df3\u51fa\u6761\u4ef6\u662fcur\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u5e76\u4e14\u4e0e\u5f53\u524d(x,y)\u76f8\u7b49 if cur == len ( word ) - 1 : return word [ cur ] == board [ x ][ y ] if word [ cur ] == board [ x ][ y ]: visited [ x ][ y ] = True for d in self . directions : next_x , next_y = x + d [ 0 ], y + d [ 1 ] if 0 <= next_x < m and 0 <= next_y < n and \\ not visited [ next_x ][ next_y ] and \\ dfs ( next_x , next_y , cur + 1 ): return True visited [ x ][ y ] = False for i in range ( m ): for j in range ( n ): if dfs ( i , j , 0 ): return True return False","title":"\u5355\u8bcd\u641c\u7d22"},{"location":"algorithm/%E5%9B%9E%E6%BA%AF%E6%B3%95/#_3","text":"\u4ee3\u7801\uff1a from typing import List class Solution : def combine ( self , n : int , k : int ) -> List [ List [ int ]]: ret = [] def dfs ( path , start ): # \u526a\u679d if k - len ( path ) > n - start + 1 : return # \u9000\u51fa\u6761\u4ef6 if len ( path ) == k : ret . append ( path ) return for i in range ( start , n + 1 ): dfs ( path + [ i ], i + 1 ) dfs ([], 1 ) return ret","title":"\u7ec4\u5408"},{"location":"algorithm/%E5%9B%9E%E6%BA%AF%E6%B3%95/#_4","text":"\u4ee3\u7801\uff1a class Solution : data = [ 1 , 2 , 4 , 8 , 16 , 32 , 1 , 2 , 4 , 8 ,] def readBinaryWatch ( self , num : int ) -> List [ str ]: if num == 0 : return [ \"0:00\" ] n = len ( self . data ) visited = [ False ] * len ( self . data ) ret = [] def dfs ( path , start ): # \u7ed3\u675f\u6761\u4ef6 if len ( path ) == num : # \u5904\u7406\u7ed3\u679c m = 0 h = 0 for p in path : if p < 6 : # \u5206\u949f m += self . data [ p ] else : h += self . data [ p ] # \u9664\u53bb\u4e0d\u5408\u7406\u7ed3\u679c if h > 11 or m > 59 : return ret . append ( \" %1d : %02d \" % ( h , m )) return for i in range ( start , n ): dfs ( path + [ i ], i + 1 ) dfs ([], 0 ) return ret","title":"\u4e8c\u8fdb\u5236\u624b\u8868"},{"location":"algorithm/%E5%9B%9E%E6%BA%AF%E6%B3%95/#_5","text":"\u4ee3\u7801\uff1a","title":"\u5206\u5272\u56de\u6587\u4e32"},{"location":"algorithm/%E7%B1%BB%E5%9E%8B_%E6%95%B0%E7%BB%84/","text":"\u6570\u7ec4\u76f8\u5173\u9898\u578b \u00b6 \u4e8c\u5206\u67e5\u627e \u00b6 875. \u7231\u5403\u9999\u8549\u7684\u73c2\u73c2 1011. \u5728 D \u5929\u5185\u9001\u8fbe\u5305\u88f9\u7684\u80fd\u529b 33. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 34. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e \u4e8c\u5206\u67e5\u627e\u662f\u5728\u4e00\u4e2a\u641c\u7d22\u8303\u56f4\u5185\uff0c\u901a\u8fc7\u4e0d\u65ad\u7684\u7f29\u5c0f\u5de6\u53f3\u8fb9\u754c\u5411\u4e2d\u95f4\u9760\u62e2\uff0c\u6700\u7ec8\u5f97\u5230\u7ed3\u679c\u7684\u7b97\u6cd5\u3002 \u9700\u8981\u6ce8\u610f\u4e24\u70b9\uff1a 1.\u641c\u7d20\u8fb9\u754c\u7684\u786e\u5b9a\u30022.\u8303\u56f4\u7f29\u5c0f\u7684\u8fb9\u754c\u95ee\u9898\u3002 \u5982\u679c\u8981\u641c\u7d22\u4e00\u4e2a\u786e\u5b9a\u7684\u7ed3\u679c\uff0c\u53ef\u4ee5\u4f7f\u7528 [left, right] \u8303\u56f4\uff0c\u8fb9\u754c\u7f29\u5c0f\u5f0f\u5b50\u4e3a left=mid+1 \uff0c right=mid-1 \uff1b \u5982\u679c\u662f\u641c\u7d22\u4e00\u4e2a\u8fb9\u754c\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 [left, right) \uff0c\u8fb9\u754c\u7f29\u5c0f\u5f0f\u5b50\u4e3a left=mid+1 , right=mid \u3002 \u53cc\u6307\u9488 \u00b6 141. \u73af\u5f62\u94fe\u8868 142. \u73af\u5f62\u94fe\u8868 II 167. \u4e24\u6570\u4e4b\u548c II - \u8f93\u5165\u6709\u5e8f\u6570\u7ec4 344. \u53cd\u8f6c\u5b57\u7b26\u4e32 \u53cc\u6307\u9488\u6280\u5de7\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u300c\u5feb\u6162\u6307\u9488\u300d\uff0c\u4e00\u7c7b\u662f\u300c\u5de6\u53f3\u6307\u9488\u300d\u3002\u524d\u8005\u89e3\u51b3\u4e3b\u8981\u89e3\u51b3\u94fe\u8868\u4e2d\u7684\u95ee\u9898\uff0c\u6bd4\u5982\u5178\u578b\u7684\u5224\u5b9a\u94fe\u8868\u4e2d\u662f\u5426\u5305\u542b\u73af\uff1b\u540e\u8005\u4e3b\u8981\u89e3\u51b3\u6570\u7ec4\uff08\u6216\u8005\u5b57\u7b26\u4e32\uff09\u4e2d\u7684\u95ee\u9898\uff0c\u6bd4\u5982\u4e8c\u5206\u67e5\u627e\u3002 \u6ed1\u52a8\u7a97\u53e3 \u00b6 76. \u6700\u5c0f\u8986\u76d6\u5b50\u4e32 567. \u5b57\u7b26\u4e32\u7684\u6392\u5217 438. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd 3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 \u6570\u7ec4\u53bb\u91cd \u00b6 316. \u53bb\u9664\u91cd\u590d\u5b57\u6bcd 1081. \u4e0d\u540c\u5b57\u7b26\u7684\u6700\u5c0f\u5b50\u5e8f\u5217 26. \u5220\u9664\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879 27. \u79fb\u9664\u5143\u7d20 283. \u79fb\u52a8\u96f6 \u4e24\u6570\u4e4b\u548c \u00b6 1. \u4e24\u6570\u4e4b\u548c 15. \u4e09\u6570\u4e4b\u548c 16. \u6700\u63a5\u8fd1\u7684\u4e09\u6570\u4e4b\u548c \u6570\u7ec4\u6709\u5e8f \u00b6 31. \u4e0b\u4e00\u4e2a\u6392\u5217 \u524d\u7f00\u548c \u00b6 560. \u548c\u4e3aK\u7684\u5b50\u6570\u7ec4 \u5dee\u5206\u6570\u7ec4 \u00b6 Python3\u5dee\u5206\u6570\u7ec4 - \u822a\u73ed\u9884\u8ba2\u7edf\u8ba1 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u5feb\u901f\u9009\u62e9\u7b97\u6cd5 \u00b6 \u7b2ck\u5927-\u4e8c\u53c9\u5806 - \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u5feb\u901f\u9009\u62e9\u7b97\u6cd5 - \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u5206\u6cbb\u7b97\u6cd5 \u00b6 \u5206\u6cbb - \u4e3a\u8fd0\u7b97\u8868\u8fbe\u5f0f\u8bbe\u8ba1\u4f18\u5148\u7ea7 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com)","title":"\u6570\u7ec4"},{"location":"algorithm/%E7%B1%BB%E5%9E%8B_%E6%95%B0%E7%BB%84/#_1","text":"","title":"\u6570\u7ec4\u76f8\u5173\u9898\u578b"},{"location":"algorithm/%E7%B1%BB%E5%9E%8B_%E6%95%B0%E7%BB%84/#_2","text":"875. \u7231\u5403\u9999\u8549\u7684\u73c2\u73c2 1011. \u5728 D \u5929\u5185\u9001\u8fbe\u5305\u88f9\u7684\u80fd\u529b 33. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 34. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e \u4e8c\u5206\u67e5\u627e\u662f\u5728\u4e00\u4e2a\u641c\u7d22\u8303\u56f4\u5185\uff0c\u901a\u8fc7\u4e0d\u65ad\u7684\u7f29\u5c0f\u5de6\u53f3\u8fb9\u754c\u5411\u4e2d\u95f4\u9760\u62e2\uff0c\u6700\u7ec8\u5f97\u5230\u7ed3\u679c\u7684\u7b97\u6cd5\u3002 \u9700\u8981\u6ce8\u610f\u4e24\u70b9\uff1a 1.\u641c\u7d20\u8fb9\u754c\u7684\u786e\u5b9a\u30022.\u8303\u56f4\u7f29\u5c0f\u7684\u8fb9\u754c\u95ee\u9898\u3002 \u5982\u679c\u8981\u641c\u7d22\u4e00\u4e2a\u786e\u5b9a\u7684\u7ed3\u679c\uff0c\u53ef\u4ee5\u4f7f\u7528 [left, right] \u8303\u56f4\uff0c\u8fb9\u754c\u7f29\u5c0f\u5f0f\u5b50\u4e3a left=mid+1 \uff0c right=mid-1 \uff1b \u5982\u679c\u662f\u641c\u7d22\u4e00\u4e2a\u8fb9\u754c\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 [left, right) \uff0c\u8fb9\u754c\u7f29\u5c0f\u5f0f\u5b50\u4e3a left=mid+1 , right=mid \u3002","title":"\u4e8c\u5206\u67e5\u627e"},{"location":"algorithm/%E7%B1%BB%E5%9E%8B_%E6%95%B0%E7%BB%84/#_3","text":"141. \u73af\u5f62\u94fe\u8868 142. \u73af\u5f62\u94fe\u8868 II 167. \u4e24\u6570\u4e4b\u548c II - \u8f93\u5165\u6709\u5e8f\u6570\u7ec4 344. \u53cd\u8f6c\u5b57\u7b26\u4e32 \u53cc\u6307\u9488\u6280\u5de7\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u300c\u5feb\u6162\u6307\u9488\u300d\uff0c\u4e00\u7c7b\u662f\u300c\u5de6\u53f3\u6307\u9488\u300d\u3002\u524d\u8005\u89e3\u51b3\u4e3b\u8981\u89e3\u51b3\u94fe\u8868\u4e2d\u7684\u95ee\u9898\uff0c\u6bd4\u5982\u5178\u578b\u7684\u5224\u5b9a\u94fe\u8868\u4e2d\u662f\u5426\u5305\u542b\u73af\uff1b\u540e\u8005\u4e3b\u8981\u89e3\u51b3\u6570\u7ec4\uff08\u6216\u8005\u5b57\u7b26\u4e32\uff09\u4e2d\u7684\u95ee\u9898\uff0c\u6bd4\u5982\u4e8c\u5206\u67e5\u627e\u3002","title":"\u53cc\u6307\u9488"},{"location":"algorithm/%E7%B1%BB%E5%9E%8B_%E6%95%B0%E7%BB%84/#_4","text":"76. \u6700\u5c0f\u8986\u76d6\u5b50\u4e32 567. \u5b57\u7b26\u4e32\u7684\u6392\u5217 438. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd 3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32","title":"\u6ed1\u52a8\u7a97\u53e3"},{"location":"algorithm/%E7%B1%BB%E5%9E%8B_%E6%95%B0%E7%BB%84/#_5","text":"316. \u53bb\u9664\u91cd\u590d\u5b57\u6bcd 1081. \u4e0d\u540c\u5b57\u7b26\u7684\u6700\u5c0f\u5b50\u5e8f\u5217 26. \u5220\u9664\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879 27. \u79fb\u9664\u5143\u7d20 283. \u79fb\u52a8\u96f6","title":"\u6570\u7ec4\u53bb\u91cd"},{"location":"algorithm/%E7%B1%BB%E5%9E%8B_%E6%95%B0%E7%BB%84/#_6","text":"1. \u4e24\u6570\u4e4b\u548c 15. \u4e09\u6570\u4e4b\u548c 16. \u6700\u63a5\u8fd1\u7684\u4e09\u6570\u4e4b\u548c","title":"\u4e24\u6570\u4e4b\u548c"},{"location":"algorithm/%E7%B1%BB%E5%9E%8B_%E6%95%B0%E7%BB%84/#_7","text":"31. \u4e0b\u4e00\u4e2a\u6392\u5217","title":"\u6570\u7ec4\u6709\u5e8f"},{"location":"algorithm/%E7%B1%BB%E5%9E%8B_%E6%95%B0%E7%BB%84/#_8","text":"560. \u548c\u4e3aK\u7684\u5b50\u6570\u7ec4","title":"\u524d\u7f00\u548c"},{"location":"algorithm/%E7%B1%BB%E5%9E%8B_%E6%95%B0%E7%BB%84/#_9","text":"Python3\u5dee\u5206\u6570\u7ec4 - \u822a\u73ed\u9884\u8ba2\u7edf\u8ba1 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com)","title":"\u5dee\u5206\u6570\u7ec4"},{"location":"algorithm/%E7%B1%BB%E5%9E%8B_%E6%95%B0%E7%BB%84/#_10","text":"\u7b2ck\u5927-\u4e8c\u53c9\u5806 - \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u5feb\u901f\u9009\u62e9\u7b97\u6cd5 - \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com)","title":"\u5feb\u901f\u9009\u62e9\u7b97\u6cd5"},{"location":"algorithm/%E7%B1%BB%E5%9E%8B_%E6%95%B0%E7%BB%84/#_11","text":"\u5206\u6cbb - \u4e3a\u8fd0\u7b97\u8868\u8fbe\u5f0f\u8bbe\u8ba1\u4f18\u5148\u7ea7 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com)","title":"\u5206\u6cbb\u7b97\u6cd5"},{"location":"algorithm/%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98/","text":"two sum\u95ee\u9898 \u00b6","title":"\u7cfb\u5217\u95ee\u9898"},{"location":"algorithm/%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98/#two-sum","text":"","title":"two sum\u95ee\u9898"},{"location":"algorithm/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/","text":"\u4ec0\u4e48\u662f\u8d2a\u5fc3\u7b97\u6cd5\u5462\uff1f\u8d2a\u5fc3\u7b97\u6cd5\u53ef\u4ee5\u8ba4\u4e3a\u662f\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u7684\u4e00\u4e2a\u7279\u4f8b\uff0c\u76f8\u6bd4\u52a8\u6001\u89c4\u5212\uff0c\u4f7f\u7528\u8d2a\u5fc3\u7b97\u6cd5\u9700\u8981\u6ee1\u8db3\u66f4\u591a\u7684\u6761\u4ef6\uff08\u8d2a\u5fc3\u9009\u62e9\u6027\u8d28\uff09\uff0c\u4f46\u662f\u6548\u7387\u6bd4\u52a8\u6001\u89c4\u5212\u8981\u9ad8\u3002 \u6bd4\u5982\u8bf4\u4e00\u4e2a\u7b97\u6cd5\u95ee\u9898\u4f7f\u7528\u66b4\u529b\u89e3\u6cd5\u9700\u8981\u6307\u6570\u7ea7\u65f6\u95f4\uff0c\u5982\u679c\u80fd\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u6d88\u9664\u91cd\u53e0\u5b50\u95ee\u9898\uff0c\u5c31\u53ef\u4ee5\u964d\u5230\u591a\u9879\u5f0f\u7ea7\u522b\u7684\u65f6\u95f4\uff0c\u5982\u679c\u6ee1\u8db3\u8d2a\u5fc3\u9009\u62e9\u6027\u8d28\uff0c\u90a3\u4e48\u53ef\u4ee5\u8fdb\u4e00\u6b65\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u8fbe\u5230\u7ebf\u6027\u7ea7\u522b\u7684\u3002 \u4ec0\u4e48\u662f\u8d2a\u5fc3\u9009\u62e9\u6027\u8d28\u5462\uff0c\u7b80\u5355\u8bf4\u5c31\u662f\uff1a\u6bcf\u4e00\u6b65\u90fd\u505a\u51fa\u4e00\u4e2a\u5c40\u90e8\u6700\u4f18\u7684\u9009\u62e9\uff0c\u6700\u7ec8\u7684\u7ed3\u679c\u5c31\u662f\u5168\u5c40\u6700\u4f18\u3002\u6ce8\u610f\u54e6\uff0c\u8fd9\u662f\u4e00\u79cd\u7279\u6b8a\u6027\u8d28\uff0c\u5176\u5b9e\u53ea\u6709\u4e00\u90e8\u5206\u95ee\u9898\u62e5\u6709\u8fd9\u4e2a\u6027\u8d28\u3002 \u6bd4\u5982\u4f60\u9762\u524d\u653e\u7740 100 \u5f20\u4eba\u6c11\u5e01\uff0c\u4f60\u53ea\u80fd\u62ff\u5341\u5f20\uff0c\u600e\u4e48\u624d\u80fd\u62ff\u6700\u591a\u7684\u9762\u989d\uff1f\u663e\u7136\u6bcf\u6b21\u9009\u62e9\u5269\u4e0b\u949e\u7968\u4e2d\u9762\u503c\u6700\u5927\u7684\u4e00\u5f20\uff0c\u6700\u540e\u4f60\u7684\u9009\u62e9\u4e00\u5b9a\u662f\u6700\u4f18\u7684\u3002 \u7136\u800c\uff0c\u5927\u90e8\u5206\u95ee\u9898\u660e\u663e\u4e0d\u5177\u6709\u8d2a\u5fc3\u9009\u62e9\u6027\u8d28\u3002\u6bd4\u5982\u6253\u6597\u5730\u4e3b\uff0c\u5bf9\u624b\u51fa\u5bf9\u513f\u4e09\uff0c\u6309\u7167\u8d2a\u5fc3\u7b56\u7565\uff0c\u4f60\u5e94\u8be5\u51fa\u5c3d\u53ef\u80fd\u5c0f\u7684\u724c\u521a\u597d\u538b\u5236\u4f4f\u5bf9\u65b9\uff0c\u4f46\u73b0\u5b9e\u60c5\u51b5\u6211\u4eec\u751a\u81f3\u53ef\u80fd\u4f1a\u51fa\u738b\u70b8\u3002\u8fd9\u79cd\u60c5\u51b5\u5c31\u4e0d\u80fd\u7528\u8d2a\u5fc3\u7b97\u6cd5\uff0c\u800c\u5f97\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u89e3\u51b3\u3002 \u9898\u76ee\u7ec3\u4e60 \u00b6 - \u8d2a\u5fc3 - \u65e0\u91cd\u53e0\u533a\u95f4 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u00b6","title":"\u8d2a\u5fc3\u7b97\u6cd5"},{"location":"algorithm/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/#_1","text":"","title":"\u9898\u76ee\u7ec3\u4e60"},{"location":"algorithm/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/#-leetcode-leetcode-cncom","text":"","title":"- \u8d2a\u5fc3 - \u65e0\u91cd\u53e0\u533a\u95f4 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com)"},{"location":"algorithm/%E9%80%92%E5%BD%92/","text":"\u9012\u5f52\u6846\u67b6 \u00b6 \u9012\u5f52\u7684\u672c\u8d28\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u538b\u6808\u548c\u5f39\u6808\u7684\u8fc7\u7a0b\uff0c\u7236\u7ed3\u679c\u7684\u5b8c\u6210\u4f9d\u8d56\u4e8e\u5b50\u7ed3\u679c\uff0c\u5c42\u5c42\u9012\u5f52\u4e0b\u53bb\uff0c\u77e5\u9053\u9047\u5230\u7ec8\u6b62\u9012\u5f52\u7684\u6761\u4ef6\u3002 \u7b97\u6cd5\u4e2d\u7684\u9012\u5f52\u6846\u67b6\u56fe\u5982\u4e0b\uff1a def recursion ( params ): # 1.base case \u505c\u6b62\u9012\u5f52\u7684\u6dfb\u52a0 if condition : return res # 2.\u8c03\u7528\u5b50\u9012\u5f52\uff0c\u5f97\u5230\u5b50\u7ed3\u679c child_res = recursion ( child_params ) # 3.\u7528\u5b50\u7ed3\u679c\u5b8c\u5584\u5f53\u524d\u7ed3\u679c final_res = child_res and other_conditions return final_res \u505a\u7b97\u6cd5\u9898\u9700\u8981\u7528\u5230\u9012\u5f52\u7684\u65f6\u5019\uff0c\u4f9d\u7167\u8fd9\u4e2a\u601d\u8def\u57fa\u672c\u5c31\u53ef\u4ee5\u5c06\u5927\u4f53\u5199\u51fa\u6765\uff0c\u5176\u4f59\u7684\u7ec6\u8282\u95ee\u9898\uff0c\u56e0\u60c5\u51b5\u800c\u5f02\u3002","title":"\u9012\u5f52"},{"location":"algorithm/%E9%80%92%E5%BD%92/#_1","text":"\u9012\u5f52\u7684\u672c\u8d28\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u538b\u6808\u548c\u5f39\u6808\u7684\u8fc7\u7a0b\uff0c\u7236\u7ed3\u679c\u7684\u5b8c\u6210\u4f9d\u8d56\u4e8e\u5b50\u7ed3\u679c\uff0c\u5c42\u5c42\u9012\u5f52\u4e0b\u53bb\uff0c\u77e5\u9053\u9047\u5230\u7ec8\u6b62\u9012\u5f52\u7684\u6761\u4ef6\u3002 \u7b97\u6cd5\u4e2d\u7684\u9012\u5f52\u6846\u67b6\u56fe\u5982\u4e0b\uff1a def recursion ( params ): # 1.base case \u505c\u6b62\u9012\u5f52\u7684\u6dfb\u52a0 if condition : return res # 2.\u8c03\u7528\u5b50\u9012\u5f52\uff0c\u5f97\u5230\u5b50\u7ed3\u679c child_res = recursion ( child_params ) # 3.\u7528\u5b50\u7ed3\u679c\u5b8c\u5584\u5f53\u524d\u7ed3\u679c final_res = child_res and other_conditions return final_res \u505a\u7b97\u6cd5\u9898\u9700\u8981\u7528\u5230\u9012\u5f52\u7684\u65f6\u5019\uff0c\u4f9d\u7167\u8fd9\u4e2a\u601d\u8def\u57fa\u672c\u5c31\u53ef\u4ee5\u5c06\u5927\u4f53\u5199\u51fa\u6765\uff0c\u5176\u4f59\u7684\u7ec6\u8282\u95ee\u9898\uff0c\u56e0\u60c5\u51b5\u800c\u5f02\u3002","title":"\u9012\u5f52\u6846\u67b6"},{"location":"books/redis/","text":"Redis\u8bbe\u8ba1\u4e0e\u5b9e\u73b0 \u00b6 \u300aRedis\u8bbe\u8ba1\u4e0e\u5b9e\u73b0\u300b\u662f2014\u5e74\u673a\u68b0\u5de5\u4e1a\u51fa\u7248\u793e\u51fa\u7248\u7684\u56fe\u4e66\uff0c\u4f5c\u8005\u662f\u9ec4\u5065\u5b8f\u3002\u672c\u4e66\u8bb2\u89e3\u4e86Redis\u7684\u5185\u90e8\u673a\u5236\u4e0e\u5b9e\u73b0\u65b9\u5f0f\uff0c\u5bf9Redis\u7684\u5927\u591a\u6570\u5355\u673a\u529f\u80fd\u4ee5\u53ca\u6240\u6709\u591a\u673a\u529f\u80fd\u7684\u5b9e\u73b0\u539f\u7406\u8fdb\u884c\u4e86\u4ecb\u7ecd\uff0c\u5c55\u793a\u4e86\u8fd9\u4e9b\u529f\u80fd\u7684\u6838\u5fc3\u6570\u636e\u7ed3\u6784\u4ee5\u53ca\u5173\u952e\u7684\u7b97\u6cd5\u601d\u60f3\uff0c\u5e76\u7ed9\u51fa\u5927\u91cf\u53c2\u8003\u4fe1\u606f\u3002","title":"Redis"},{"location":"books/redis/#redis","text":"\u300aRedis\u8bbe\u8ba1\u4e0e\u5b9e\u73b0\u300b\u662f2014\u5e74\u673a\u68b0\u5de5\u4e1a\u51fa\u7248\u793e\u51fa\u7248\u7684\u56fe\u4e66\uff0c\u4f5c\u8005\u662f\u9ec4\u5065\u5b8f\u3002\u672c\u4e66\u8bb2\u89e3\u4e86Redis\u7684\u5185\u90e8\u673a\u5236\u4e0e\u5b9e\u73b0\u65b9\u5f0f\uff0c\u5bf9Redis\u7684\u5927\u591a\u6570\u5355\u673a\u529f\u80fd\u4ee5\u53ca\u6240\u6709\u591a\u673a\u529f\u80fd\u7684\u5b9e\u73b0\u539f\u7406\u8fdb\u884c\u4e86\u4ecb\u7ecd\uff0c\u5c55\u793a\u4e86\u8fd9\u4e9b\u529f\u80fd\u7684\u6838\u5fc3\u6570\u636e\u7ed3\u6784\u4ee5\u53ca\u5173\u952e\u7684\u7b97\u6cd5\u601d\u60f3\uff0c\u5e76\u7ed9\u51fa\u5927\u91cf\u53c2\u8003\u4fe1\u606f\u3002","title":"Redis\u8bbe\u8ba1\u4e0e\u5b9e\u73b0"},{"location":"http/%E7%BD%91%E7%BB%9C/","text":"1.\u5206\u5c42\u6a21\u578b \u00b6 \u53c2\u8003\uff1a 21\u5f20\u56fe\u8be6\u89e3\u7f51\u7edc\u57fa\u7840\u77e5\u8bc6 (qq.com) TCP/IP \u534f\u8bae\u7684\u7ecf\u5178\u9762\u8bd5\u77e5\u8bc6\u70b9\u603b\u7ed3 - \u6c64\u5706\u5b66Java - \u5f00\u53d1\u8005\u5934\u6761 (toutiao.io)","title":"\u7f51\u7edc"},{"location":"http/%E7%BD%91%E7%BB%9C/#1","text":"\u53c2\u8003\uff1a 21\u5f20\u56fe\u8be6\u89e3\u7f51\u7edc\u57fa\u7840\u77e5\u8bc6 (qq.com) TCP/IP \u534f\u8bae\u7684\u7ecf\u5178\u9762\u8bd5\u77e5\u8bc6\u70b9\u603b\u7ed3 - \u6c64\u5706\u5b66Java - \u5f00\u53d1\u8005\u5934\u6761 (toutiao.io)","title":"1.\u5206\u5c42\u6a21\u578b"},{"location":"posts/","text":"\u9ed1\u6076\u9ed1 \u00b6","title":2},{"location":"posts/#_1","text":"","title":"\u9ed1\u6076\u9ed1"},{"location":"project_collection/","text":"\u6536\u96c6\u9879\u76ee\u6216\u8005\u5de5\u5177 \u00b6 tqdm \u00b6 Tqdm \u662f\u4e00\u4e2a\u5feb\u901f,\u53ef\u6269\u5c55\u7684Python\u8fdb\u5ea6\u6761,\u53ef\u4ee5\u5728 Python \u957f\u5faa\u73af\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u8fdb\u5ea6\u63d0\u793a\u4fe1\u606f,\u7528\u6237\u53ea\u9700\u8981\u5c01\u88c5\u4efb\u610f\u7684\u8fed\u4ee3\u5668 tqdm (iterator)\u3002 \u9879\u76ee\u5730\u5740\uff1a https://github.com/tqdm/tqdm Gooey \u00b6 Turn (almost) any Python 2 or 3 Console Program into a GUI application with one line \u5c06\u51e0\u4e4e\u6240\u6709\u7684python\u547d\u4ee4\u884c\u7a0b\u5e8f\u8f6c\u5316\u4e3aGUI\u5e94\u7528\u7a0b\u5e8f \u9879\u76ee\u5730\u5740\uff1a https://github.com/Python-Tools/Gooey","title":"\u6536\u96c6\u9879\u76ee\u6216\u8005\u5de5\u5177"},{"location":"project_collection/#_1","text":"","title":"\u6536\u96c6\u9879\u76ee\u6216\u8005\u5de5\u5177"},{"location":"project_collection/#tqdm","text":"Tqdm \u662f\u4e00\u4e2a\u5feb\u901f,\u53ef\u6269\u5c55\u7684Python\u8fdb\u5ea6\u6761,\u53ef\u4ee5\u5728 Python \u957f\u5faa\u73af\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u8fdb\u5ea6\u63d0\u793a\u4fe1\u606f,\u7528\u6237\u53ea\u9700\u8981\u5c01\u88c5\u4efb\u610f\u7684\u8fed\u4ee3\u5668 tqdm (iterator)\u3002 \u9879\u76ee\u5730\u5740\uff1a https://github.com/tqdm/tqdm","title":"tqdm"},{"location":"project_collection/#gooey","text":"Turn (almost) any Python 2 or 3 Console Program into a GUI application with one line \u5c06\u51e0\u4e4e\u6240\u6709\u7684python\u547d\u4ee4\u884c\u7a0b\u5e8f\u8f6c\u5316\u4e3aGUI\u5e94\u7528\u7a0b\u5e8f \u9879\u76ee\u5730\u5740\uff1a https://github.com/Python-Tools/Gooey","title":"Gooey"},{"location":"python/source/","text":"\u9762\u8bd5\u51c6\u5907\u7f51\u9875\uff1a \u00b6 jackfrued/Python-Interview-Bible kenwoodjw/python_interview_question yongxinz/back-end-interview https://github.com/CyC2018/CS-Notes JushuangQiao/Python-Offer: \u300a\u5251\u6307Offer\u300b\u9762\u8bd5\u9898Python\u5b9e\u73b0 (github.com) xiandong79/Python_Developer: Python \u9762\u8bd5\uff0cPython\u6280\u672f\u5408\u96c6\uff0c Python\u540e\u7aef\u5f00\u53d1\uff0cPython Web (github.com)","title":"Source"},{"location":"python/source/#_1","text":"jackfrued/Python-Interview-Bible kenwoodjw/python_interview_question yongxinz/back-end-interview https://github.com/CyC2018/CS-Notes JushuangQiao/Python-Offer: \u300a\u5251\u6307Offer\u300b\u9762\u8bd5\u9898Python\u5b9e\u73b0 (github.com) xiandong79/Python_Developer: Python \u9762\u8bd5\uff0cPython\u6280\u672f\u5408\u96c6\uff0c Python\u540e\u7aef\u5f00\u53d1\uff0cPython Web (github.com)","title":"\u9762\u8bd5\u51c6\u5907\u7f51\u9875\uff1a"},{"location":"python/%E5%9F%BA%E7%A1%80/","text":"Python\u57fa\u7840 \u00b6 1.\u5143\u7c7bmetaclass \u00b6 \u53c2\u8003\u6587\u7ae0\uff1a https://blog.csdn.net/a2011480169/article/details/87891753 \u5143\u7c7b\u5c31\u662f\u7528\u6765\u521b\u5efa\u7c7b\u7684\u7c7b\uff0cPython\u4e2d\u4e00\u5207\u90fd\u662f\u5bf9\u8c61\uff0c\u5305\u62ec\u7c7b\u4e5f\u662f\u5bf9\u8c61\uff08\u7c7b\u5bf9\u8c61\uff09\uff0c\u7c7b\u5b9e\u4f8b\u5316\u4e4b\u540e\uff0c\u5c31\u53d8\u4e3a\u6211\u4eec\u5e38\u7528\u7684\u5b9e\u4f8b\u5bf9\u8c61\u3002type\u662fPython\u79cd\u9ed8\u8ba4\u7684\u5143\u7c7b\u3002\u65e2\u7136\u5143\u7c7b\u662f\u7528\u6765\u521b\u5efa\u7c7b\u5bf9\u8c61\u7684\uff0c\u90a3\u4e48\u5143\u7c7b\u5c31\u53ef\u4ee5\u901a\u8fc7 __new__ \u548c __init__ \u65b9\u6cd5\u63a7\u5236\u7c7b\u5bf9\u8c61\u7684\u521b\u5efa\u8fc7\u7a0b\u3002 \u5e38\u7528\u4e8e\uff1aORM\u3001\u5355\u4f8b type\u5b9a\u4e49\u7c7b type\u5b9a\u4e49\u7c7b\uff0c\u5206\u522b\u4f20\u5165\u7c7b\u540d\u3001\u7c7b\u7684\u7ee7\u627f\u5bf9\u8c61\u4ee5\u53ca\u7c7b\u7684\u53c2\u6570\u3002 country = 'China' def __init__ ( self , name , age ): self . name = name self . age = age def tell ( self ): print ( ' %s \u7684\u5e74\u9f84\u662f: %s ' % ( self . name , self . age )) Person = type ( 'Person' ,( object ,),{ 'country' : country , '__init__' : __init__ , 'tell' : tell }) print ( Person . __dict__ ) person = Person ( 'wtt' , 25 ) print ( person . __dict__ ) \u81ea\u5b9a\u4e49\u5143\u7c7b \u5229\u7528\u5143\u7c7b\uff0c\u7b2c\u4e00\uff1a\u7c7b\u5fc5\u987b\u6709\u6587\u6863\u6ce8\u91ca,\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u7b2c\u4e8c\uff1a\u5728\u4e00\u4e2a\u7c7b\u5185\u90e8\u5b9a\u4e49\u7684\u6240\u6709\u51fd\u6570\u5fc5\u987b\u6709\u6587\u6863\u6ce8\u91ca,\u4e0d\u80fd\u4e3a\u7a7a\u3002 class DocCheckMetaClass ( type ): \"\"\" 1.\u7c7b\u5fc5\u987b\u6709\u6587\u6863\u6ce8\u91ca,\u4e0d\u80fd\u4e3a\u7a7a 2.\u5728\u4e00\u4e2a\u7c7b\u5185\u90e8\u5b9a\u4e49\u7684\u6240\u6709\u51fd\u6570\u5fc5\u987b\u6709\u6587\u6863\u6ce8\u91ca,\u4e0d\u80fd\u4e3a\u7a7a\u3002 \"\"\" def __init__ ( cls , cls_name , cls_bases , cls_dict : dict ): # \u68c0\u67e5\u7c7b\u7684\u6587\u6863\u6ce8\u91ca if \"__doc__\" not in cls_dict or not cls_dict [ \"__doc__\" ] . strip (): raise Exception ( \"class [ %s ] must have a doc.\" % ( cls_name ,)) # \u68c0\u67e5\u65b9\u6cd5\u662f\u5426\u6709\u6587\u6863\u6ce8\u91ca for k , v in cls_dict . items (): if k . startswith ( \"__\" ): continue if not callable ( v ): continue if not v . __doc__ or not v . __doc__ . strip (): raise Exception ( \"method [ %s ] must have a doc.\" % ( v ,)) super () . __init__ ( cls_name , cls_bases , cls_dict ) class Person ( metaclass = DocCheckMetaClass ): \"\"\"Person\u7c7b\"\"\" def __init__ ( self , name , age ): self . name = name self . age = age def show_info ( self ): \"\"\" \"\"\" print ( \"\u6211\u662f\uff1a %s \uff0c\u4eca\u5e74\uff1a %s \" % ( self . name , self . age )) 2.\u8fed\u4ee3\u5668\u3001\u751f\u6210\u5668\u548c\u53ef\u8fed\u4ee3\u5bf9\u8c61 \u00b6 \u53c2\u8003\u6587\u7ae0\uff1a \u5982\u4f55\u7406\u89e3Python\u4e2d\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3001\u8fed\u4ee3\u5668\u548c\u751f\u6210\u5668 - \u77e5\u4e4e (zhihu.com) Python\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u8fed\u4ee3\u5668\uff0c\u751f\u6210\u5668\u7684\u533a\u522b_LiangJishengBlog-CSDN\u535a\u5ba2_\u53ef\u8fed\u4ee3\u5bf9\u8c61 \u8fed\u4ee3\u5668\u662f\u4e00\u79cd\u6700\u7b80\u5355\u4e5f\u6700\u5e38\u89c1\u7684\u8bbe\u8ba1\u6a21\u5f0f\u3002\u5b83\u53ef\u4ee5\u8ba9\u7528\u6237\u900f\u8fc7\u7279\u5b9a\u7684\u63a5\u53e3\u5de1\u8bbf\u5bb9\u5668\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u800c\u4e0d\u7528\u4e86\u89e3\u5e95\u5c42\u7684\u5b9e\u73b0\u3002 \u8fed\u4ee3\u662f\u6570\u636e\u5904\u7406\u7684\u57fa\u77f3\u3002\u5f53\u5185\u5b58\u4e2d\u653e\u4e0d\u4e0b\u6570\u636e\u96c6\u65f6\uff0c\u6211\u4eec\u8981\u627e\u5230\u4e00\u79cd \u60f0\u6027 \u83b7\u53d6\u6570\u636e\u7684\u65b9\u5f0f\uff0c\u5373\u6309\u9700\u4e00\u6b21\u83b7\u53d6\u4e00\u4e2a\u6570\u636e\u9879\uff0c\u8fd9\u5c31\u662f\u8fed\u4ee3\u5668\u6a21\u5f0f\u3002 \u4e09\u8005\u7684\u5173\u7cfb\u56fe\uff1a \u53ef\u8fed\u4ee3\u5bf9\u8c61\u4ea7\u751f\u8fed\u4ee3\u5668\uff0c\u8fed\u4ee3\u5668\u4e5f\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u751f\u6210\u5668\u662f\u7279\u6b8a\u7684\u8fed\u4ee3\u5668\u3002 a) \u53ef\u8fed\u4ee3\u5bf9\u8c61 \u00b6 \u6211\u4eec\u90fd\u77e5\u9053\u5e8f\u5217\u662f\u53ef\u8fed\u4ee3\u7684\u3002\u5f53\u89e3\u91ca\u5668\u9700\u8981\u8fed\u4ee3\u5bf9\u8c61x\u65f6\uff0c\u4f1a\u81ea\u52a8\u8c03\u7528iter(x) \u3002 \u5185\u7f6e\u7684iter\u51fd\u6570\u6709\u4ee5\u4e0b\u4f5c\u7528\uff1a \u68c0\u67e5\u5bf9\u8c61\u662f\u5426\u5b9e\u73b0\u4e86 __iter__ \u65b9\u6cd5\uff0c\u5982\u679c\u5b9e\u73b0\u4e86\u5c31\u8c03\u7528\u5b83\uff0c\u83b7\u5f97\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002 \u5982\u679c\u6ca1\u6709\u5b9e\u73b0 __iter__ \u65b9\u6cd5\uff0c\u4f46\u662f\u5b9e\u73b0\u4e86 __getitem__ \u65b9\u6cd5\uff0cpython\u4f1a\u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u5c1d\u8bd5\u6309\u987a\u5e8f\uff08\u4ece\u7d22\u5f150\u5f00\u59cb\uff09\u83b7\u53d6\u5143\u7d20\u3002 \u5982\u679c\u5c1d\u8bd5\u5931\u8d25\uff0cpython\u4f1a\u629b\u51fa TypeError \u5f02\u5e38\uff0c\u901a\u5e38\u4f1a\u63d0\u793a\"C object is not iterable\"\uff0c\u5176\u4e2dC\u662f\u76ee\u6807\u5bf9\u8c61\u6240\u5c5e\u7684\u7c7b\u3002 \u4f7f\u7528iter\u5b9e\u73b0\u53ef\u8fed\u4ee3\u5bf9\u8c61 class MyList : def __init__ ( self , data ): self . data = data def __iter__ ( self ): # \u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668 return MyListIterator ( self . data ) class MyListIterator : def __init__ ( self , data ): self . data = data self . index = 0 def __iter__ ( self ): return self def __next__ ( self ): try : ret = self . data [ self . index ] except IndexError : raise StopIteration () self . index += 1 return ret a = MyList ([ 1 , 2 , 3 , 4 ]) for x in a : print ( x ) \u4f7f\u7528getitem\u5b9e\u73b0\u53ef\u8fed\u4ee3\u5bf9\u8c61 class MyList2 : def __init__ ( self , data ): self . data = data def __getitem__ ( self , index ): return self . data [ index ] for x in MyList2 ([ 3 , 4 , 5 , 6 ]): print ( x ) b) \u8fed\u4ee3\u5668 \u00b6 \u4f7f\u7528iter\u5185\u7f6e\u51fd\u6570\u53ef\u4ee5\u83b7\u53d6\u8fed\u4ee3\u5668\u5bf9\u8c61\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u5bf9\u8c61\u5b9e\u73b0\u4e86\u80fd\u8fd4\u56de\u8fed\u4ee3\u5668\u7684 __iter__ \u65b9\u6cd5\uff0c\u90a3\u4e48\u5bf9\u8c61\u5c31\u662f\u53ef\u8fed\u4ee3\u7684\uff0c\u5e8f\u5217\u90fd\u53ef\u4ee5\u8fed\u4ee3\uff1b\u5b9e\u73b0\u4e86 __getitem__ \u65b9\u6cd5\uff0c\u800c\u4e14\u5176\u53c2\u6570\u662f\u4ece\u96f6\u5f00\u59cb\u7684\u7d22\u5f15\uff0c\u8fd9\u79cd\u5bf9\u8c61\u4e5f\u662f\u53ef\u8fed\u4ee3\u7684\u3002 \u56e0\u6b64\u53ef\u4ee5\u660e\u786e \u53ef\u8fed\u4ee3\u5bf9\u8c61 \u548c \u8fed\u4ee3\u5668 \u4e4b\u95f4\u7684\u5173\u7cfb\uff1a Python\u4ece\u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61\u4e2d\u83b7\u53d6\u8fed\u4ee3\u5668\u3002 \u6807\u51c6\u7684\u8fed\u4ee3\u5668\u63a5\u53e3\u6709\u4e24\u4e2a\u65b9\u6cd5\uff0c\u5373\uff1a __next__ :\u8fd4\u56de\u4e0b\u4e00\u4e2a\u53ef\u7528\u5143\u7d20\uff0c\u5982\u679c\u6ca1\u6709\u5143\u7d20\uff0c\u629b\u51faStopIteration\u5f02\u5e38 __iter__ :\u8fd4\u56deself\uff0c\u4ee5\u4fbf\u5728\u5e94\u8be5\u4f7f\u7528\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5730\u65b9\u4f7f\u7528\u8fed\u4ee3\u5668\uff0c\u6bd4\u5982for\u5faa\u73af\u4e2d\u3002 \u6784\u5efa \u53ef\u8fed\u4ee3\u5bf9\u8c61 \u548c \u8fed\u4ee3\u5668 \u65f6\u7ecf\u5e38\u4f1a\u51fa\u73b0\u9519\u8bef\uff0c\u539f\u56e0\u662f\u6df7\u6dc6\u4e86\u4e24\u8005\u3002\u8981\u77e5\u9053\uff0c \u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61 \u6709\u4e2a __iter__ \u65b9\u6cd5\uff0c \u8c03\u7528\u8be5\u65b9\u6cd5\u6bcf\u6b21\u90fd\u5b9e\u4f8b\u5316\u4e00\u4e2a\u65b0\u7684\u8fed\u4ee3\u5668* *\uff1b\u800c \u8fed\u4ee3\u5668 \u8981\u5b9e\u73b0 __next__ \u65b9\u6cd5\uff0c\u8fd4\u56de\u5355\u4e2a\u5143\u7d20\uff0c\u6b64\u5916\u8fd8\u8981\u5b9e\u73b0 __iter__ \u65b9\u6cd5\uff0c\u8fd4\u56de\u8fed\u4ee3\u5668\u672c\u8eab(self)\uff0c\u5982\u56fe\u3002\u56e0\u6b64\uff0c \u8fed\u4ee3\u5668 \u53ef\u4ee5\u8fed\u4ee3\uff0c\u4f46\u662f \u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61**\u4e0d\u662f\u8fed\u4ee3\u5668\u3002 c) \u751f\u6210\u5668 \u00b6 \u5728Python\u4e2d\u521b\u5efa\u8fed\u4ee3\u5668\u6700\u65b9\u4fbf\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u751f\u6210\u5668\u3002\u751f\u6210\u5668\u4e5f\u662f\u8fed\u4ee3\u5668\u3002\u751f\u6210\u5668\u7684\u8bed\u6cd5\u7c7b\u4f3c\u4e8e\u51fd\u6570\uff0c\u4f46\u662f\u4e0d\u8fd4\u56de\u503c\u3002\u4e3a\u4e86\u663e\u793a\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u4f1a\u4f7f\u7528yield\u8bed\u53e5\u3002\u53ea\u8981Python\u51fd\u6570\u7684\u5b9a\u4e49\u4f53\u4e2d\u6709yield\u5173\u952e\u5b57\uff0c\u8be5\u51fd\u6570\u5c31\u662f\u751f\u6210\u5668\u51fd\u6570\u3002\u8c03\u7528\u751f\u6210\u5668\u51fd\u6570\u65f6\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61\u3002 \u751f\u6210\u5668\u51fd\u6570 def gen_123 (): # \u53ea\u8981Python\u4ee3\u7801\u4e2d\u5305\u542byield\uff0c\u8be5\u51fd\u6570\u5c31\u662f\u751f\u6210\u5668\u51fd\u6570 yield 1 #\u751f\u6210\u5668\u51fd\u6570\u7684\u5b9a\u4e49\u4f53\u4e2d\u901a\u5e38\u90fd\u6709\u5faa\u73af\uff0c\u4e0d\u8fc7\u8fd9\u4e0d\u662f\u5fc5\u8981\u6761\u4ef6\uff1b\u6b64\u5904\u91cd\u590d\u4f7f\u7528\u4e863\u6b21yield yield 2 yield 3 if __name__ == '__main__' : print ( gen_123 ) # \u53ef\u4ee5\u770b\u51fagen_123\u662f\u51fd\u6570\u5bf9\u8c61 # <function gen_123 at 0x10be19> print ( gen_123 ()) # \u51fd\u6570\u8c03\u7528\u65f6\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61 # <generator object gen_123 at 0x10be31> for i in gen_123 (): # \u751f\u6210\u5668\u662f\u8fed\u4ee3\u5668\uff0c\u4f1a\u751f\u6210\u4f20\u7ed9yield\u5173\u952e\u5b57\u7684\u8868\u8fbe\u5f0f\u7684\u503c print ( i ) # 1 # 2 # 3 g = gen_123 () # \u4e3a\u4e86\u4ed4\u7ec6\u68c0\u67e5\uff0c\u628a\u751f\u6210\u5668\u5bf9\u8c61\u8d4b\u503c\u7ed9g print ( next ( g )) # 1 print ( next ( g )) # 2 print ( next ( g )) # 3 print ( next ( g )) # \u751f\u6210\u5668\u51fd\u6570\u7684\u5b9a\u4e49\u4f53\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u751f\u6210\u5668\u5bf9\u8c61\u4f1a\u629b\u51fa\u5f02\u5e38\u3002 # Traceback (most recent call last): # File \"test.py\", line 17, in <module> # print(next(g)) # StopIteration \u751f\u6210\u5668\u8868\u8fbe\u5f0f In [ 1 ]: def gen_AB (): # 1 ... : print ( 'start' ) ... : yield 'A' ... : print ( 'continue' ) ... : yield 'B' ... : print ( 'end.' ) ... : In [ 2 ]: res1 = [ x * 3 for x in gen_AB ()] # 2 start continue end . In [ 3 ]: for i in res1 (): # 3 ... : print ( '-->' , i ) ... : AAA BBB In [ 4 ]: res2 = ( x * 3 for x in gen_AB ()) # 4 In [ 5 ]: res2 # 5 < generator object < genexpr > at 0x106a07620 > In [ 6 ]: for i in res2 (): # 6 ... : print ( '-->' , i ) ... : start --> A continue --> B end . \u60f0\u6027\u8ba1\u7b97 def fibonacci (): a = 0 b = 1 while True : yield a future = a + b a = b b = future 4.\u7c7b\u53d8\u91cf\u3001\u5b9e\u4f8b\u53d8\u91cf \u00b6 \u7c7b\u5c5e\u6027\u548c\u5b9e\u4f8b\u5c5e\u6027\u9700\u8981\u641e\u6e05\u695a __dict__ \u5c5e\u6027\uff0c\u5b9e\u4f8b\u548c\u7c7b\u5c5e\u6027\u90fd\u4fdd\u5b58\u5728 __dict__ \u4e2d\u3002\u641e\u6e05\u695a\u8fd9\u70b9\uff0c\u5c31\u80fd\u770b\u660e\u767d\u4e0b\u9762\u7684\u4f8b\u5b50\u3002 In [ 1 ]: class Test ( object ): ... : num_of_instance = 0 ... : def __init__ ( self , name ): ... : self . name = name ... : Test . num_of_instance += 1 ... : In [ 2 ]: Test . num_of_instance Out [ 2 ]: 0 In [ 3 ]: t1 = Test ( 'jack' ) In [ 4 ]: Test . num_of_instance Out [ 4 ]: 1 In [ 5 ]: t2 = Test ( 'lucy' ) In [ 6 ]: Test . num_of_instance Out [ 6 ]: 2 In [ 7 ]: t1 . num_of_instance Out [ 7 ]: 2 In [ 8 ]: t2 . num_of_instance Out [ 8 ]: 2 In [ 9 ]: class Person : ... : name = [] ... : In [ 10 ]: p1 = Person () In [ 11 ]: p2 = Person () In [ 12 ]: p1 . name . append ( 1 ) In [ 13 ]: print ( p1 . name , p2 . name ) [ 1 ] [ 1 ] In [ 14 ]: print ( Person . name ) [ 1 ] In [ 70 ]: class Student : ... : _name = \"xxx\" ... : ... : def __init__ ( self ): ... : self . _age = 10 ... : ... : ... : a = Student () ... : b = Student () ... : ... : print ( a . _name , b . _name , Student . _name ) ... : ... : a . _name = \"\u6211\u662fa\" ... : print ( a . _name , b . _name , Student . _name ) ... : ... : Student . _name = \"\u6211\u662f\u5b66\u751f\" ... : print ( a . _name , b . _name , Student . _name ) xxx xxx xxx \u6211\u662fa xxx xxx \u6211\u662fa \u6211\u662f\u5b66\u751f \u6211\u662f\u5b66\u751f 5.GIL\u5168\u5c40\u89e3\u91ca\u5668\u9501 \u00b6 \u53c2\u8003\uff1a Python GIL\u5168\u5c40\u89e3\u91ca\u5668\u9501\u8be6\u89e3\uff08\u6df1\u5ea6\u5256\u6790\uff09 (biancheng.net) Python\u7684\u5168\u5c40\u89e3\u91ca\u5668\u9501\uff08GIL\uff09 - \u7b80\u4e66 (jianshu.com) python GIL\u5168\u5c40\u89e3\u91ca\u5668\u9501\u7684\u7406\u89e3_feilzhang\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_gil\u5168\u5c40\u89e3\u91ca\u5668\u9501 \u6df1\u5165\u7406\u89e3Python\u4e2d\u7684GIL\uff08\u5168\u5c40\u89e3\u91ca\u5668\u9501\uff09\u3002 - \u77e5\u4e4e (zhihu.com) \u591a\u7ebf\u7a0b\u4e0b\u6bcf\u4e2a\u7ebf\u7a0b\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u90fd\u9700\u8981\u5148\u83b7\u53d6GIL\uff0c\u4fdd\u8bc1\u540c\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5728\u8fd0\u884c\u3002\u9996\u5148\u9700\u8981\u660e\u786e\u7684\u4e00\u70b9\u662fGIL\u5e76\u4e0d\u662fPython\u7684\u7279\u6027\uff0c\u5b83\u662f\u5728\u5b9e\u73b0Python\u89e3\u6790\u5668(CPython)\u65f6\u6240\u5f15\u5165\u7684\u4e00\u4e2a\u6982\u5ff5\u3002GIL\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\uff0cGIL\u662f\u89e3\u91ca\u5668\u5c42\u9762\u7684\uff0c\u800c\u89e3\u91ca\u5668\u5bf9\u5e94\u7684\u662f\u5b57\u8282\u7801\u7684\u6267\u884c\uff0c\u4ee3\u7801\u4e2d\u7b80\u5355\u7684\u4e00\u4e2a\u8d4b\u503c\u8bed\u53e5\uff0c\u8f6c\u4e3a\u5b57\u8282\u7801\u4e4b\u540e\u4f1a\u53d8\u4e3a\u82e5\u5e72\u4e2a\u6307\u4ee4\uff0c\u5982\u679c\u8fd9\u82e5\u5e72\u4e2a\u6307\u4ee4\u6267\u884c\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u4e86\u7ebf\u7a0b\u5207\u6362\uff0c\u90a3\u5c31\u65e0\u6cd5\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\u4e86\u3002 6.Python\u7ee7\u627f \u00b6 \u53c2\u8003\uff1a python\u57fa\u7840\uff1a12.\u9762\u5411\u5bf9\u8c61\u4e4b\u7ee7\u627f - \u77e5\u4e4e (zhihu.com) 7.Python\u5783\u573e\u56de\u6536\u673a\u5236 \u00b6 \u53c2\u8003\uff1a Python\u5783\u573e\u56de\u6536\u673a\u5236\u8be6\u89e3_lighting-CSDN\u535a\u5ba2_python\u5783\u573e\u56de\u6536\u673a\u5236 Python\u5783\u573e\u56de\u6536\u673a\u5236\uff01\u975e\u5e38\u5b9e\u7528 - \u77e5\u4e4e (zhihu.com) Python-Interview-Bible/Python\u9762\u8bd5\u5b9d\u5178-\u57fa\u7840\u7bc7-2020.md at master \u00b7 jackfrued/Python-Interview-Bible (github.com) Python GC \u4e3b\u8981\u4f7f\u7528\u5f15\u7528\u8ba1\u6570\uff08reference counting\uff09\u6765\u8ddf\u8e2a\u548c\u56de\u6536\u5783\u573e\u3002\u5728\u5f15\u7528\u8ba1\u6570\u7684\u57fa\u7840\u4e0a\uff0c\u901a\u8fc7\u201c\u6807\u8bb0-\u6e05\u9664\u201d\uff08mark and sweep\uff09\u89e3\u51b3\u5bb9\u5668\u5bf9\u8c61\u53ef\u80fd\u4ea7\u751f\u7684\u5faa\u73af\u5f15\u7528\u95ee\u9898\uff0c\u901a\u8fc7\u201c\u5206\u4ee3\u56de\u6536\u201d\uff08generation collection\uff09\u4ee5\u7a7a\u95f4\u6362\u65f6\u95f4\u7684\u65b9\u6cd5\u63d0\u9ad8\u5783\u573e\u56de\u6536\u6548\u7387\u3002 8.Python2\u548cPython3\u7684\u533a\u522b \u00b6 \u53c2\u8003\uff1a http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/ https://www.zhihu.com/question/19698598 9.__new__\u548c__init__\u65b9\u6cd5 \u00b6 \u53c2\u8003\uff1a https://blog.csdn.net/weixin_37579123/article/details/89515577 10.Python\u6df1\u62f7\u8d1d\u548c\u6d45\u62f7\u8d1d \u00b6 \u53c2\u8003\uff1a Python-Interview-Bible/Python\u9762\u8bd5\u5b9d\u5178-\u57fa\u7840\u7bc7-2020.md at master \u00b7 jackfrued/Python-Interview-Bible (github.com) \u6d45\u62f7\u8d1d\uff1a\u53ea\u62f7\u8d1d\u5bf9\u8c61\u672c\u8eab \u6df1\u62f7\u8d1d\uff1a\u4e0d\u4ec5\u590d\u5236\u5bf9\u8c61\uff0c\u8fd8\u9012\u5f52\u590d\u5236\u5bf9\u8c61\u6240\u5173\u8054\u7684\u5bf9\u8c61","title":"python\u57fa\u7840"},{"location":"python/%E5%9F%BA%E7%A1%80/#python","text":"","title":"Python\u57fa\u7840"},{"location":"python/%E5%9F%BA%E7%A1%80/#1metaclass","text":"\u53c2\u8003\u6587\u7ae0\uff1a https://blog.csdn.net/a2011480169/article/details/87891753 \u5143\u7c7b\u5c31\u662f\u7528\u6765\u521b\u5efa\u7c7b\u7684\u7c7b\uff0cPython\u4e2d\u4e00\u5207\u90fd\u662f\u5bf9\u8c61\uff0c\u5305\u62ec\u7c7b\u4e5f\u662f\u5bf9\u8c61\uff08\u7c7b\u5bf9\u8c61\uff09\uff0c\u7c7b\u5b9e\u4f8b\u5316\u4e4b\u540e\uff0c\u5c31\u53d8\u4e3a\u6211\u4eec\u5e38\u7528\u7684\u5b9e\u4f8b\u5bf9\u8c61\u3002type\u662fPython\u79cd\u9ed8\u8ba4\u7684\u5143\u7c7b\u3002\u65e2\u7136\u5143\u7c7b\u662f\u7528\u6765\u521b\u5efa\u7c7b\u5bf9\u8c61\u7684\uff0c\u90a3\u4e48\u5143\u7c7b\u5c31\u53ef\u4ee5\u901a\u8fc7 __new__ \u548c __init__ \u65b9\u6cd5\u63a7\u5236\u7c7b\u5bf9\u8c61\u7684\u521b\u5efa\u8fc7\u7a0b\u3002 \u5e38\u7528\u4e8e\uff1aORM\u3001\u5355\u4f8b type\u5b9a\u4e49\u7c7b type\u5b9a\u4e49\u7c7b\uff0c\u5206\u522b\u4f20\u5165\u7c7b\u540d\u3001\u7c7b\u7684\u7ee7\u627f\u5bf9\u8c61\u4ee5\u53ca\u7c7b\u7684\u53c2\u6570\u3002 country = 'China' def __init__ ( self , name , age ): self . name = name self . age = age def tell ( self ): print ( ' %s \u7684\u5e74\u9f84\u662f: %s ' % ( self . name , self . age )) Person = type ( 'Person' ,( object ,),{ 'country' : country , '__init__' : __init__ , 'tell' : tell }) print ( Person . __dict__ ) person = Person ( 'wtt' , 25 ) print ( person . __dict__ ) \u81ea\u5b9a\u4e49\u5143\u7c7b \u5229\u7528\u5143\u7c7b\uff0c\u7b2c\u4e00\uff1a\u7c7b\u5fc5\u987b\u6709\u6587\u6863\u6ce8\u91ca,\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u7b2c\u4e8c\uff1a\u5728\u4e00\u4e2a\u7c7b\u5185\u90e8\u5b9a\u4e49\u7684\u6240\u6709\u51fd\u6570\u5fc5\u987b\u6709\u6587\u6863\u6ce8\u91ca,\u4e0d\u80fd\u4e3a\u7a7a\u3002 class DocCheckMetaClass ( type ): \"\"\" 1.\u7c7b\u5fc5\u987b\u6709\u6587\u6863\u6ce8\u91ca,\u4e0d\u80fd\u4e3a\u7a7a 2.\u5728\u4e00\u4e2a\u7c7b\u5185\u90e8\u5b9a\u4e49\u7684\u6240\u6709\u51fd\u6570\u5fc5\u987b\u6709\u6587\u6863\u6ce8\u91ca,\u4e0d\u80fd\u4e3a\u7a7a\u3002 \"\"\" def __init__ ( cls , cls_name , cls_bases , cls_dict : dict ): # \u68c0\u67e5\u7c7b\u7684\u6587\u6863\u6ce8\u91ca if \"__doc__\" not in cls_dict or not cls_dict [ \"__doc__\" ] . strip (): raise Exception ( \"class [ %s ] must have a doc.\" % ( cls_name ,)) # \u68c0\u67e5\u65b9\u6cd5\u662f\u5426\u6709\u6587\u6863\u6ce8\u91ca for k , v in cls_dict . items (): if k . startswith ( \"__\" ): continue if not callable ( v ): continue if not v . __doc__ or not v . __doc__ . strip (): raise Exception ( \"method [ %s ] must have a doc.\" % ( v ,)) super () . __init__ ( cls_name , cls_bases , cls_dict ) class Person ( metaclass = DocCheckMetaClass ): \"\"\"Person\u7c7b\"\"\" def __init__ ( self , name , age ): self . name = name self . age = age def show_info ( self ): \"\"\" \"\"\" print ( \"\u6211\u662f\uff1a %s \uff0c\u4eca\u5e74\uff1a %s \" % ( self . name , self . age ))","title":"1.\u5143\u7c7bmetaclass"},{"location":"python/%E5%9F%BA%E7%A1%80/#2","text":"\u53c2\u8003\u6587\u7ae0\uff1a \u5982\u4f55\u7406\u89e3Python\u4e2d\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3001\u8fed\u4ee3\u5668\u548c\u751f\u6210\u5668 - \u77e5\u4e4e (zhihu.com) Python\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u8fed\u4ee3\u5668\uff0c\u751f\u6210\u5668\u7684\u533a\u522b_LiangJishengBlog-CSDN\u535a\u5ba2_\u53ef\u8fed\u4ee3\u5bf9\u8c61 \u8fed\u4ee3\u5668\u662f\u4e00\u79cd\u6700\u7b80\u5355\u4e5f\u6700\u5e38\u89c1\u7684\u8bbe\u8ba1\u6a21\u5f0f\u3002\u5b83\u53ef\u4ee5\u8ba9\u7528\u6237\u900f\u8fc7\u7279\u5b9a\u7684\u63a5\u53e3\u5de1\u8bbf\u5bb9\u5668\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u800c\u4e0d\u7528\u4e86\u89e3\u5e95\u5c42\u7684\u5b9e\u73b0\u3002 \u8fed\u4ee3\u662f\u6570\u636e\u5904\u7406\u7684\u57fa\u77f3\u3002\u5f53\u5185\u5b58\u4e2d\u653e\u4e0d\u4e0b\u6570\u636e\u96c6\u65f6\uff0c\u6211\u4eec\u8981\u627e\u5230\u4e00\u79cd \u60f0\u6027 \u83b7\u53d6\u6570\u636e\u7684\u65b9\u5f0f\uff0c\u5373\u6309\u9700\u4e00\u6b21\u83b7\u53d6\u4e00\u4e2a\u6570\u636e\u9879\uff0c\u8fd9\u5c31\u662f\u8fed\u4ee3\u5668\u6a21\u5f0f\u3002 \u4e09\u8005\u7684\u5173\u7cfb\u56fe\uff1a \u53ef\u8fed\u4ee3\u5bf9\u8c61\u4ea7\u751f\u8fed\u4ee3\u5668\uff0c\u8fed\u4ee3\u5668\u4e5f\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u751f\u6210\u5668\u662f\u7279\u6b8a\u7684\u8fed\u4ee3\u5668\u3002","title":"2.\u8fed\u4ee3\u5668\u3001\u751f\u6210\u5668\u548c\u53ef\u8fed\u4ee3\u5bf9\u8c61"},{"location":"python/%E5%9F%BA%E7%A1%80/#a","text":"\u6211\u4eec\u90fd\u77e5\u9053\u5e8f\u5217\u662f\u53ef\u8fed\u4ee3\u7684\u3002\u5f53\u89e3\u91ca\u5668\u9700\u8981\u8fed\u4ee3\u5bf9\u8c61x\u65f6\uff0c\u4f1a\u81ea\u52a8\u8c03\u7528iter(x) \u3002 \u5185\u7f6e\u7684iter\u51fd\u6570\u6709\u4ee5\u4e0b\u4f5c\u7528\uff1a \u68c0\u67e5\u5bf9\u8c61\u662f\u5426\u5b9e\u73b0\u4e86 __iter__ \u65b9\u6cd5\uff0c\u5982\u679c\u5b9e\u73b0\u4e86\u5c31\u8c03\u7528\u5b83\uff0c\u83b7\u5f97\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002 \u5982\u679c\u6ca1\u6709\u5b9e\u73b0 __iter__ \u65b9\u6cd5\uff0c\u4f46\u662f\u5b9e\u73b0\u4e86 __getitem__ \u65b9\u6cd5\uff0cpython\u4f1a\u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u5c1d\u8bd5\u6309\u987a\u5e8f\uff08\u4ece\u7d22\u5f150\u5f00\u59cb\uff09\u83b7\u53d6\u5143\u7d20\u3002 \u5982\u679c\u5c1d\u8bd5\u5931\u8d25\uff0cpython\u4f1a\u629b\u51fa TypeError \u5f02\u5e38\uff0c\u901a\u5e38\u4f1a\u63d0\u793a\"C object is not iterable\"\uff0c\u5176\u4e2dC\u662f\u76ee\u6807\u5bf9\u8c61\u6240\u5c5e\u7684\u7c7b\u3002 \u4f7f\u7528iter\u5b9e\u73b0\u53ef\u8fed\u4ee3\u5bf9\u8c61 class MyList : def __init__ ( self , data ): self . data = data def __iter__ ( self ): # \u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668 return MyListIterator ( self . data ) class MyListIterator : def __init__ ( self , data ): self . data = data self . index = 0 def __iter__ ( self ): return self def __next__ ( self ): try : ret = self . data [ self . index ] except IndexError : raise StopIteration () self . index += 1 return ret a = MyList ([ 1 , 2 , 3 , 4 ]) for x in a : print ( x ) \u4f7f\u7528getitem\u5b9e\u73b0\u53ef\u8fed\u4ee3\u5bf9\u8c61 class MyList2 : def __init__ ( self , data ): self . data = data def __getitem__ ( self , index ): return self . data [ index ] for x in MyList2 ([ 3 , 4 , 5 , 6 ]): print ( x )","title":"a) \u53ef\u8fed\u4ee3\u5bf9\u8c61"},{"location":"python/%E5%9F%BA%E7%A1%80/#b","text":"\u4f7f\u7528iter\u5185\u7f6e\u51fd\u6570\u53ef\u4ee5\u83b7\u53d6\u8fed\u4ee3\u5668\u5bf9\u8c61\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u5bf9\u8c61\u5b9e\u73b0\u4e86\u80fd\u8fd4\u56de\u8fed\u4ee3\u5668\u7684 __iter__ \u65b9\u6cd5\uff0c\u90a3\u4e48\u5bf9\u8c61\u5c31\u662f\u53ef\u8fed\u4ee3\u7684\uff0c\u5e8f\u5217\u90fd\u53ef\u4ee5\u8fed\u4ee3\uff1b\u5b9e\u73b0\u4e86 __getitem__ \u65b9\u6cd5\uff0c\u800c\u4e14\u5176\u53c2\u6570\u662f\u4ece\u96f6\u5f00\u59cb\u7684\u7d22\u5f15\uff0c\u8fd9\u79cd\u5bf9\u8c61\u4e5f\u662f\u53ef\u8fed\u4ee3\u7684\u3002 \u56e0\u6b64\u53ef\u4ee5\u660e\u786e \u53ef\u8fed\u4ee3\u5bf9\u8c61 \u548c \u8fed\u4ee3\u5668 \u4e4b\u95f4\u7684\u5173\u7cfb\uff1a Python\u4ece\u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61\u4e2d\u83b7\u53d6\u8fed\u4ee3\u5668\u3002 \u6807\u51c6\u7684\u8fed\u4ee3\u5668\u63a5\u53e3\u6709\u4e24\u4e2a\u65b9\u6cd5\uff0c\u5373\uff1a __next__ :\u8fd4\u56de\u4e0b\u4e00\u4e2a\u53ef\u7528\u5143\u7d20\uff0c\u5982\u679c\u6ca1\u6709\u5143\u7d20\uff0c\u629b\u51faStopIteration\u5f02\u5e38 __iter__ :\u8fd4\u56deself\uff0c\u4ee5\u4fbf\u5728\u5e94\u8be5\u4f7f\u7528\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5730\u65b9\u4f7f\u7528\u8fed\u4ee3\u5668\uff0c\u6bd4\u5982for\u5faa\u73af\u4e2d\u3002 \u6784\u5efa \u53ef\u8fed\u4ee3\u5bf9\u8c61 \u548c \u8fed\u4ee3\u5668 \u65f6\u7ecf\u5e38\u4f1a\u51fa\u73b0\u9519\u8bef\uff0c\u539f\u56e0\u662f\u6df7\u6dc6\u4e86\u4e24\u8005\u3002\u8981\u77e5\u9053\uff0c \u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61 \u6709\u4e2a __iter__ \u65b9\u6cd5\uff0c \u8c03\u7528\u8be5\u65b9\u6cd5\u6bcf\u6b21\u90fd\u5b9e\u4f8b\u5316\u4e00\u4e2a\u65b0\u7684\u8fed\u4ee3\u5668* *\uff1b\u800c \u8fed\u4ee3\u5668 \u8981\u5b9e\u73b0 __next__ \u65b9\u6cd5\uff0c\u8fd4\u56de\u5355\u4e2a\u5143\u7d20\uff0c\u6b64\u5916\u8fd8\u8981\u5b9e\u73b0 __iter__ \u65b9\u6cd5\uff0c\u8fd4\u56de\u8fed\u4ee3\u5668\u672c\u8eab(self)\uff0c\u5982\u56fe\u3002\u56e0\u6b64\uff0c \u8fed\u4ee3\u5668 \u53ef\u4ee5\u8fed\u4ee3\uff0c\u4f46\u662f \u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61**\u4e0d\u662f\u8fed\u4ee3\u5668\u3002","title":"b) \u8fed\u4ee3\u5668"},{"location":"python/%E5%9F%BA%E7%A1%80/#c","text":"\u5728Python\u4e2d\u521b\u5efa\u8fed\u4ee3\u5668\u6700\u65b9\u4fbf\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u751f\u6210\u5668\u3002\u751f\u6210\u5668\u4e5f\u662f\u8fed\u4ee3\u5668\u3002\u751f\u6210\u5668\u7684\u8bed\u6cd5\u7c7b\u4f3c\u4e8e\u51fd\u6570\uff0c\u4f46\u662f\u4e0d\u8fd4\u56de\u503c\u3002\u4e3a\u4e86\u663e\u793a\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u4f1a\u4f7f\u7528yield\u8bed\u53e5\u3002\u53ea\u8981Python\u51fd\u6570\u7684\u5b9a\u4e49\u4f53\u4e2d\u6709yield\u5173\u952e\u5b57\uff0c\u8be5\u51fd\u6570\u5c31\u662f\u751f\u6210\u5668\u51fd\u6570\u3002\u8c03\u7528\u751f\u6210\u5668\u51fd\u6570\u65f6\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61\u3002 \u751f\u6210\u5668\u51fd\u6570 def gen_123 (): # \u53ea\u8981Python\u4ee3\u7801\u4e2d\u5305\u542byield\uff0c\u8be5\u51fd\u6570\u5c31\u662f\u751f\u6210\u5668\u51fd\u6570 yield 1 #\u751f\u6210\u5668\u51fd\u6570\u7684\u5b9a\u4e49\u4f53\u4e2d\u901a\u5e38\u90fd\u6709\u5faa\u73af\uff0c\u4e0d\u8fc7\u8fd9\u4e0d\u662f\u5fc5\u8981\u6761\u4ef6\uff1b\u6b64\u5904\u91cd\u590d\u4f7f\u7528\u4e863\u6b21yield yield 2 yield 3 if __name__ == '__main__' : print ( gen_123 ) # \u53ef\u4ee5\u770b\u51fagen_123\u662f\u51fd\u6570\u5bf9\u8c61 # <function gen_123 at 0x10be19> print ( gen_123 ()) # \u51fd\u6570\u8c03\u7528\u65f6\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61 # <generator object gen_123 at 0x10be31> for i in gen_123 (): # \u751f\u6210\u5668\u662f\u8fed\u4ee3\u5668\uff0c\u4f1a\u751f\u6210\u4f20\u7ed9yield\u5173\u952e\u5b57\u7684\u8868\u8fbe\u5f0f\u7684\u503c print ( i ) # 1 # 2 # 3 g = gen_123 () # \u4e3a\u4e86\u4ed4\u7ec6\u68c0\u67e5\uff0c\u628a\u751f\u6210\u5668\u5bf9\u8c61\u8d4b\u503c\u7ed9g print ( next ( g )) # 1 print ( next ( g )) # 2 print ( next ( g )) # 3 print ( next ( g )) # \u751f\u6210\u5668\u51fd\u6570\u7684\u5b9a\u4e49\u4f53\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u751f\u6210\u5668\u5bf9\u8c61\u4f1a\u629b\u51fa\u5f02\u5e38\u3002 # Traceback (most recent call last): # File \"test.py\", line 17, in <module> # print(next(g)) # StopIteration \u751f\u6210\u5668\u8868\u8fbe\u5f0f In [ 1 ]: def gen_AB (): # 1 ... : print ( 'start' ) ... : yield 'A' ... : print ( 'continue' ) ... : yield 'B' ... : print ( 'end.' ) ... : In [ 2 ]: res1 = [ x * 3 for x in gen_AB ()] # 2 start continue end . In [ 3 ]: for i in res1 (): # 3 ... : print ( '-->' , i ) ... : AAA BBB In [ 4 ]: res2 = ( x * 3 for x in gen_AB ()) # 4 In [ 5 ]: res2 # 5 < generator object < genexpr > at 0x106a07620 > In [ 6 ]: for i in res2 (): # 6 ... : print ( '-->' , i ) ... : start --> A continue --> B end . \u60f0\u6027\u8ba1\u7b97 def fibonacci (): a = 0 b = 1 while True : yield a future = a + b a = b b = future","title":"c) \u751f\u6210\u5668"},{"location":"python/%E5%9F%BA%E7%A1%80/#4","text":"\u7c7b\u5c5e\u6027\u548c\u5b9e\u4f8b\u5c5e\u6027\u9700\u8981\u641e\u6e05\u695a __dict__ \u5c5e\u6027\uff0c\u5b9e\u4f8b\u548c\u7c7b\u5c5e\u6027\u90fd\u4fdd\u5b58\u5728 __dict__ \u4e2d\u3002\u641e\u6e05\u695a\u8fd9\u70b9\uff0c\u5c31\u80fd\u770b\u660e\u767d\u4e0b\u9762\u7684\u4f8b\u5b50\u3002 In [ 1 ]: class Test ( object ): ... : num_of_instance = 0 ... : def __init__ ( self , name ): ... : self . name = name ... : Test . num_of_instance += 1 ... : In [ 2 ]: Test . num_of_instance Out [ 2 ]: 0 In [ 3 ]: t1 = Test ( 'jack' ) In [ 4 ]: Test . num_of_instance Out [ 4 ]: 1 In [ 5 ]: t2 = Test ( 'lucy' ) In [ 6 ]: Test . num_of_instance Out [ 6 ]: 2 In [ 7 ]: t1 . num_of_instance Out [ 7 ]: 2 In [ 8 ]: t2 . num_of_instance Out [ 8 ]: 2 In [ 9 ]: class Person : ... : name = [] ... : In [ 10 ]: p1 = Person () In [ 11 ]: p2 = Person () In [ 12 ]: p1 . name . append ( 1 ) In [ 13 ]: print ( p1 . name , p2 . name ) [ 1 ] [ 1 ] In [ 14 ]: print ( Person . name ) [ 1 ] In [ 70 ]: class Student : ... : _name = \"xxx\" ... : ... : def __init__ ( self ): ... : self . _age = 10 ... : ... : ... : a = Student () ... : b = Student () ... : ... : print ( a . _name , b . _name , Student . _name ) ... : ... : a . _name = \"\u6211\u662fa\" ... : print ( a . _name , b . _name , Student . _name ) ... : ... : Student . _name = \"\u6211\u662f\u5b66\u751f\" ... : print ( a . _name , b . _name , Student . _name ) xxx xxx xxx \u6211\u662fa xxx xxx \u6211\u662fa \u6211\u662f\u5b66\u751f \u6211\u662f\u5b66\u751f","title":"4.\u7c7b\u53d8\u91cf\u3001\u5b9e\u4f8b\u53d8\u91cf"},{"location":"python/%E5%9F%BA%E7%A1%80/#5gil","text":"\u53c2\u8003\uff1a Python GIL\u5168\u5c40\u89e3\u91ca\u5668\u9501\u8be6\u89e3\uff08\u6df1\u5ea6\u5256\u6790\uff09 (biancheng.net) Python\u7684\u5168\u5c40\u89e3\u91ca\u5668\u9501\uff08GIL\uff09 - \u7b80\u4e66 (jianshu.com) python GIL\u5168\u5c40\u89e3\u91ca\u5668\u9501\u7684\u7406\u89e3_feilzhang\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_gil\u5168\u5c40\u89e3\u91ca\u5668\u9501 \u6df1\u5165\u7406\u89e3Python\u4e2d\u7684GIL\uff08\u5168\u5c40\u89e3\u91ca\u5668\u9501\uff09\u3002 - \u77e5\u4e4e (zhihu.com) \u591a\u7ebf\u7a0b\u4e0b\u6bcf\u4e2a\u7ebf\u7a0b\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u90fd\u9700\u8981\u5148\u83b7\u53d6GIL\uff0c\u4fdd\u8bc1\u540c\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5728\u8fd0\u884c\u3002\u9996\u5148\u9700\u8981\u660e\u786e\u7684\u4e00\u70b9\u662fGIL\u5e76\u4e0d\u662fPython\u7684\u7279\u6027\uff0c\u5b83\u662f\u5728\u5b9e\u73b0Python\u89e3\u6790\u5668(CPython)\u65f6\u6240\u5f15\u5165\u7684\u4e00\u4e2a\u6982\u5ff5\u3002GIL\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\uff0cGIL\u662f\u89e3\u91ca\u5668\u5c42\u9762\u7684\uff0c\u800c\u89e3\u91ca\u5668\u5bf9\u5e94\u7684\u662f\u5b57\u8282\u7801\u7684\u6267\u884c\uff0c\u4ee3\u7801\u4e2d\u7b80\u5355\u7684\u4e00\u4e2a\u8d4b\u503c\u8bed\u53e5\uff0c\u8f6c\u4e3a\u5b57\u8282\u7801\u4e4b\u540e\u4f1a\u53d8\u4e3a\u82e5\u5e72\u4e2a\u6307\u4ee4\uff0c\u5982\u679c\u8fd9\u82e5\u5e72\u4e2a\u6307\u4ee4\u6267\u884c\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u4e86\u7ebf\u7a0b\u5207\u6362\uff0c\u90a3\u5c31\u65e0\u6cd5\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\u4e86\u3002","title":"5.GIL\u5168\u5c40\u89e3\u91ca\u5668\u9501"},{"location":"python/%E5%9F%BA%E7%A1%80/#6python","text":"\u53c2\u8003\uff1a python\u57fa\u7840\uff1a12.\u9762\u5411\u5bf9\u8c61\u4e4b\u7ee7\u627f - \u77e5\u4e4e (zhihu.com)","title":"6.Python\u7ee7\u627f"},{"location":"python/%E5%9F%BA%E7%A1%80/#7python","text":"\u53c2\u8003\uff1a Python\u5783\u573e\u56de\u6536\u673a\u5236\u8be6\u89e3_lighting-CSDN\u535a\u5ba2_python\u5783\u573e\u56de\u6536\u673a\u5236 Python\u5783\u573e\u56de\u6536\u673a\u5236\uff01\u975e\u5e38\u5b9e\u7528 - \u77e5\u4e4e (zhihu.com) Python-Interview-Bible/Python\u9762\u8bd5\u5b9d\u5178-\u57fa\u7840\u7bc7-2020.md at master \u00b7 jackfrued/Python-Interview-Bible (github.com) Python GC \u4e3b\u8981\u4f7f\u7528\u5f15\u7528\u8ba1\u6570\uff08reference counting\uff09\u6765\u8ddf\u8e2a\u548c\u56de\u6536\u5783\u573e\u3002\u5728\u5f15\u7528\u8ba1\u6570\u7684\u57fa\u7840\u4e0a\uff0c\u901a\u8fc7\u201c\u6807\u8bb0-\u6e05\u9664\u201d\uff08mark and sweep\uff09\u89e3\u51b3\u5bb9\u5668\u5bf9\u8c61\u53ef\u80fd\u4ea7\u751f\u7684\u5faa\u73af\u5f15\u7528\u95ee\u9898\uff0c\u901a\u8fc7\u201c\u5206\u4ee3\u56de\u6536\u201d\uff08generation collection\uff09\u4ee5\u7a7a\u95f4\u6362\u65f6\u95f4\u7684\u65b9\u6cd5\u63d0\u9ad8\u5783\u573e\u56de\u6536\u6548\u7387\u3002","title":"7.Python\u5783\u573e\u56de\u6536\u673a\u5236"},{"location":"python/%E5%9F%BA%E7%A1%80/#8python2python3","text":"\u53c2\u8003\uff1a http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/ https://www.zhihu.com/question/19698598","title":"8.Python2\u548cPython3\u7684\u533a\u522b"},{"location":"python/%E5%9F%BA%E7%A1%80/#9__new____init__","text":"\u53c2\u8003\uff1a https://blog.csdn.net/weixin_37579123/article/details/89515577","title":"9.__new__\u548c__init__\u65b9\u6cd5"},{"location":"python/%E5%9F%BA%E7%A1%80/#10python","text":"\u53c2\u8003\uff1a Python-Interview-Bible/Python\u9762\u8bd5\u5b9d\u5178-\u57fa\u7840\u7bc7-2020.md at master \u00b7 jackfrued/Python-Interview-Bible (github.com) \u6d45\u62f7\u8d1d\uff1a\u53ea\u62f7\u8d1d\u5bf9\u8c61\u672c\u8eab \u6df1\u62f7\u8d1d\uff1a\u4e0d\u4ec5\u590d\u5236\u5bf9\u8c61\uff0c\u8fd8\u9012\u5f52\u590d\u5236\u5bf9\u8c61\u6240\u5173\u8054\u7684\u5bf9\u8c61","title":"10.Python\u6df1\u62f7\u8d1d\u548c\u6d45\u62f7\u8d1d"},{"location":"python/%E9%A2%98%E7%9B%AE/","text":"1.\u7ee7\u627f\u548csuper \u00b6 Python-Interview-Bible/Python\u9762\u8bd5\u5b9d\u5178-\u57fa\u7840\u7bc7-2020.md at master \u00b7 jackfrued/Python-Interview-Bible (github.com) 2.\u95ed\u5305\u3001\u751f\u6210\u5668\u3001\u504f\u51fd\u6570 \u00b6 Python-Interview-Bible/Python\u9762\u8bd5\u5b9d\u5178-\u57fa\u7840\u7bc7-2020.md at master \u00b7 jackfrued/Python-Interview-Bible (github.com) 3.\u5e26\u53c2\u6570\u88c5\u9970\u5668 \u00b6 Python-Interview-Bible/Python\u9762\u8bd5\u5b9d\u5178-\u57fa\u7840\u7bc7-2020.md at master \u00b7 jackfrued/Python-Interview-Bible (github.com) \u8981\u6c42 \uff1a\u6709\u4e00\u4e2a\u901a\u8fc7\u7f51\u7edc\u83b7\u53d6\u6570\u636e\u7684\u51fd\u6570\uff08\u53ef\u80fd\u4f1a\u56e0\u4e3a\u7f51\u7edc\u539f\u56e0\u51fa\u73b0\u5f02\u5e38\uff09\uff0c\u5199\u4e00\u4e2a\u88c5\u9970\u5668\u8ba9\u8fd9\u4e2a\u51fd\u6570\u5728\u51fa\u73b0\u6307\u5b9a\u5f02\u5e38\u65f6\u53ef\u4ee5\u91cd\u8bd5\u6307\u5b9a\u7684\u6b21\u6570\uff0c\u5e76\u5728\u6bcf\u6b21\u91cd\u8bd5\u4e4b\u524d\u968f\u673a\u5ef6\u8fdf\u4e00\u6bb5\u65f6\u95f4\uff0c\u6700\u957f\u5ef6\u8fdf\u65f6\u95f4\u53ef\u4ee5\u901a\u8fc7\u53c2\u6570\u8fdb\u884c\u63a7\u5236\u3002 import functools import time import random def retry ( times , cnt , errors ): def wrapper ( f ): @functools . wraps ( f ) def wrapped ( * args , ** kwargs ): for _ in range ( cnt ): try : return f ( * args , ** kwargs ) except errors as e : print ( e ) time . sleep ( random . random () * times ) return wrapped return wrapper @retry ( 3 , 3 , ( Exception ,)) def test (): raise Exception ( \"ashdja\" ) return 111 print ( test ())","title":"\u9898\u76ee"},{"location":"python/%E9%A2%98%E7%9B%AE/#1super","text":"Python-Interview-Bible/Python\u9762\u8bd5\u5b9d\u5178-\u57fa\u7840\u7bc7-2020.md at master \u00b7 jackfrued/Python-Interview-Bible (github.com)","title":"1.\u7ee7\u627f\u548csuper"},{"location":"python/%E9%A2%98%E7%9B%AE/#2","text":"Python-Interview-Bible/Python\u9762\u8bd5\u5b9d\u5178-\u57fa\u7840\u7bc7-2020.md at master \u00b7 jackfrued/Python-Interview-Bible (github.com)","title":"2.\u95ed\u5305\u3001\u751f\u6210\u5668\u3001\u504f\u51fd\u6570"},{"location":"python/%E9%A2%98%E7%9B%AE/#3","text":"Python-Interview-Bible/Python\u9762\u8bd5\u5b9d\u5178-\u57fa\u7840\u7bc7-2020.md at master \u00b7 jackfrued/Python-Interview-Bible (github.com) \u8981\u6c42 \uff1a\u6709\u4e00\u4e2a\u901a\u8fc7\u7f51\u7edc\u83b7\u53d6\u6570\u636e\u7684\u51fd\u6570\uff08\u53ef\u80fd\u4f1a\u56e0\u4e3a\u7f51\u7edc\u539f\u56e0\u51fa\u73b0\u5f02\u5e38\uff09\uff0c\u5199\u4e00\u4e2a\u88c5\u9970\u5668\u8ba9\u8fd9\u4e2a\u51fd\u6570\u5728\u51fa\u73b0\u6307\u5b9a\u5f02\u5e38\u65f6\u53ef\u4ee5\u91cd\u8bd5\u6307\u5b9a\u7684\u6b21\u6570\uff0c\u5e76\u5728\u6bcf\u6b21\u91cd\u8bd5\u4e4b\u524d\u968f\u673a\u5ef6\u8fdf\u4e00\u6bb5\u65f6\u95f4\uff0c\u6700\u957f\u5ef6\u8fdf\u65f6\u95f4\u53ef\u4ee5\u901a\u8fc7\u53c2\u6570\u8fdb\u884c\u63a7\u5236\u3002 import functools import time import random def retry ( times , cnt , errors ): def wrapper ( f ): @functools . wraps ( f ) def wrapped ( * args , ** kwargs ): for _ in range ( cnt ): try : return f ( * args , ** kwargs ) except errors as e : print ( e ) time . sleep ( random . random () * times ) return wrapped return wrapper @retry ( 3 , 3 , ( Exception ,)) def test (): raise Exception ( \"ashdja\" ) return 111 print ( test ())","title":"3.\u5e26\u53c2\u6570\u88c5\u9970\u5668"},{"location":"python/%E9%AB%98%E7%BA%A7/","text":"1.\u5355\u4f8b\u6a21\u5f0f \u00b6 \u8981\u6ce8\u610f\uff1a1.\u591a\u4e2a\u7c7b\u516c\u7528\u5b9e\u73b0\u5355\u4f8b\u7684\u65b9\u5f0f\u9700\u8981\u5c06 _instance \u5c5e\u6027\u6539\u4e3a\u5b57\u5178\uff1b2.\u5355\u4f8b\u6a21\u5f0f\u7684\u7ebf\u7a0b\u5b89\u5168\u95ee\u9898\u3002 a) \u4f7f\u7528new\u65b9\u6cd5 class SingleTon : def __new__ ( cls , * args , ** kwargs ): if not hasattr ( cls , \"_instance\" ): cls . _instance = super ( SingleTon , cls ) . __new__ ( cls , * args , ** kwargs ) return cls . _instance s1 = SingleTon () s2 = SingleTon () print ( id ( s1 ), id ( s2 )) # 1566005235664 1566005235664 b) \u4f7f\u7528\u88c5\u9970\u5668 import functools def singleton ( cls ): _instance = {} @functools . wraps ( cls ) def wrapped ( * args , ** kwargs ): if cls not in _instance : _instance [ cls ] = cls ( * args , ** kwargs ) return _instance [ cls ] return wrapped @singleton class MyClass : pass s1 = MyClass () s2 = MyClass () print ( id ( s1 ), id ( s2 )) c) \u4f7f\u7528Python\u81ea\u5e26\u6a21\u5757 # use_module.py class SingleTon ( object ): def __init__ ( self , val ): self . val = val single = SingleTon ( 2 ) # test_module.py from use_module import single a = single b = single print ( a . val , b . val ) print ( a is b ) a . val = 233 print ( a . val , b . val ) d) \u4f7f\u7528metaclass # SingleTon # new\u8fd4\u56deMyClass # init\u521d\u59cb\u5316MyClass\u7684\u5c5e\u6027 # call\u7684\u65f6\u5019MyClass\u793a\u4f8b\u5316\uff0c\u4e5f\u5c31\u662fMyClass() class SingleTon ( type ): def __init__ ( cls , cls_name , cls_bases , cls_dict ): # \u7ed9cls\u52a0\u4e0a_instance\u5c5e\u6027 if not hasattr ( cls , \"_instance\" ): cls . _instance = None super ( SingleTon , cls ) . __init__ ( cls_name , cls_bases , cls_dict ) def __call__ ( cls , * args , ** kwargs ): if cls . _instance is None : cls . _instance = super ( SingleTon , cls ) . __call__ ( * args , ** kwargs ) return cls . _instance class MyClass ( metaclass = SingleTon ): pass s1 = MyClass () s2 = MyClass () print ( id ( s1 ), id ( s2 )) 2.\u88c5\u9970\u5668 \u00b6 \u65b9\u6cd5\u4e00\uff1a\u7528\u51fd\u6570\u5b9e\u73b0\u88c5\u9970\u5668\u3002 from functools import wraps from time import time def record_time ( func ): @wraps ( func ) def wrapper ( * args , ** kwargs ): start = time () result = func ( * args , ** kwargs ) print ( f ' { func . __name__ } \u6267\u884c\u65f6\u95f4: { time () - start } \u79d2' ) return result return wrapper \u65b9\u6cd5\u4e8c\uff1a\u7528\u7c7b\u5b9e\u73b0\u88c5\u9970\u5668\u3002\u7c7b\u6709 __call__ \u9b54\u672f\u65b9\u6cd5\uff0c\u8be5\u7c7b\u5bf9\u8c61\u5c31\u662f\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u53ef\u4ee5\u5f53\u505a\u88c5\u9970\u5668\u6765\u4f7f\u7528\u3002 from functools import wraps from time import time class Record : def __call__ ( self , func ): @wraps ( func ) def wrapper ( * args , ** kwargs ): start = time () result = func ( * args , ** kwargs ) print ( f ' { func . __name__ } \u6267\u884c\u65f6\u95f4: { time () - start } \u79d2' ) return result return wrapper \u8bf4\u660e \uff1a\u88c5\u9970\u5668\u53ef\u4ee5\u7528\u6765\u88c5\u9970\u7c7b\u6216\u51fd\u6570\uff0c\u4e3a\u5176\u63d0\u4f9b\u989d\u5916\u7684\u80fd\u529b\uff0c\u5c5e\u4e8e\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\u7684 \u4ee3\u7406\u6a21\u5f0f \u3002 \u6269\u5c55 \uff1a \u88c5\u9970\u5668\u672c\u8eab\u4e5f\u53ef\u4ee5\u53c2\u6570\u5316 \uff0c\u4f8b\u5982\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5982\u679c\u4e0d\u5e0c\u671b\u5728\u7ec8\u7aef\u4e2d\u663e\u793a\u51fd\u6570\u7684\u6267\u884c\u65f6\u95f4\u800c\u662f\u5e0c\u671b\u7531\u8c03\u7528\u8005\u6765\u51b3\u5b9a\u5982\u4f55\u8f93\u51fa\u51fd\u6570\u7684\u6267\u884c\u65f6\u95f4\uff0c\u53ef\u4ee5\u901a\u8fc7\u53c2\u6570\u5316\u88c5\u9970\u5668\u7684\u65b9\u5f0f\u6765\u505a\u5230\uff0c\u4ee3\u7801\u5982\u4e0b\u6240\u793a\u3002 from functools import wraps from time import time def record_time ( output ): \"\"\"\u53ef\u4ee5\u53c2\u6570\u5316\u7684\u88c5\u9970\u5668\"\"\" def decorate ( func ): @wraps ( func ) def wrapper ( * args , ** kwargs ): start = time () result = func ( * args , ** kwargs ) output ( func . __name__ , time () - start ) return result return wrapper return decorate 3.\u504f\u51fd\u6570 \u00b6 \u53c2\u8003\uff1a https://blog.csdn.net/deng1456694385/article/details/87557058 https://blog.csdn.net/zhongbeida_xue/article/details/78973936","title":"python\u6280\u5de7"},{"location":"python/%E9%AB%98%E7%BA%A7/#1","text":"\u8981\u6ce8\u610f\uff1a1.\u591a\u4e2a\u7c7b\u516c\u7528\u5b9e\u73b0\u5355\u4f8b\u7684\u65b9\u5f0f\u9700\u8981\u5c06 _instance \u5c5e\u6027\u6539\u4e3a\u5b57\u5178\uff1b2.\u5355\u4f8b\u6a21\u5f0f\u7684\u7ebf\u7a0b\u5b89\u5168\u95ee\u9898\u3002 a) \u4f7f\u7528new\u65b9\u6cd5 class SingleTon : def __new__ ( cls , * args , ** kwargs ): if not hasattr ( cls , \"_instance\" ): cls . _instance = super ( SingleTon , cls ) . __new__ ( cls , * args , ** kwargs ) return cls . _instance s1 = SingleTon () s2 = SingleTon () print ( id ( s1 ), id ( s2 )) # 1566005235664 1566005235664 b) \u4f7f\u7528\u88c5\u9970\u5668 import functools def singleton ( cls ): _instance = {} @functools . wraps ( cls ) def wrapped ( * args , ** kwargs ): if cls not in _instance : _instance [ cls ] = cls ( * args , ** kwargs ) return _instance [ cls ] return wrapped @singleton class MyClass : pass s1 = MyClass () s2 = MyClass () print ( id ( s1 ), id ( s2 )) c) \u4f7f\u7528Python\u81ea\u5e26\u6a21\u5757 # use_module.py class SingleTon ( object ): def __init__ ( self , val ): self . val = val single = SingleTon ( 2 ) # test_module.py from use_module import single a = single b = single print ( a . val , b . val ) print ( a is b ) a . val = 233 print ( a . val , b . val ) d) \u4f7f\u7528metaclass # SingleTon # new\u8fd4\u56deMyClass # init\u521d\u59cb\u5316MyClass\u7684\u5c5e\u6027 # call\u7684\u65f6\u5019MyClass\u793a\u4f8b\u5316\uff0c\u4e5f\u5c31\u662fMyClass() class SingleTon ( type ): def __init__ ( cls , cls_name , cls_bases , cls_dict ): # \u7ed9cls\u52a0\u4e0a_instance\u5c5e\u6027 if not hasattr ( cls , \"_instance\" ): cls . _instance = None super ( SingleTon , cls ) . __init__ ( cls_name , cls_bases , cls_dict ) def __call__ ( cls , * args , ** kwargs ): if cls . _instance is None : cls . _instance = super ( SingleTon , cls ) . __call__ ( * args , ** kwargs ) return cls . _instance class MyClass ( metaclass = SingleTon ): pass s1 = MyClass () s2 = MyClass () print ( id ( s1 ), id ( s2 ))","title":"1.\u5355\u4f8b\u6a21\u5f0f"},{"location":"python/%E9%AB%98%E7%BA%A7/#2","text":"\u65b9\u6cd5\u4e00\uff1a\u7528\u51fd\u6570\u5b9e\u73b0\u88c5\u9970\u5668\u3002 from functools import wraps from time import time def record_time ( func ): @wraps ( func ) def wrapper ( * args , ** kwargs ): start = time () result = func ( * args , ** kwargs ) print ( f ' { func . __name__ } \u6267\u884c\u65f6\u95f4: { time () - start } \u79d2' ) return result return wrapper \u65b9\u6cd5\u4e8c\uff1a\u7528\u7c7b\u5b9e\u73b0\u88c5\u9970\u5668\u3002\u7c7b\u6709 __call__ \u9b54\u672f\u65b9\u6cd5\uff0c\u8be5\u7c7b\u5bf9\u8c61\u5c31\u662f\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u53ef\u4ee5\u5f53\u505a\u88c5\u9970\u5668\u6765\u4f7f\u7528\u3002 from functools import wraps from time import time class Record : def __call__ ( self , func ): @wraps ( func ) def wrapper ( * args , ** kwargs ): start = time () result = func ( * args , ** kwargs ) print ( f ' { func . __name__ } \u6267\u884c\u65f6\u95f4: { time () - start } \u79d2' ) return result return wrapper \u8bf4\u660e \uff1a\u88c5\u9970\u5668\u53ef\u4ee5\u7528\u6765\u88c5\u9970\u7c7b\u6216\u51fd\u6570\uff0c\u4e3a\u5176\u63d0\u4f9b\u989d\u5916\u7684\u80fd\u529b\uff0c\u5c5e\u4e8e\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\u7684 \u4ee3\u7406\u6a21\u5f0f \u3002 \u6269\u5c55 \uff1a \u88c5\u9970\u5668\u672c\u8eab\u4e5f\u53ef\u4ee5\u53c2\u6570\u5316 \uff0c\u4f8b\u5982\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5982\u679c\u4e0d\u5e0c\u671b\u5728\u7ec8\u7aef\u4e2d\u663e\u793a\u51fd\u6570\u7684\u6267\u884c\u65f6\u95f4\u800c\u662f\u5e0c\u671b\u7531\u8c03\u7528\u8005\u6765\u51b3\u5b9a\u5982\u4f55\u8f93\u51fa\u51fd\u6570\u7684\u6267\u884c\u65f6\u95f4\uff0c\u53ef\u4ee5\u901a\u8fc7\u53c2\u6570\u5316\u88c5\u9970\u5668\u7684\u65b9\u5f0f\u6765\u505a\u5230\uff0c\u4ee3\u7801\u5982\u4e0b\u6240\u793a\u3002 from functools import wraps from time import time def record_time ( output ): \"\"\"\u53ef\u4ee5\u53c2\u6570\u5316\u7684\u88c5\u9970\u5668\"\"\" def decorate ( func ): @wraps ( func ) def wrapper ( * args , ** kwargs ): start = time () result = func ( * args , ** kwargs ) output ( func . __name__ , time () - start ) return result return wrapper return decorate","title":"2.\u88c5\u9970\u5668"},{"location":"python/%E9%AB%98%E7%BA%A7/#3","text":"\u53c2\u8003\uff1a https://blog.csdn.net/deng1456694385/article/details/87557058 https://blog.csdn.net/zhongbeida_xue/article/details/78973936","title":"3.\u504f\u51fd\u6570"},{"location":"redis/%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/","text":"\u4f53\u9a8c Redis \u9700\u8981\u4f7f\u7528 Linux \u6216\u8005 Mac \u73af\u5883\uff0c\u5982\u679c\u662f Windows \u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u865a\u62df\u673a\u3002\u4e3b\u8981\u65b9\u5f0f\u6709\u56db\u79cd\uff1a \u4f7f\u7528 Docker \u5b89\u88c5\u3002 \u901a\u8fc7 Github \u6e90\u7801\u7f16\u8bd1\u3002 \u76f4\u63a5\u5b89\u88c5 apt-get install(Ubuntu) \u3001 yum install(RedHat) \u6216\u8005 brew install(Mac) \u3002 \u5982\u679c\u61d2\u4e8e\u5b89\u88c5\u64cd\u4f5c\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7f51\u9875\u7248\u7684 Web Redis \u76f4\u63a5\u4f53\u9a8c\u3002 Docker \u5b89\u88c5 \u00b6 # \u62c9\u53d6 redis \u955c\u50cf > docker pull redis # \u8fd0\u884c redis \u5bb9\u5668 > docker run --name myredis -d -p6379:6379 redis # \u6267\u884c\u5bb9\u5668\u4e2d\u7684 redis-cli\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u547d\u4ee4\u884c\u64cd\u4f5c redis > docker exec -it myredis redis-cli Github \u6e90\u7801\u7f16\u8bd1\u5b89\u88c5 \u00b6 # \u4e0b\u8f7d\u6e90\u7801 > git clone --branch 2 .8 --depth 1 git@github.com:antirez/redis.git > cd redis # \u7f16\u8bd1 > make > cd src # \u8fd0\u884c\u670d\u52a1\u5668\uff0cdaemonize\u8868\u793a\u5728\u540e\u53f0\u8fd0\u884c > ./redis-server --daemonize yes # \u8fd0\u884c\u547d\u4ee4\u884c > ./redis-cli \u76f4\u63a5\u5b89\u88c5 \u00b6 # mac > brew install redis # ubuntu > apt-get install redis # redhat > yum install redis # \u8fd0\u884c\u5ba2\u6237\u7aef > redis-cli","title":"\u5b89\u88c5\u4f7f\u7528"},{"location":"redis/%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/#docker","text":"# \u62c9\u53d6 redis \u955c\u50cf > docker pull redis # \u8fd0\u884c redis \u5bb9\u5668 > docker run --name myredis -d -p6379:6379 redis # \u6267\u884c\u5bb9\u5668\u4e2d\u7684 redis-cli\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u547d\u4ee4\u884c\u64cd\u4f5c redis > docker exec -it myredis redis-cli","title":"Docker \u5b89\u88c5"},{"location":"redis/%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/#github","text":"# \u4e0b\u8f7d\u6e90\u7801 > git clone --branch 2 .8 --depth 1 git@github.com:antirez/redis.git > cd redis # \u7f16\u8bd1 > make > cd src # \u8fd0\u884c\u670d\u52a1\u5668\uff0cdaemonize\u8868\u793a\u5728\u540e\u53f0\u8fd0\u884c > ./redis-server --daemonize yes # \u8fd0\u884c\u547d\u4ee4\u884c > ./redis-cli","title":"Github \u6e90\u7801\u7f16\u8bd1\u5b89\u88c5"},{"location":"redis/%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/#_1","text":"# mac > brew install redis # ubuntu > apt-get install redis # redhat > yum install redis # \u8fd0\u884c\u5ba2\u6237\u7aef > redis-cli","title":"\u76f4\u63a5\u5b89\u88c5"},{"location":"redis/%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95/","text":"1.\u8c03\u8bd5\u51c6\u5907 \u00b6 Redis6.0\u6e90\u4ee3\u7801\uff1a https://github.com/redis/redis/tree/6.0 Vscode\u8f6f\u4ef6 gdb\uff08\u81ea\u884c\u767e\u5ea6\u5b89\u88c5\uff09 2.\u914d\u7f6e \u00b6 \u7528vscode\u6253\u5f00\u9879\u76ee\u6e90\u7801\uff0c\u70b9\u51fb\u4f9d\u6b21\u70b9\u51fb \u8fd0\u884c --> \u6dfb\u52a0\u914d\u7f6e \uff0c\u4f1a\u6253\u5f00\u4e00\u4e2a lanuch.json \u6587\u4ef6\uff0c\u6309\u7167\u5982\u4e0b\u5185\u5bb9\u4fee\u6539\u914d\u7f6e\uff1a { // \u4f7f\u7528 I ntell iSe nse \u4e86\u89e3\u76f8\u5173\u5c5e\u6027\u3002 // \u60ac\u505c\u4ee5\u67e5\u770b\u73b0\u6709\u5c5e\u6027\u7684\u63cf\u8ff0\u3002 // \u6b32\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95ee : h tt ps : //go.microso ft .com/ f wli n k/?li n kid= 830387 \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"(gdb) \u542f\u52a8\" , \"preLaunchTask\" : \"Build\" , // \u65b0\u589e \"type\" : \"cppdbg\" , \"request\" : \"launch\" , \"program\" : \"${workspaceFolder}/src/redis-server\" , // \u66f4\u6539 \"args\" : [], \"stopAtEntry\" : false , \"cwd\" : \"${workspaceFolder}\" , \"environment\" : [], \"externalConsole\" : false , \"MIMode\" : \"gdb\" , \"setupCommands\" : [ { \"description\" : \"\u4e3a gdb \u542f\u7528\u6574\u9f50\u6253\u5370\" , \"text\" : \"-enable-pretty-printing\" , \"ignoreFailures\" : true } ] } ] } \u65b0\u5efa\u6587\u4ef6 .vscode/tasks.json ,\u5199\u5165\u5982\u4e0b\u5185\u5bb9\uff1a { \"version\" : \"2.0.0\" , \"tasks\" : [ { \"label\" : \"Build\" , \"type\" : \"shell\" , \"command\" : \"make\" , \"args\" : [ \"CFLAGS=\\\"-g -O0\\\"\" ] } ] } 3.\u8c03\u8bd5 \u00b6 \u76f4\u63a5\u6309 F5 \uff0c\u5982\u679c\u7ec8\u7aef\u51fa\u73b0\u5982\u4e0b\u663e\u793a\uff0c\u8bc1\u660e\u542f\u52a8\u6210\u529f\uff0c\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u6253\u65ad\u70b9\u8c03\u8bd5\u4e86\u3002 17180 :C 14 Oct 2020 15 :00:09.781 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo 17180 :C 14 Oct 2020 15 :00:09.781 # Redis version=6.0.8, bits=64, commit=03b59cd5, modified=1, pid=17180, just started 17180 :C 14 Oct 2020 15 :00:09.781 # Warning: no config file specified, using the default config. In order to specify a config file use /home/daigua/code/redis_note/src/redis-server /path/to/redis.conf 17180 :M 14 Oct 2020 15 :00:09.786 # You requested maxclients of 10000 requiring at least 10032 max file descriptors. 17180 :M 14 Oct 2020 15 :00:09.786 # Server can't set maximum open files to 10032 because of OS error: Operation not permitted. 17180 :M 14 Oct 2020 15 :00:09.786 # Current maximum open files is 4096. maxclients has been reduced to 4064 to compensate for low ulimit. If you need higher maxclients increase 'ulimit -n'. _._ _.- `` __ '' -._ _.- `` ` . ` _. '' -._ Redis 6 .0.8 ( 03b59cd5/1 ) 64 bit .- `` .- ``` . ``` \\/ _.,_ '' -._ ( ' , .-` | `, ) Running in standalone mode |`-._`-...-` __...-.``-._|' ` _.- '| Port: 6379 | `-._ `._ / _.-' | PID: 17180 ` -._ ` -._ ` -./ _.- ' _.-' | ` -._ ` -._ ` -.__.- ' _.-' _.- '| | `-._`-._ _.-' _.- ' | http://redis.io `-._ `-._`-.__.-' _.- ' _.-' | ` -._ ` -._ ` -.__.- ' _.-' _.- '| | `-._`-._ _.-' _.- ' | `-._ `-._`-.__.-' _.- ' _.-' ` -._ ` -.__.- ' _.-' ` -._ _.- ' `-.__.-' 17180 :M 14 Oct 2020 15 :00:09.791 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128. 17180 :M 14 Oct 2020 15 :00:09.791 # Server initialized 17180 :M 14 Oct 2020 15 :00:09.791 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect. 17180 :M 14 Oct 2020 15 :00:09.791 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo madvise > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled (set to 'madvise' or 'never'). 17180 :M 14 Oct 2020 15 :00:09.822 * Loading RDB produced by version 6 .0.8 17180 :M 14 Oct 2020 15 :00:09.822 * RDB age 7493 seconds 17180 :M 14 Oct 2020 15 :00:09.822 * RDB memory usage when created 0 .52 Mb 17180 :M 14 Oct 2020 15 :00:09.822 * DB loaded from disk: 0 .000 seconds 17180 :M 14 Oct 2020 15 :00:09.822 * Ready to accept connections","title":"\u6e90\u7801\u8c03\u8bd5"},{"location":"redis/%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95/#1","text":"Redis6.0\u6e90\u4ee3\u7801\uff1a https://github.com/redis/redis/tree/6.0 Vscode\u8f6f\u4ef6 gdb\uff08\u81ea\u884c\u767e\u5ea6\u5b89\u88c5\uff09","title":"1.\u8c03\u8bd5\u51c6\u5907"},{"location":"redis/%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95/#2","text":"\u7528vscode\u6253\u5f00\u9879\u76ee\u6e90\u7801\uff0c\u70b9\u51fb\u4f9d\u6b21\u70b9\u51fb \u8fd0\u884c --> \u6dfb\u52a0\u914d\u7f6e \uff0c\u4f1a\u6253\u5f00\u4e00\u4e2a lanuch.json \u6587\u4ef6\uff0c\u6309\u7167\u5982\u4e0b\u5185\u5bb9\u4fee\u6539\u914d\u7f6e\uff1a { // \u4f7f\u7528 I ntell iSe nse \u4e86\u89e3\u76f8\u5173\u5c5e\u6027\u3002 // \u60ac\u505c\u4ee5\u67e5\u770b\u73b0\u6709\u5c5e\u6027\u7684\u63cf\u8ff0\u3002 // \u6b32\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95ee : h tt ps : //go.microso ft .com/ f wli n k/?li n kid= 830387 \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"(gdb) \u542f\u52a8\" , \"preLaunchTask\" : \"Build\" , // \u65b0\u589e \"type\" : \"cppdbg\" , \"request\" : \"launch\" , \"program\" : \"${workspaceFolder}/src/redis-server\" , // \u66f4\u6539 \"args\" : [], \"stopAtEntry\" : false , \"cwd\" : \"${workspaceFolder}\" , \"environment\" : [], \"externalConsole\" : false , \"MIMode\" : \"gdb\" , \"setupCommands\" : [ { \"description\" : \"\u4e3a gdb \u542f\u7528\u6574\u9f50\u6253\u5370\" , \"text\" : \"-enable-pretty-printing\" , \"ignoreFailures\" : true } ] } ] } \u65b0\u5efa\u6587\u4ef6 .vscode/tasks.json ,\u5199\u5165\u5982\u4e0b\u5185\u5bb9\uff1a { \"version\" : \"2.0.0\" , \"tasks\" : [ { \"label\" : \"Build\" , \"type\" : \"shell\" , \"command\" : \"make\" , \"args\" : [ \"CFLAGS=\\\"-g -O0\\\"\" ] } ] }","title":"2.\u914d\u7f6e"},{"location":"redis/%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95/#3","text":"\u76f4\u63a5\u6309 F5 \uff0c\u5982\u679c\u7ec8\u7aef\u51fa\u73b0\u5982\u4e0b\u663e\u793a\uff0c\u8bc1\u660e\u542f\u52a8\u6210\u529f\uff0c\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u6253\u65ad\u70b9\u8c03\u8bd5\u4e86\u3002 17180 :C 14 Oct 2020 15 :00:09.781 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo 17180 :C 14 Oct 2020 15 :00:09.781 # Redis version=6.0.8, bits=64, commit=03b59cd5, modified=1, pid=17180, just started 17180 :C 14 Oct 2020 15 :00:09.781 # Warning: no config file specified, using the default config. In order to specify a config file use /home/daigua/code/redis_note/src/redis-server /path/to/redis.conf 17180 :M 14 Oct 2020 15 :00:09.786 # You requested maxclients of 10000 requiring at least 10032 max file descriptors. 17180 :M 14 Oct 2020 15 :00:09.786 # Server can't set maximum open files to 10032 because of OS error: Operation not permitted. 17180 :M 14 Oct 2020 15 :00:09.786 # Current maximum open files is 4096. maxclients has been reduced to 4064 to compensate for low ulimit. If you need higher maxclients increase 'ulimit -n'. _._ _.- `` __ '' -._ _.- `` ` . ` _. '' -._ Redis 6 .0.8 ( 03b59cd5/1 ) 64 bit .- `` .- ``` . ``` \\/ _.,_ '' -._ ( ' , .-` | `, ) Running in standalone mode |`-._`-...-` __...-.``-._|' ` _.- '| Port: 6379 | `-._ `._ / _.-' | PID: 17180 ` -._ ` -._ ` -./ _.- ' _.-' | ` -._ ` -._ ` -.__.- ' _.-' _.- '| | `-._`-._ _.-' _.- ' | http://redis.io `-._ `-._`-.__.-' _.- ' _.-' | ` -._ ` -._ ` -.__.- ' _.-' _.- '| | `-._`-._ _.-' _.- ' | `-._ `-._`-.__.-' _.- ' _.-' ` -._ ` -.__.- ' _.-' ` -._ _.- ' `-.__.-' 17180 :M 14 Oct 2020 15 :00:09.791 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128. 17180 :M 14 Oct 2020 15 :00:09.791 # Server initialized 17180 :M 14 Oct 2020 15 :00:09.791 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect. 17180 :M 14 Oct 2020 15 :00:09.791 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo madvise > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled (set to 'madvise' or 'never'). 17180 :M 14 Oct 2020 15 :00:09.822 * Loading RDB produced by version 6 .0.8 17180 :M 14 Oct 2020 15 :00:09.822 * RDB age 7493 seconds 17180 :M 14 Oct 2020 15 :00:09.822 * RDB memory usage when created 0 .52 Mb 17180 :M 14 Oct 2020 15 :00:09.822 * DB loaded from disk: 0 .000 seconds 17180 :M 14 Oct 2020 15 :00:09.822 * Ready to accept connections","title":"3.\u8c03\u8bd5"},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/","text":"1.\u6982\u5ff5 \u00b6 Redis\u5b57\u7b26\u4e32\u5b9e\u9645\u4e0a\u662f\u7b80\u5355\u52a8\u6001\u5b57\u7b26\u4e32\uff08simple dynamic string, SDS\uff09\uff0cRedis\u4f7f\u7528SDS\u800c\u4e0d\u662fC\u8bed\u8a00\u7684\u5b57\u7b26\u4e32\uff08\u4ee5\u7a7a\u5b57\u7b26\u7ed3\u5c3e\u7684\u5b57\u7b26\u6570\u7ec4\uff09\u6765\u5b9e\u73b0\u4fee\u6539\u7684\u52a8\u6001\u5b57\u7b26\u4e32\uff0cC\u5b57\u7b26\u4e32\u662f\u4f5c\u4e3aRedis\u5b57\u7b26\u4e32\u7684\u5b57\u9762\u91cf\u7528\u5728\u4e00\u4e9b\u65e0\u9700\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u6539\u53d8\u7684\u5730\u65b9\uff0c\u6bd4\u5982\u6253\u5370\u65e5\u5fd7\u3002\u7b80\u5355\u6765\u8bf4Redis\u81ea\u5df1\u5b9e\u73b0\u4e86\u4e00\u4e2aSDS\u7ed3\u6784\u4f53\uff0c\u4f5c\u4e3aRedis\u5b57\u7b26\u4e32\u3002 2. SDS\u4ecb\u7ecd \u00b6 Redis6.0\u6e90\u7801\u5730\u5740\uff1a https://github.com/redis/redis/tree/6.0 2.1 SDS\u7ed3\u6784 \u00b6 \u67e5\u770b\u6e90\u7801\u53ef\u4ee5\u53d1\u73b0sds\u7684\u5b9a\u4e49 typedef char *sds; \uff0c\u5b9e\u9645\u4e0asds\u5b9a\u4e49\u7684\u5c31\u662f\u4e00\u4e2a char \u7c7b\u578b\uff0c\u771f\u6b63\u5b9e\u73b0SDS\u7684\u5176\u5b9e\u662f\u7ed3\u6784\u4f53sds\u5934 sdshdr \u3002 src\\sds.h \uff1a /* Note: sdshdr5 is never used, we just access the flags byte directly. * However is here to document the layout of type 5 SDS strings. */ struct __attribute__ (( __packed__ )) sdshdr5 { unsigned char flags ; /* 3 lsb of type, and 5 msb of string length */ char buf []; }; struct __attribute__ (( __packed__ )) sdshdr8 { uint8_t len ; /* used */ uint8_t alloc ; /* excluding the header and null terminator */ unsigned char flags ; /* 3 lsb of type, 5 unused bits */ char buf []; }; struct __attribute__ (( __packed__ )) sdshdr16 { uint16_t len ; /* used */ uint16_t alloc ; /* excluding the header and null terminator */ unsigned char flags ; /* 3 lsb of type, 5 unused bits */ char buf []; }; struct __attribute__ (( __packed__ )) sdshdr32 { uint32_t len ; /* used */ uint32_t alloc ; /* excluding the header and null terminator */ unsigned char flags ; /* 3 lsb of type, 5 unused bits */ char buf []; }; struct __attribute__ (( __packed__ )) sdshdr64 { uint64_t len ; /* used */ uint64_t alloc ; /* excluding the header and null terminator */ unsigned char flags ; /* 3 lsb of type, 5 unused bits */ char buf []; }; sdshdr5\u7ed3\u6784\u4f53\uff1a flags \uff1a\u5927\u5c0f1\u4e2a\u5b57\u8282\uff0c\u4f4e3\u4f4d\u8868\u793aheader\u7684\u7c7b\u578b\uff0c\u9ad85\u4f4d\u8868\u793a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 buf \uff1a\u5b57\u8282\u6570\u7ec4\uff0c\u4fdd\u5b58\u5b57\u7b26\u4e32 \u9664\u5f00sdshdr5\uff0cSDS\u7ed3\u6784\u4f53: len \uff1a\u5df2\u7ecf\u4f7f\u7528\u7684\u7a7a\u95f4\uff08\u5b57\u8282\uff09\u957f\u5ea6\uff0c\u4e5f\u5c31\u662f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 alloc \uff1a\u5b57\u7b26\u4e32\u7684\u6700\u5927\u5bb9\u91cf\uff08\u4e0d\u5305\u62ec\u5934\u548c\u7a7a\u7ed3\u675f\u7b26\uff09 flags \uff1a\u5927\u5c0f1\u4e2a\u5b57\u8282\uff0c\u4f4e3\u4f4d\u8868\u793aheader\u7684\u7c7b\u578b\uff0c\u9ad85\u4f4d\u672a\u4f7f\u7528 buf \uff1a\u5b57\u8282\u6570\u7ec4\uff0c\u4fdd\u5b58\u5b57\u7b26\u4e32 2.2 SDS\u4e0eC\u5b57\u7b26\u4e32\u7684\u533a\u522b \u00b6 C\u8bed\u8a00\u4e2d\u4f7f\u7528\u957f\u5ea6\u4e3a \\(N+1\\) \u7684\u5b57\u7b26\u6570\u7ec4\u6765\u8868\u793a\u957f\u5ea6\u4e3a \\(N\\) \u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u5b57\u7b26\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u603b\u662f\u7a7a\u5b57\u7b26\"\\o\"\u3002 C\u8bed\u8a00\u8fd9\u79cd\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u8868\u793a\u65b9\u5f0f\u4e0d\u80fd\u6ee1\u8db3Redis\u5bf9\u5b57\u7b26\u4e32\u5728\u5b89\u5168\u6027\u3001\u6548\u7387\u5df2\u7ecf\u529f\u80fd\u65b9\u9762\u7684\u8981\u6c42\u3002 2.2.1 \u83b7\u53d6\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 \u00b6 C\u5b57\u7b26\u4e32\u9700\u8981\u904d\u5386\u4e00\u904d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(N)\\) : \u548cC\u5b57\u7b26\u4e32\u4e0d\u540c\uff0cSDS\u4e2d\u7684len\u5c5e\u6027\uff0c\u53ef\u4ee5\u76f4\u63a5\u83b7\u5f97\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4e3a \\(O(1)\\) \uff1a 2.2.2 \u7f13\u51b2\u533a\u6ea2\u51fa \u00b6 C\u5b57\u7b26\u4e32\u4e0d\u8bb0\u5f55\u81ea\u8eab\u957f\u5ea6\uff0c\u4f7f\u7528 <string.h>/strcat \u51fd\u6570\u5c06 src \u5b57\u7b26\u4e32\u4e2d\u7684\u5185\u5bb9\u62fc\u63a5\u5230 dest \u5b57\u7b26\u4e32\u7684\u672b\u5c3e\uff1a char * strcat ( char * dest , const char * src ) \u5982\u679c\u6267\u884c strcat \u51fd\u6570\u7684\u65f6\u5019\u6ca1\u6709\u9884\u5148\u4e3a dest \u5206\u914d\u8db3\u591f\u591a\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5c31\u4f1a\u4ea7\u751f\u7f13\u51b2\u533a\u6ea2\u51fa\u3002 \u4e0eC\u5b57\u7b26\u4e32\u4e0d\u540c\uff0cRedis\u4f7f\u7528 sds.c/sdscat \u51fd\u6570\u8fdb\u884c\u5b57\u7b26\u4e32\u62fc\u63a5\u65f6\uff0c\u5982\u679c dest \u7a7a\u95f4\u4e0d\u591f\uff0c\u5c31\u4f1a\u4f7f\u7528\u51fd\u6570 sdsMakeRoomFor \u6269\u5bb9\u7a7a\u95f4\uff0c\u907f\u514d\u4e86\u51fa\u73b0\u7f13\u51b2\u533a\u6ea2\u51fa\u7684\u60c5\u51b5\uff08\u6ce8\u610f\u6b64\u65f6\u6269\u5bb9\u7a7a\u95f4\u65f6\uff0c\u5e76\u4e0d\u662f\u5206\u914d\u4ec5\u591f\u6269\u5bb9\u540e\u5b57\u7b26\u4e32\u5927\u5c0f\u7684\u7a7a\u95f4\uff0c\u800c\u662f\u4f1a\u5197\u4f59\u5206\u914d\u4e00\u4e9b\u672a\u4f7f\u7528\u7684\u7a7a\u95f4\uff0c\u53ef\u4ee5\u60f3\u60f3\u8fd9\u662f\u4e3a\u4ec0\u4e48\uff09\u3002 2.2.3 \u51cf\u5c11\u5b57\u7b26\u4e32\u4fee\u6539\u5e26\u6765\u7684\u5185\u5b58\u91cd\u65b0\u5206\u914d\u6b21\u6570 \u00b6 C\u5b57\u7b26\u4e32\u4fee\u6539\u65f6\uff0c\u90fd\u8981\u8fdb\u884c\u4e00\u6b21\u5185\u5b58\u91cd\u65b0\u5206\u914d\u64cd\u4f5c\uff1a \u5982\u679c\u65f6\u589e\u957f\u5b57\u7b26\u4e32\uff0c\u7a0b\u5e8f\u9700\u8981\u5148\u901a\u8fc7\u5185\u5b58\u91cd\u65b0\u5206\u914d\u6765\u6269\u5c55\u5e95\u5c42\u6570\u7ec4\u7a7a\u95f4\u5927\u5c0f\uff0c\u5982\u679c\u5fd8\u4e86\u8fd9\u4e00\u6b65\u53ef\u80fd\u4f1a\u4ea7\u751f\u7f13\u5b58\u6ea2\u51fa\u3002 \u5982\u679c\u662f\u7f29\u77ed\u5b57\u7b26\u4e32\uff0c\u7a0b\u5e8f\u5728\u6267\u884c\u8fd9\u4e2a\u64cd\u4f5c\u540e\uff0c\u8981\u901a\u8fc7\u5185\u5b58\u91cd\u65b0\u5206\u914d\u6765\u91ca\u653e\u5b57\u7b26\u4e32\u4e0d\u518d\u4f7f\u7528\u7684\u7a7a\u95f4\uff0c\u5982\u679c\u5fd8\u4e86\u90a3\u5c31\u4f1a\u4ea7\u751f\u5185\u5b58\u6cc4\u6f0f\u3002 \u56e0\u4e3a\u5185\u5b58\u5206\u914d\u6d89\u53ca\u590d\u6742\u7684\u7b97\u6cd5\uff0c\u8fd8\u53ef\u80fd\u9700\u8981\u6267\u884c\u7cfb\u7edf\u8c03\u7528\uff0c\u6240\u4ee5\u5b83\u901a\u5e38\u90fd\u662f\u4e00\u4e2a\u6bd4\u8f83\u8017\u65f6\u7684\u64cd\u4f5c\u3002\u5728\u4e00\u822c\u7684\u7a0b\u5e8f\u4e2d\u5982\u679c\u4fee\u6539\u5b57\u7b26\u4e32\u7684\u573a\u666f\u4e0d\u592a\u5e38\u89c1\uff0c\u90a3\u4e48\u6bcf\u6b21\u4fee\u6539\u5185\u5b58\u90fd\u91cd\u65b0\u5206\u914d\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u4f46\u662fRedis\u4f5c\u4e3a\u6570\u636e\u5e93\uff0c\u5bf9\u6027\u80fd\u8981\u6c42\u5f88\u9ad8\uff0c\u5982\u679c\u9891\u7e41\u7684\u8fdb\u884c\u5185\u5b58\u91cd\u65b0\u5206\u914d\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u52bf\u5fc5\u4f1a\u5f71\u54cd\u6027\u80fd\u3002 \u4e3a\u4e86\u907f\u514dC\u5b57\u7b26\u4e32\u7684\u8fd9\u79cd\u7f3a\u9677\uff0cSDS\u901a\u8fc7\u672a\u4f7f\u7528\u7a7a\u95f4\u89e3\u9664\u4e86 \u5b57\u7b26\u4e32\u957f\u5ea6\u548c\u5e95\u5c42\u5b57\u7b26\u6570\u7ec4\u957f\u5ea6 \u4e4b\u95f4\u7684\u5173\u8054\uff0c\u4e5f\u5c31\u662f\u6570\uff0c sdshdr \u4e2d\u7684 len \u548c alloc \u5e76\u4e0d\u4e00\u5b9a\u76f8\u7b49\u3002\u4e3b\u8981\u8868\u73b0\u4e3a\u4e24\u79cd\u7b56\u7565\uff1a a) \u7a7a\u95f4\u9884\u5206\u914d \u00b6 \u7528\u4e8e\u4f18\u5316SDS\u5b57\u7b26\u4e32\u7684\u589e\u957f\u64cd\u4f5c\uff1a\u5f53SDS\u7684API\u5bf9\u4e00\u4e2aSDS\u8fdb\u884c\u4fee\u6539\u5e76\u4e14\u9700\u8981\u5bf9SDS\u7684\u7a7a\u95f4\u8fdb\u884c\u6269\u5c55\u7684\u65f6\u5019\uff0c\u7a0b\u5e8f\u4e0d\u4ec5\u4f1a\u4e3aSDS\u5206\u914d\u4fee\u6539\u6240\u5fc5\u987b\u7684\u7a7a\u95f4\uff0c\u8fd8\u4f1a\u4e3aSDS\u5206\u914d\u989d\u5916\u7684\u672a\u4f7f\u7528\u7a7a\u95f4\uff0c\u5206\u914d\u7b56\u7565\u5982\u4e0b\uff1a \u5982\u679c\u5bf9SDS\u4fee\u6539\u540e\uff0c\u5b57\u7b26\u4e32\u957f\u5ea6\u5c0f\u4e8e1MB\uff08\u5373len\u5c5e\u6027\u5c0f\u4e8e1MB\uff09\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5c06\u5206\u914d\u548clen\u5c5e\u6027\u540c\u6837\u5927\u5c0f\u7684\u672a\u4f7f\u7528\u7a7a\u95f4\u3002 \u5982\u679c\u5bf9SDS\u4fee\u6539\u540e\uff0c\u5b57\u7b26\u4e32\u957f\u5ea6\u5927\u4e8e1MB\uff0c\u90a3\u4e48\u7a0b\u5e8f\u4f1a\u5206\u914d1MB\u7684\u672a\u4f7f\u7528\u7a7a\u95f4\u3002 b) \u60f0\u6027\u7a7a\u95f4\u91ca\u653e \u00b6 \u7528\u4e8e\u4f18\u5316SDS\u5b57\u7b26\u4e32\u7684\u7f29\u77ed\u64cd\u4f5c\uff1a\u5f53SDS\u7684API\u9700\u8981\u7f29\u77edSDS\u4fdd\u5b58\u7684\u5b57\u7b26\u4e32\u65f6\uff0c\u7a0b\u5e8f\u5e76\u4e0d\u4f1a\u7acb\u5373\u8fdb\u884c\u5185\u5b58\u5206\u914d\u6765\u56de\u6536\u591a\u51fa\u6765\u7684\u5b57\u8282\uff0c\u800c\u662f\u53ea\u66f4\u65b0len\u7684\u503c\u3002 \u76f8\u5173\u51fd\u6570\uff1a src/sds.c \uff1a /* Modify an sds string in-place to make it empty (zero length). * However all the existing buffer is not discarded but set as free space * so that next append operations will not require allocations up to the * number of bytes previously available. */ void sdsclear ( sds s ) { sdssetlen ( s , 0 ); s [ 0 ] = '\\0' ; } src/sds.h \uff1a static inline void sdssetlen ( sds s , size_t newlen ) { unsigned char flags = s [ -1 ]; switch ( flags & SDS_TYPE_MASK ) { case SDS_TYPE_5 : { unsigned char * fp = (( unsigned char * ) s ) -1 ; * fp = SDS_TYPE_5 | ( newlen << SDS_TYPE_BITS ); } break ; case SDS_TYPE_8 : SDS_HDR ( 8 , s ) -> len = newlen ; break ; case SDS_TYPE_16 : SDS_HDR ( 16 , s ) -> len = newlen ; break ; case SDS_TYPE_32 : SDS_HDR ( 32 , s ) -> len = newlen ; break ; case SDS_TYPE_64 : SDS_HDR ( 64 , s ) -> len = newlen ; break ; } } \u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff0c\u53ef\u4ee5\u907f\u514d\u7f29\u77ed\u5b57\u7b26\u4e32\u65f6\u5019\u7684\u5185\u91cd\u65b0\u5206\u914d\uff0c\u5e76\u4e3a\u540e\u7eed\u53ef\u80fd\u7684\u5b57\u7b26\u589e\u957f\u8fdb\u884c\u4e86\u4f18\u5316\uff08\u5982\u679c\u672a\u4f7f\u7528\u7a7a\u95f4\u8db3\u591f\uff0c\u5219\u4e0d\u9700\u8981\u91cd\u65b0\u5206\u914d\u5185\u5b58\uff09 2.2.4 \u4e8c\u8fdb\u5236\u5b89\u5168 \u00b6 C\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\u5fc5\u987b\u7b26\u5408\u67d0\u79cd\u7f16\u7801\uff08\u6bd4\u5982ASCII\uff09\uff0c\u5e76\u4e14\u9664\u4e86\u672b\u5c3e\u4ee5\u5916\uff0c\u5b57\u7b26\u4e32\u4e0d\u80fd\u5305\u542b\u7a7a\u5b57\u7b26\uff0c\u5373\u5c06\u7a7a\u5b57\u7b26\u4f5c\u4e3a\u5b57\u7b26\u4e32\u7ed3\u675f\u7684\u6807\u5fd7\uff0c\u8fd9\u79cd\u9650\u5236\u4f7f\u5f97C\u5b57\u7b26\u4e32\u53ea\u80fd\u4fdd\u5b58\u6587\u672c\u6570\u636e\uff0c\u800c\u4e0d\u80fd\u4fdd\u5b58\u56fe\u7247\u3001\u97f3\u9891\u3001\u89c6\u9891\u3001\u538b\u7f29\u6587\u4ef6\u8fd9\u6837\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u3002\u6bd4\u5982\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\"Redis Cluster\"\uff0cC\u5b57\u7b26\u4e32\u5c31\u53ea\u80fd\u8bc6\u522b\u51fa\u5176\u4e2d\"Redis\"\u800c\u5ffd\u7565\u4e4b\u540e\u7684\"Cluster\"\u3002 \u76f8\u6bd4\u4e4b\u4e0b\uff0cSDS\u7684API\u90fd\u662f\u4ee5\u5904\u7406\u4e8c\u8fdb\u5236\u7684\u65b9\u5f0f\u6765\u5904\u7406SDS\u76b4\u6cd5\u5728buf\u6570\u7ec4\u91cc\u9762\u7684\u6570\u636e\uff0c\u7a0b\u5e8f\u4e0d\u4f1a\u5bf9\u5176\u4e2d\u7684\u6570\u636e\u505a\u4efb\u4f55\u9650\u5236\u3001\u8fc7\u6ee4\u3001\u6216\u8005\u5047\u8bbe\uff0c\u6570\u636e\u5728\u5199\u5165\u65f6\u662f\u4ec0\u4e48\u6837\u7684\uff0c\u88ab\u8bfb\u53d6\u7684\u65f6\u5019\u5c31\u662f\u4ec0\u4e48\u6837\u7684\uff0c\u8fd9\u4e5f\u662f\u6211\u4eec\u628abuf\u6210\u4e3a\u5b57\u8282\u6570\u7ec4\u7684\u539f\u56e0\uff0c\u540c\u6837\u4fdd\u5b58\"Redis Cluster\"\uff0cSDS\u5c31\u4e0d\u4f1a\u6709\u95ee\u9898\uff0c\u56e0\u4e3aSDS\u4f7f\u7528len\u5c5e\u6027\u7684\u503c\u6765\u5224\u65ad\u5b57\u7b26\u4e32\u7684\u7ed3\u675f\u3002 2.2.5 \u517c\u5bb9\u90e8\u5206C\u5b57\u7b26\u4e32\u51fd\u6570 \u00b6 \u867d\u7136SDS\u7684API\u90fd\u662f\u4e8c\u8fdb\u5236\u5b89\u5168\u7684\uff0c\u4f46\u662f\u5b83\u4eec\u4e00\u6837\u9075\u5faaC\u5b57\u7b26\u4e32\u4ee5\u7a7a\u5b57\u7b26\u7ed3\u5c3e\u7684\u60ef\u4f8b\uff0c\u8fd9\u6837\u4e00\u6765\uff0cSDS\u53ef\u4ee5\u91cd\u7528\\<string.h>\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u3002 2.2.6 \u603b\u7ed3 \u00b6 C\u5b57\u7b26\u4e32\u548cSDS\u4e4b\u95f4\u7684\u533a\u522b\uff1a 2.3 SDS API \u00b6 sds sdsnew(const char *init) \uff1a\u6839\u636e\u4e00\u4e2a\u7a7a\u5b57\u7b26\u7ed3\u5c3e\u7684C\u5b57\u7b26\u4e32\u521b\u5efa\u4e00\u4e2a\u65b0\u7684sds\u5b57\u7b26\u4e32\u3002 sds sdsdup(const sds s) \uff1a\u590d\u5236\u4e00\u4e2asds\u5b57\u7b26\u4e32\u3002 todo\uff1a\u5f85\u8865\u5145\u3002\u3002\u3002 2.4 \u91cd\u70b9\u56de\u987e \u00b6 Redis\u53ea\u4f1a\u4f7f\u7528C\u5b57\u7b26\u4e32\u4f5c\u4e3a\u5b57\u9762\u91cf\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0cRedis\u4f7f\u7528SDS\u4f5c\u4e3a\u5b57\u7b26\u4e32\u8868\u793a\u3002 \u6bd4\u8d77C\u5b57\u7b26\u4e32\uff0cSDS\u5177\u6709\u4ee5\u4e0b\u4f18\u70b9\uff1a \\(O(1)\\) \u65f6\u95f4\u590d\u6742\u5ea6\u83b7\u53d6\u5b57\u7b26\u4e32\u957f\u5ea6 \u5206\u914d\u5197\u4f59\u7a7a\u95f4\uff0c\u675c\u7edd\u7f13\u51b2\u533a\u6ea2\u51fa \u51cf\u5c11\u4fee\u6539\u5b57\u7b26\u4e32\u957f\u5ea6\u65f6\u6240\u9700\u7684\u5185\u5b58\u91cd\u5206\u914d\u6b21\u6570 \u4e8c\u8fdb\u5236\u5b89\u5168 \u517c\u5bb9\u90e8\u5206C\u5b57\u7b26\u4e32\u51fd\u6570 3.\u90e8\u5206\u6e90\u7801\u89e3\u6790 \u00b6 3.1 \u5b57\u7b26\u4e32\u7684\u7f16\u7801 \u00b6 Redis\u5b57\u7b26\u4e32\u6709\u4e09\u79cd\u7f16\u7801\u65b9\u5f0f\uff1a int\uff1a\u5982\u679c\u5b57\u7b26\u4e32\u53ef\u4ee5\u8f6c\u4e3a\u8303\u56f4\u4e3a8\u5b57\u8282\uff08-9223372036854775808~9223372036854775807\uff09\u7684\u957f\u957f\u6574\u578b embede\uff1a\u4e0d\u80fd\u8f6c\u4e3aint\uff0c\u540c\u65f6\u5b57\u7b26\u4e32\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e44 raw\uff1a\u4e0d\u80fd\u8f6c\u4e3aint\uff0c\u540c\u65f6\u5b57\u7b26\u4e32\u957f\u5ea6\u5927\u4e8e44 \u901a\u8fc7 object encoding key_name \u53ef\u4ee5\u67e5\u770bRedis\u5bf9\u8c61\u7684\u7f16\u7801\u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u67e5\u770b\u4e0b\u4e0a\u8ff0\u60c5\u51b5\uff1a a) \u67e5\u770bint\u7f16\u7801\uff1a 127 .0.0.1:6379> set int_min -9223372036854775808 OK 127 .0.0.1:6379> object encoding int_min \"int\" 127 .0.0.1:6379> set int_min -9223372036854775809 OK 127 .0.0.1:6379> object encoding int_min \"embstr\" 127 .0.0.1:6379> set int_max 9223372036854775807 OK 127 .0.0.1:6379> object encoding int_max \"int\" 127 .0.0.1:6379> set int_max 9223372036854775808 OK 127 .0.0.1:6379> object encoding int_max \"embstr\" \u53ef\u4ee5\u770b\u5230\uff0c\u8d85\u51fa\u4e86\u8303\u56f4\u540e\uff0c\u7f16\u7801\u5c31\u4e0d\u518d\u662fint\u4e86\uff0c\u6e90\u7801\u4e2d\u4e0e\u8fd9\u90e8\u5206\u903b\u8f91\u76f8\u5173\u7684\u4ee3\u7801\u5982\u4e0b\uff1a /* Try to encode a string object in order to save space */ robj * tryObjectEncoding ( robj * o ) { long value ; sds s = o -> ptr ; size_t len ; /* Make sure this is a string object, the only type we encode * in this function. Other types use encoded memory efficient * representations but are handled by the commands implementing * the type. */ serverAssertWithInfo ( NULL , o , o -> type == OBJ_STRING ); /* We try some specialized encoding only for objects that are * RAW or EMBSTR encoded, in other words objects that are still * in represented by an actually array of chars. */ if ( ! sdsEncodedObject ( o )) return o ; // \u53ea\u6709EMBSTR\u548cRAW\u7f16\u7801\u624d\u4f1a\u5904\u7406\uff0c\u5426\u5219\u8fd4\u56de /* It's not safe to encode shared objects: shared objects can be shared * everywhere in the \"object space\" of Redis and may end in places where * they are not handled. We handle them only as values in the keyspace. */ if ( o -> refcount > 1 ) return o ; // \u5982\u679c\u662f\u5171\u4eab\u7684\u5bf9\u8c61\u5219\u4e0d\u5904\u7406\uff0c\u76f4\u63a5\u8fd4\u56de /* Check if we can represent this string as a long integer. * Note that we are sure that a string larger than 20 chars is not * representable as a 32 nor 64 bit integer. */ len = sdslen ( s ); if ( len <= 20 && string2l ( s , len , & value )) { // \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u4e0d\u662f\u53ef\u4ee5\u8f6c\u4e3a\u4e00\u4e2a\u957f\u6574\u578b /* This object is encodable as a long. Try to use a shared object. * Note that we avoid using shared integers when maxmemory is used * because every object needs to have a private LRU field for the LRU * algorithm to work well. */ if (( server . maxmemory == 0 || ! ( server . maxmemory_policy & MAXMEMORY_FLAG_NO_SHARED_INTEGERS )) && value >= 0 && value < OBJ_SHARED_INTEGERS ) { // \u5c0f\u4e8e10000\u662f\u5171\u4eab\u6574\u578b decrRefCount ( o ); incrRefCount ( shared . integers [ value ]); return shared . integers [ value ]; } else { if ( o -> encoding == OBJ_ENCODING_RAW ) { // raw\u7c7b\u578b\u7f16\u7801\u7684\u5904\u7406 sdsfree ( o -> ptr ); o -> encoding = OBJ_ENCODING_INT ; o -> ptr = ( void * ) value ; return o ; } else if ( o -> encoding == OBJ_ENCODING_EMBSTR ) { // emb\u7c7b\u578b\u7f16\u7801\u7684\u5904\u7406 decrRefCount ( o ); return createStringObjectFromLongLongForValue ( value ); } } } /* If the string is small and is still RAW encoded, * try the EMBSTR encoding which is more efficient. * In this representation the object and the SDS string are allocated * in the same chunk of memory to save space and cache misses. */ if ( len <= OBJ_ENCODING_EMBSTR_SIZE_LIMIT ) { robj * emb ; if ( o -> encoding == OBJ_ENCODING_EMBSTR ) return o ; emb = createEmbeddedStringObject ( s , sdslen ( s )); decrRefCount ( o ); return emb ; } /* We can't encode the object... * * Do the last try, and at least optimize the SDS string inside * the string object to require little space, in case there * is more than 10% of free space at the end of the SDS string. * * We do that only for relatively large strings as this branch * is only entered if the length of the string is greater than * OBJ_ENCODING_EMBSTR_SIZE_LIMIT. */ trimStringObjectIfNeeded ( o ); /* Return the original object. */ return o ; } b) \u67e5\u770bembede\u7f16\u7801\u548craw\u7f16\u7801\uff1a 127 .0.0.1:6379> set str_demo1 'abcdefghijklmnopqrstuvwxyz012345678901234567' OK 127 .0.0.1:6379> object encoding str_demo1 \"embstr\" 127 .0.0.1:6379> set str_demo2 'abcdefghijklmnopqrstuvwxyz0123456789012345678' OK 127 .0.0.1:6379> object encoding str_demo2 \"raw\" \u53ef\u4ee5\u770b\u5230\uff0c\u5b57\u7b26\u4e32\u957f\u5ea6\u5927\u4e8e44\u65f6\uff0c\u7f16\u7801\u7c7b\u578b\u4e3araw\uff0c\u5426\u5219\u7f16\u7801\u7c7b\u578b\u4e3aembstr\uff0c\u76f8\u5173\u6e90\u7801\u5982\u4e0b\uff1a /* Create a string object with EMBSTR encoding if it is smaller than * OBJ_ENCODING_EMBSTR_SIZE_LIMIT, otherwise the RAW encoding is * used. * * The current limit of 44 is chosen so that the biggest string object * we allocate as EMBSTR will still fit into the 64 byte arena of jemalloc. */ #define OBJ_ENCODING_EMBSTR_SIZE_LIMIT 44 robj * createStringObject ( const char * ptr , size_t len ) { if ( len <= OBJ_ENCODING_EMBSTR_SIZE_LIMIT ) return createEmbeddedStringObject ( ptr , len ); else return createRawStringObject ( ptr , len ); } \u601d\u8003\uff1a\u4e3a\u4ec0\u4e48raw\u7f16\u7801\u548cembstr\u7f16\u7801\u7684\u5206\u754c\u7ebf\u662f44\u5462\uff1f \u7b54\uff1ajemalloc\u5206\u914d\u5185\u5b58\u5927\u5c0f\u7684\u5355\u4f4d\u90fd\u662f 2\u30014\u30018\u300116\u300132\u300164\u7b49\uff0c\u5982\u679c\u603b\u4f53\u8d85\u51fa\u4e86 64 \u5b57\u8282\uff0cRedis \u8ba4\u4e3a\u5b83\u662f\u4e00\u4e2a\u5927\u5b57\u7b26\u4e32\u3002\u5982\u4e0b\u56fe\u53ef\u4ee5\u770b\u5230\uff0cembstr\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u662f\u4e00\u4e2a\u8fde\u7eed\u7684\u7a7a\u95f4\uff0c\u5176\u5b9eredisObject\u5360\u752816\u4e2a\u5b57\u8282\uff0csdshdr\u6700\u5c11\u5360\u75283\u4e2a\u5b57\u8282\uff0c\u90a3\u4e48\u8fd8\u5269\u4e0b64-3-16=45\u4e2a\u5b57\u8282\u4fdd\u5b58\u5b57\u7b26\u6570\u7ec4\uff0c\u518d\u526a\u53bb\u5b57\u7b26\u6570\u7ec4\u6700\u540e\u4fdd\u5b58\u7684'\\0'\uff0c\u90a3\u4e48\u5c31\u5269\u4e0b44\u4e2a\u5b57\u8282\u4e86\uff0c\u6240\u4ee5embstr\u7f16\u7801\u7684\u5b57\u7b26\u4e32\u6700\u591a44\u4e2a\u5b57\u8282\u3002 redisObject \u7684\u5b9a\u4e49\uff1a #define LRU_BITS 24 typedef struct redisObject { unsigned type : 4 ; unsigned encoding : 4 ; unsigned lru : LRU_BITS ; /* LRU time (relative to global lru_clock) or * LFU data (least significant 8 bits frequency * and most significant 16 bits access time). */ int refcount ; void * ptr ; } robj ; \u00b6 4. \u603b\u7ed3 \u00b6 todo\u3002\u3002\u3002","title":"\u5b57\u7b26\u4e32"},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/#1","text":"Redis\u5b57\u7b26\u4e32\u5b9e\u9645\u4e0a\u662f\u7b80\u5355\u52a8\u6001\u5b57\u7b26\u4e32\uff08simple dynamic string, SDS\uff09\uff0cRedis\u4f7f\u7528SDS\u800c\u4e0d\u662fC\u8bed\u8a00\u7684\u5b57\u7b26\u4e32\uff08\u4ee5\u7a7a\u5b57\u7b26\u7ed3\u5c3e\u7684\u5b57\u7b26\u6570\u7ec4\uff09\u6765\u5b9e\u73b0\u4fee\u6539\u7684\u52a8\u6001\u5b57\u7b26\u4e32\uff0cC\u5b57\u7b26\u4e32\u662f\u4f5c\u4e3aRedis\u5b57\u7b26\u4e32\u7684\u5b57\u9762\u91cf\u7528\u5728\u4e00\u4e9b\u65e0\u9700\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u6539\u53d8\u7684\u5730\u65b9\uff0c\u6bd4\u5982\u6253\u5370\u65e5\u5fd7\u3002\u7b80\u5355\u6765\u8bf4Redis\u81ea\u5df1\u5b9e\u73b0\u4e86\u4e00\u4e2aSDS\u7ed3\u6784\u4f53\uff0c\u4f5c\u4e3aRedis\u5b57\u7b26\u4e32\u3002","title":"1.\u6982\u5ff5"},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/#2-sds","text":"Redis6.0\u6e90\u7801\u5730\u5740\uff1a https://github.com/redis/redis/tree/6.0","title":"2. SDS\u4ecb\u7ecd"},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/#21-sds","text":"\u67e5\u770b\u6e90\u7801\u53ef\u4ee5\u53d1\u73b0sds\u7684\u5b9a\u4e49 typedef char *sds; \uff0c\u5b9e\u9645\u4e0asds\u5b9a\u4e49\u7684\u5c31\u662f\u4e00\u4e2a char \u7c7b\u578b\uff0c\u771f\u6b63\u5b9e\u73b0SDS\u7684\u5176\u5b9e\u662f\u7ed3\u6784\u4f53sds\u5934 sdshdr \u3002 src\\sds.h \uff1a /* Note: sdshdr5 is never used, we just access the flags byte directly. * However is here to document the layout of type 5 SDS strings. */ struct __attribute__ (( __packed__ )) sdshdr5 { unsigned char flags ; /* 3 lsb of type, and 5 msb of string length */ char buf []; }; struct __attribute__ (( __packed__ )) sdshdr8 { uint8_t len ; /* used */ uint8_t alloc ; /* excluding the header and null terminator */ unsigned char flags ; /* 3 lsb of type, 5 unused bits */ char buf []; }; struct __attribute__ (( __packed__ )) sdshdr16 { uint16_t len ; /* used */ uint16_t alloc ; /* excluding the header and null terminator */ unsigned char flags ; /* 3 lsb of type, 5 unused bits */ char buf []; }; struct __attribute__ (( __packed__ )) sdshdr32 { uint32_t len ; /* used */ uint32_t alloc ; /* excluding the header and null terminator */ unsigned char flags ; /* 3 lsb of type, 5 unused bits */ char buf []; }; struct __attribute__ (( __packed__ )) sdshdr64 { uint64_t len ; /* used */ uint64_t alloc ; /* excluding the header and null terminator */ unsigned char flags ; /* 3 lsb of type, 5 unused bits */ char buf []; }; sdshdr5\u7ed3\u6784\u4f53\uff1a flags \uff1a\u5927\u5c0f1\u4e2a\u5b57\u8282\uff0c\u4f4e3\u4f4d\u8868\u793aheader\u7684\u7c7b\u578b\uff0c\u9ad85\u4f4d\u8868\u793a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 buf \uff1a\u5b57\u8282\u6570\u7ec4\uff0c\u4fdd\u5b58\u5b57\u7b26\u4e32 \u9664\u5f00sdshdr5\uff0cSDS\u7ed3\u6784\u4f53: len \uff1a\u5df2\u7ecf\u4f7f\u7528\u7684\u7a7a\u95f4\uff08\u5b57\u8282\uff09\u957f\u5ea6\uff0c\u4e5f\u5c31\u662f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 alloc \uff1a\u5b57\u7b26\u4e32\u7684\u6700\u5927\u5bb9\u91cf\uff08\u4e0d\u5305\u62ec\u5934\u548c\u7a7a\u7ed3\u675f\u7b26\uff09 flags \uff1a\u5927\u5c0f1\u4e2a\u5b57\u8282\uff0c\u4f4e3\u4f4d\u8868\u793aheader\u7684\u7c7b\u578b\uff0c\u9ad85\u4f4d\u672a\u4f7f\u7528 buf \uff1a\u5b57\u8282\u6570\u7ec4\uff0c\u4fdd\u5b58\u5b57\u7b26\u4e32","title":"2.1 SDS\u7ed3\u6784"},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/#22-sdsc","text":"C\u8bed\u8a00\u4e2d\u4f7f\u7528\u957f\u5ea6\u4e3a \\(N+1\\) \u7684\u5b57\u7b26\u6570\u7ec4\u6765\u8868\u793a\u957f\u5ea6\u4e3a \\(N\\) \u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u5b57\u7b26\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u603b\u662f\u7a7a\u5b57\u7b26\"\\o\"\u3002 C\u8bed\u8a00\u8fd9\u79cd\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u8868\u793a\u65b9\u5f0f\u4e0d\u80fd\u6ee1\u8db3Redis\u5bf9\u5b57\u7b26\u4e32\u5728\u5b89\u5168\u6027\u3001\u6548\u7387\u5df2\u7ecf\u529f\u80fd\u65b9\u9762\u7684\u8981\u6c42\u3002","title":"2.2 SDS\u4e0eC\u5b57\u7b26\u4e32\u7684\u533a\u522b"},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/#221","text":"C\u5b57\u7b26\u4e32\u9700\u8981\u904d\u5386\u4e00\u904d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(N)\\) : \u548cC\u5b57\u7b26\u4e32\u4e0d\u540c\uff0cSDS\u4e2d\u7684len\u5c5e\u6027\uff0c\u53ef\u4ee5\u76f4\u63a5\u83b7\u5f97\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4e3a \\(O(1)\\) \uff1a","title":"2.2.1 \u83b7\u53d6\u5b57\u7b26\u4e32\u7684\u957f\u5ea6"},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/#222","text":"C\u5b57\u7b26\u4e32\u4e0d\u8bb0\u5f55\u81ea\u8eab\u957f\u5ea6\uff0c\u4f7f\u7528 <string.h>/strcat \u51fd\u6570\u5c06 src \u5b57\u7b26\u4e32\u4e2d\u7684\u5185\u5bb9\u62fc\u63a5\u5230 dest \u5b57\u7b26\u4e32\u7684\u672b\u5c3e\uff1a char * strcat ( char * dest , const char * src ) \u5982\u679c\u6267\u884c strcat \u51fd\u6570\u7684\u65f6\u5019\u6ca1\u6709\u9884\u5148\u4e3a dest \u5206\u914d\u8db3\u591f\u591a\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5c31\u4f1a\u4ea7\u751f\u7f13\u51b2\u533a\u6ea2\u51fa\u3002 \u4e0eC\u5b57\u7b26\u4e32\u4e0d\u540c\uff0cRedis\u4f7f\u7528 sds.c/sdscat \u51fd\u6570\u8fdb\u884c\u5b57\u7b26\u4e32\u62fc\u63a5\u65f6\uff0c\u5982\u679c dest \u7a7a\u95f4\u4e0d\u591f\uff0c\u5c31\u4f1a\u4f7f\u7528\u51fd\u6570 sdsMakeRoomFor \u6269\u5bb9\u7a7a\u95f4\uff0c\u907f\u514d\u4e86\u51fa\u73b0\u7f13\u51b2\u533a\u6ea2\u51fa\u7684\u60c5\u51b5\uff08\u6ce8\u610f\u6b64\u65f6\u6269\u5bb9\u7a7a\u95f4\u65f6\uff0c\u5e76\u4e0d\u662f\u5206\u914d\u4ec5\u591f\u6269\u5bb9\u540e\u5b57\u7b26\u4e32\u5927\u5c0f\u7684\u7a7a\u95f4\uff0c\u800c\u662f\u4f1a\u5197\u4f59\u5206\u914d\u4e00\u4e9b\u672a\u4f7f\u7528\u7684\u7a7a\u95f4\uff0c\u53ef\u4ee5\u60f3\u60f3\u8fd9\u662f\u4e3a\u4ec0\u4e48\uff09\u3002","title":"2.2.2 \u7f13\u51b2\u533a\u6ea2\u51fa"},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/#223","text":"C\u5b57\u7b26\u4e32\u4fee\u6539\u65f6\uff0c\u90fd\u8981\u8fdb\u884c\u4e00\u6b21\u5185\u5b58\u91cd\u65b0\u5206\u914d\u64cd\u4f5c\uff1a \u5982\u679c\u65f6\u589e\u957f\u5b57\u7b26\u4e32\uff0c\u7a0b\u5e8f\u9700\u8981\u5148\u901a\u8fc7\u5185\u5b58\u91cd\u65b0\u5206\u914d\u6765\u6269\u5c55\u5e95\u5c42\u6570\u7ec4\u7a7a\u95f4\u5927\u5c0f\uff0c\u5982\u679c\u5fd8\u4e86\u8fd9\u4e00\u6b65\u53ef\u80fd\u4f1a\u4ea7\u751f\u7f13\u5b58\u6ea2\u51fa\u3002 \u5982\u679c\u662f\u7f29\u77ed\u5b57\u7b26\u4e32\uff0c\u7a0b\u5e8f\u5728\u6267\u884c\u8fd9\u4e2a\u64cd\u4f5c\u540e\uff0c\u8981\u901a\u8fc7\u5185\u5b58\u91cd\u65b0\u5206\u914d\u6765\u91ca\u653e\u5b57\u7b26\u4e32\u4e0d\u518d\u4f7f\u7528\u7684\u7a7a\u95f4\uff0c\u5982\u679c\u5fd8\u4e86\u90a3\u5c31\u4f1a\u4ea7\u751f\u5185\u5b58\u6cc4\u6f0f\u3002 \u56e0\u4e3a\u5185\u5b58\u5206\u914d\u6d89\u53ca\u590d\u6742\u7684\u7b97\u6cd5\uff0c\u8fd8\u53ef\u80fd\u9700\u8981\u6267\u884c\u7cfb\u7edf\u8c03\u7528\uff0c\u6240\u4ee5\u5b83\u901a\u5e38\u90fd\u662f\u4e00\u4e2a\u6bd4\u8f83\u8017\u65f6\u7684\u64cd\u4f5c\u3002\u5728\u4e00\u822c\u7684\u7a0b\u5e8f\u4e2d\u5982\u679c\u4fee\u6539\u5b57\u7b26\u4e32\u7684\u573a\u666f\u4e0d\u592a\u5e38\u89c1\uff0c\u90a3\u4e48\u6bcf\u6b21\u4fee\u6539\u5185\u5b58\u90fd\u91cd\u65b0\u5206\u914d\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u4f46\u662fRedis\u4f5c\u4e3a\u6570\u636e\u5e93\uff0c\u5bf9\u6027\u80fd\u8981\u6c42\u5f88\u9ad8\uff0c\u5982\u679c\u9891\u7e41\u7684\u8fdb\u884c\u5185\u5b58\u91cd\u65b0\u5206\u914d\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u52bf\u5fc5\u4f1a\u5f71\u54cd\u6027\u80fd\u3002 \u4e3a\u4e86\u907f\u514dC\u5b57\u7b26\u4e32\u7684\u8fd9\u79cd\u7f3a\u9677\uff0cSDS\u901a\u8fc7\u672a\u4f7f\u7528\u7a7a\u95f4\u89e3\u9664\u4e86 \u5b57\u7b26\u4e32\u957f\u5ea6\u548c\u5e95\u5c42\u5b57\u7b26\u6570\u7ec4\u957f\u5ea6 \u4e4b\u95f4\u7684\u5173\u8054\uff0c\u4e5f\u5c31\u662f\u6570\uff0c sdshdr \u4e2d\u7684 len \u548c alloc \u5e76\u4e0d\u4e00\u5b9a\u76f8\u7b49\u3002\u4e3b\u8981\u8868\u73b0\u4e3a\u4e24\u79cd\u7b56\u7565\uff1a","title":"2.2.3 \u51cf\u5c11\u5b57\u7b26\u4e32\u4fee\u6539\u5e26\u6765\u7684\u5185\u5b58\u91cd\u65b0\u5206\u914d\u6b21\u6570"},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/#a","text":"\u7528\u4e8e\u4f18\u5316SDS\u5b57\u7b26\u4e32\u7684\u589e\u957f\u64cd\u4f5c\uff1a\u5f53SDS\u7684API\u5bf9\u4e00\u4e2aSDS\u8fdb\u884c\u4fee\u6539\u5e76\u4e14\u9700\u8981\u5bf9SDS\u7684\u7a7a\u95f4\u8fdb\u884c\u6269\u5c55\u7684\u65f6\u5019\uff0c\u7a0b\u5e8f\u4e0d\u4ec5\u4f1a\u4e3aSDS\u5206\u914d\u4fee\u6539\u6240\u5fc5\u987b\u7684\u7a7a\u95f4\uff0c\u8fd8\u4f1a\u4e3aSDS\u5206\u914d\u989d\u5916\u7684\u672a\u4f7f\u7528\u7a7a\u95f4\uff0c\u5206\u914d\u7b56\u7565\u5982\u4e0b\uff1a \u5982\u679c\u5bf9SDS\u4fee\u6539\u540e\uff0c\u5b57\u7b26\u4e32\u957f\u5ea6\u5c0f\u4e8e1MB\uff08\u5373len\u5c5e\u6027\u5c0f\u4e8e1MB\uff09\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5c06\u5206\u914d\u548clen\u5c5e\u6027\u540c\u6837\u5927\u5c0f\u7684\u672a\u4f7f\u7528\u7a7a\u95f4\u3002 \u5982\u679c\u5bf9SDS\u4fee\u6539\u540e\uff0c\u5b57\u7b26\u4e32\u957f\u5ea6\u5927\u4e8e1MB\uff0c\u90a3\u4e48\u7a0b\u5e8f\u4f1a\u5206\u914d1MB\u7684\u672a\u4f7f\u7528\u7a7a\u95f4\u3002","title":"a) \u7a7a\u95f4\u9884\u5206\u914d"},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/#b","text":"\u7528\u4e8e\u4f18\u5316SDS\u5b57\u7b26\u4e32\u7684\u7f29\u77ed\u64cd\u4f5c\uff1a\u5f53SDS\u7684API\u9700\u8981\u7f29\u77edSDS\u4fdd\u5b58\u7684\u5b57\u7b26\u4e32\u65f6\uff0c\u7a0b\u5e8f\u5e76\u4e0d\u4f1a\u7acb\u5373\u8fdb\u884c\u5185\u5b58\u5206\u914d\u6765\u56de\u6536\u591a\u51fa\u6765\u7684\u5b57\u8282\uff0c\u800c\u662f\u53ea\u66f4\u65b0len\u7684\u503c\u3002 \u76f8\u5173\u51fd\u6570\uff1a src/sds.c \uff1a /* Modify an sds string in-place to make it empty (zero length). * However all the existing buffer is not discarded but set as free space * so that next append operations will not require allocations up to the * number of bytes previously available. */ void sdsclear ( sds s ) { sdssetlen ( s , 0 ); s [ 0 ] = '\\0' ; } src/sds.h \uff1a static inline void sdssetlen ( sds s , size_t newlen ) { unsigned char flags = s [ -1 ]; switch ( flags & SDS_TYPE_MASK ) { case SDS_TYPE_5 : { unsigned char * fp = (( unsigned char * ) s ) -1 ; * fp = SDS_TYPE_5 | ( newlen << SDS_TYPE_BITS ); } break ; case SDS_TYPE_8 : SDS_HDR ( 8 , s ) -> len = newlen ; break ; case SDS_TYPE_16 : SDS_HDR ( 16 , s ) -> len = newlen ; break ; case SDS_TYPE_32 : SDS_HDR ( 32 , s ) -> len = newlen ; break ; case SDS_TYPE_64 : SDS_HDR ( 64 , s ) -> len = newlen ; break ; } } \u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff0c\u53ef\u4ee5\u907f\u514d\u7f29\u77ed\u5b57\u7b26\u4e32\u65f6\u5019\u7684\u5185\u91cd\u65b0\u5206\u914d\uff0c\u5e76\u4e3a\u540e\u7eed\u53ef\u80fd\u7684\u5b57\u7b26\u589e\u957f\u8fdb\u884c\u4e86\u4f18\u5316\uff08\u5982\u679c\u672a\u4f7f\u7528\u7a7a\u95f4\u8db3\u591f\uff0c\u5219\u4e0d\u9700\u8981\u91cd\u65b0\u5206\u914d\u5185\u5b58\uff09","title":"b) \u60f0\u6027\u7a7a\u95f4\u91ca\u653e"},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/#224","text":"C\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\u5fc5\u987b\u7b26\u5408\u67d0\u79cd\u7f16\u7801\uff08\u6bd4\u5982ASCII\uff09\uff0c\u5e76\u4e14\u9664\u4e86\u672b\u5c3e\u4ee5\u5916\uff0c\u5b57\u7b26\u4e32\u4e0d\u80fd\u5305\u542b\u7a7a\u5b57\u7b26\uff0c\u5373\u5c06\u7a7a\u5b57\u7b26\u4f5c\u4e3a\u5b57\u7b26\u4e32\u7ed3\u675f\u7684\u6807\u5fd7\uff0c\u8fd9\u79cd\u9650\u5236\u4f7f\u5f97C\u5b57\u7b26\u4e32\u53ea\u80fd\u4fdd\u5b58\u6587\u672c\u6570\u636e\uff0c\u800c\u4e0d\u80fd\u4fdd\u5b58\u56fe\u7247\u3001\u97f3\u9891\u3001\u89c6\u9891\u3001\u538b\u7f29\u6587\u4ef6\u8fd9\u6837\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u3002\u6bd4\u5982\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\"Redis Cluster\"\uff0cC\u5b57\u7b26\u4e32\u5c31\u53ea\u80fd\u8bc6\u522b\u51fa\u5176\u4e2d\"Redis\"\u800c\u5ffd\u7565\u4e4b\u540e\u7684\"Cluster\"\u3002 \u76f8\u6bd4\u4e4b\u4e0b\uff0cSDS\u7684API\u90fd\u662f\u4ee5\u5904\u7406\u4e8c\u8fdb\u5236\u7684\u65b9\u5f0f\u6765\u5904\u7406SDS\u76b4\u6cd5\u5728buf\u6570\u7ec4\u91cc\u9762\u7684\u6570\u636e\uff0c\u7a0b\u5e8f\u4e0d\u4f1a\u5bf9\u5176\u4e2d\u7684\u6570\u636e\u505a\u4efb\u4f55\u9650\u5236\u3001\u8fc7\u6ee4\u3001\u6216\u8005\u5047\u8bbe\uff0c\u6570\u636e\u5728\u5199\u5165\u65f6\u662f\u4ec0\u4e48\u6837\u7684\uff0c\u88ab\u8bfb\u53d6\u7684\u65f6\u5019\u5c31\u662f\u4ec0\u4e48\u6837\u7684\uff0c\u8fd9\u4e5f\u662f\u6211\u4eec\u628abuf\u6210\u4e3a\u5b57\u8282\u6570\u7ec4\u7684\u539f\u56e0\uff0c\u540c\u6837\u4fdd\u5b58\"Redis Cluster\"\uff0cSDS\u5c31\u4e0d\u4f1a\u6709\u95ee\u9898\uff0c\u56e0\u4e3aSDS\u4f7f\u7528len\u5c5e\u6027\u7684\u503c\u6765\u5224\u65ad\u5b57\u7b26\u4e32\u7684\u7ed3\u675f\u3002","title":"2.2.4 \u4e8c\u8fdb\u5236\u5b89\u5168"},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/#225-c","text":"\u867d\u7136SDS\u7684API\u90fd\u662f\u4e8c\u8fdb\u5236\u5b89\u5168\u7684\uff0c\u4f46\u662f\u5b83\u4eec\u4e00\u6837\u9075\u5faaC\u5b57\u7b26\u4e32\u4ee5\u7a7a\u5b57\u7b26\u7ed3\u5c3e\u7684\u60ef\u4f8b\uff0c\u8fd9\u6837\u4e00\u6765\uff0cSDS\u53ef\u4ee5\u91cd\u7528\\<string.h>\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u3002","title":"2.2.5 \u517c\u5bb9\u90e8\u5206C\u5b57\u7b26\u4e32\u51fd\u6570"},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/#226","text":"C\u5b57\u7b26\u4e32\u548cSDS\u4e4b\u95f4\u7684\u533a\u522b\uff1a","title":"2.2.6 \u603b\u7ed3"},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/#23-sds-api","text":"sds sdsnew(const char *init) \uff1a\u6839\u636e\u4e00\u4e2a\u7a7a\u5b57\u7b26\u7ed3\u5c3e\u7684C\u5b57\u7b26\u4e32\u521b\u5efa\u4e00\u4e2a\u65b0\u7684sds\u5b57\u7b26\u4e32\u3002 sds sdsdup(const sds s) \uff1a\u590d\u5236\u4e00\u4e2asds\u5b57\u7b26\u4e32\u3002 todo\uff1a\u5f85\u8865\u5145\u3002\u3002\u3002","title":"2.3 SDS API"},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/#24","text":"Redis\u53ea\u4f1a\u4f7f\u7528C\u5b57\u7b26\u4e32\u4f5c\u4e3a\u5b57\u9762\u91cf\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0cRedis\u4f7f\u7528SDS\u4f5c\u4e3a\u5b57\u7b26\u4e32\u8868\u793a\u3002 \u6bd4\u8d77C\u5b57\u7b26\u4e32\uff0cSDS\u5177\u6709\u4ee5\u4e0b\u4f18\u70b9\uff1a \\(O(1)\\) \u65f6\u95f4\u590d\u6742\u5ea6\u83b7\u53d6\u5b57\u7b26\u4e32\u957f\u5ea6 \u5206\u914d\u5197\u4f59\u7a7a\u95f4\uff0c\u675c\u7edd\u7f13\u51b2\u533a\u6ea2\u51fa \u51cf\u5c11\u4fee\u6539\u5b57\u7b26\u4e32\u957f\u5ea6\u65f6\u6240\u9700\u7684\u5185\u5b58\u91cd\u5206\u914d\u6b21\u6570 \u4e8c\u8fdb\u5236\u5b89\u5168 \u517c\u5bb9\u90e8\u5206C\u5b57\u7b26\u4e32\u51fd\u6570","title":"2.4  \u91cd\u70b9\u56de\u987e"},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/#3","text":"","title":"3.\u90e8\u5206\u6e90\u7801\u89e3\u6790"},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/#31","text":"Redis\u5b57\u7b26\u4e32\u6709\u4e09\u79cd\u7f16\u7801\u65b9\u5f0f\uff1a int\uff1a\u5982\u679c\u5b57\u7b26\u4e32\u53ef\u4ee5\u8f6c\u4e3a\u8303\u56f4\u4e3a8\u5b57\u8282\uff08-9223372036854775808~9223372036854775807\uff09\u7684\u957f\u957f\u6574\u578b embede\uff1a\u4e0d\u80fd\u8f6c\u4e3aint\uff0c\u540c\u65f6\u5b57\u7b26\u4e32\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e44 raw\uff1a\u4e0d\u80fd\u8f6c\u4e3aint\uff0c\u540c\u65f6\u5b57\u7b26\u4e32\u957f\u5ea6\u5927\u4e8e44 \u901a\u8fc7 object encoding key_name \u53ef\u4ee5\u67e5\u770bRedis\u5bf9\u8c61\u7684\u7f16\u7801\u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u67e5\u770b\u4e0b\u4e0a\u8ff0\u60c5\u51b5\uff1a a) \u67e5\u770bint\u7f16\u7801\uff1a 127 .0.0.1:6379> set int_min -9223372036854775808 OK 127 .0.0.1:6379> object encoding int_min \"int\" 127 .0.0.1:6379> set int_min -9223372036854775809 OK 127 .0.0.1:6379> object encoding int_min \"embstr\" 127 .0.0.1:6379> set int_max 9223372036854775807 OK 127 .0.0.1:6379> object encoding int_max \"int\" 127 .0.0.1:6379> set int_max 9223372036854775808 OK 127 .0.0.1:6379> object encoding int_max \"embstr\" \u53ef\u4ee5\u770b\u5230\uff0c\u8d85\u51fa\u4e86\u8303\u56f4\u540e\uff0c\u7f16\u7801\u5c31\u4e0d\u518d\u662fint\u4e86\uff0c\u6e90\u7801\u4e2d\u4e0e\u8fd9\u90e8\u5206\u903b\u8f91\u76f8\u5173\u7684\u4ee3\u7801\u5982\u4e0b\uff1a /* Try to encode a string object in order to save space */ robj * tryObjectEncoding ( robj * o ) { long value ; sds s = o -> ptr ; size_t len ; /* Make sure this is a string object, the only type we encode * in this function. Other types use encoded memory efficient * representations but are handled by the commands implementing * the type. */ serverAssertWithInfo ( NULL , o , o -> type == OBJ_STRING ); /* We try some specialized encoding only for objects that are * RAW or EMBSTR encoded, in other words objects that are still * in represented by an actually array of chars. */ if ( ! sdsEncodedObject ( o )) return o ; // \u53ea\u6709EMBSTR\u548cRAW\u7f16\u7801\u624d\u4f1a\u5904\u7406\uff0c\u5426\u5219\u8fd4\u56de /* It's not safe to encode shared objects: shared objects can be shared * everywhere in the \"object space\" of Redis and may end in places where * they are not handled. We handle them only as values in the keyspace. */ if ( o -> refcount > 1 ) return o ; // \u5982\u679c\u662f\u5171\u4eab\u7684\u5bf9\u8c61\u5219\u4e0d\u5904\u7406\uff0c\u76f4\u63a5\u8fd4\u56de /* Check if we can represent this string as a long integer. * Note that we are sure that a string larger than 20 chars is not * representable as a 32 nor 64 bit integer. */ len = sdslen ( s ); if ( len <= 20 && string2l ( s , len , & value )) { // \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u4e0d\u662f\u53ef\u4ee5\u8f6c\u4e3a\u4e00\u4e2a\u957f\u6574\u578b /* This object is encodable as a long. Try to use a shared object. * Note that we avoid using shared integers when maxmemory is used * because every object needs to have a private LRU field for the LRU * algorithm to work well. */ if (( server . maxmemory == 0 || ! ( server . maxmemory_policy & MAXMEMORY_FLAG_NO_SHARED_INTEGERS )) && value >= 0 && value < OBJ_SHARED_INTEGERS ) { // \u5c0f\u4e8e10000\u662f\u5171\u4eab\u6574\u578b decrRefCount ( o ); incrRefCount ( shared . integers [ value ]); return shared . integers [ value ]; } else { if ( o -> encoding == OBJ_ENCODING_RAW ) { // raw\u7c7b\u578b\u7f16\u7801\u7684\u5904\u7406 sdsfree ( o -> ptr ); o -> encoding = OBJ_ENCODING_INT ; o -> ptr = ( void * ) value ; return o ; } else if ( o -> encoding == OBJ_ENCODING_EMBSTR ) { // emb\u7c7b\u578b\u7f16\u7801\u7684\u5904\u7406 decrRefCount ( o ); return createStringObjectFromLongLongForValue ( value ); } } } /* If the string is small and is still RAW encoded, * try the EMBSTR encoding which is more efficient. * In this representation the object and the SDS string are allocated * in the same chunk of memory to save space and cache misses. */ if ( len <= OBJ_ENCODING_EMBSTR_SIZE_LIMIT ) { robj * emb ; if ( o -> encoding == OBJ_ENCODING_EMBSTR ) return o ; emb = createEmbeddedStringObject ( s , sdslen ( s )); decrRefCount ( o ); return emb ; } /* We can't encode the object... * * Do the last try, and at least optimize the SDS string inside * the string object to require little space, in case there * is more than 10% of free space at the end of the SDS string. * * We do that only for relatively large strings as this branch * is only entered if the length of the string is greater than * OBJ_ENCODING_EMBSTR_SIZE_LIMIT. */ trimStringObjectIfNeeded ( o ); /* Return the original object. */ return o ; } b) \u67e5\u770bembede\u7f16\u7801\u548craw\u7f16\u7801\uff1a 127 .0.0.1:6379> set str_demo1 'abcdefghijklmnopqrstuvwxyz012345678901234567' OK 127 .0.0.1:6379> object encoding str_demo1 \"embstr\" 127 .0.0.1:6379> set str_demo2 'abcdefghijklmnopqrstuvwxyz0123456789012345678' OK 127 .0.0.1:6379> object encoding str_demo2 \"raw\" \u53ef\u4ee5\u770b\u5230\uff0c\u5b57\u7b26\u4e32\u957f\u5ea6\u5927\u4e8e44\u65f6\uff0c\u7f16\u7801\u7c7b\u578b\u4e3araw\uff0c\u5426\u5219\u7f16\u7801\u7c7b\u578b\u4e3aembstr\uff0c\u76f8\u5173\u6e90\u7801\u5982\u4e0b\uff1a /* Create a string object with EMBSTR encoding if it is smaller than * OBJ_ENCODING_EMBSTR_SIZE_LIMIT, otherwise the RAW encoding is * used. * * The current limit of 44 is chosen so that the biggest string object * we allocate as EMBSTR will still fit into the 64 byte arena of jemalloc. */ #define OBJ_ENCODING_EMBSTR_SIZE_LIMIT 44 robj * createStringObject ( const char * ptr , size_t len ) { if ( len <= OBJ_ENCODING_EMBSTR_SIZE_LIMIT ) return createEmbeddedStringObject ( ptr , len ); else return createRawStringObject ( ptr , len ); } \u601d\u8003\uff1a\u4e3a\u4ec0\u4e48raw\u7f16\u7801\u548cembstr\u7f16\u7801\u7684\u5206\u754c\u7ebf\u662f44\u5462\uff1f \u7b54\uff1ajemalloc\u5206\u914d\u5185\u5b58\u5927\u5c0f\u7684\u5355\u4f4d\u90fd\u662f 2\u30014\u30018\u300116\u300132\u300164\u7b49\uff0c\u5982\u679c\u603b\u4f53\u8d85\u51fa\u4e86 64 \u5b57\u8282\uff0cRedis \u8ba4\u4e3a\u5b83\u662f\u4e00\u4e2a\u5927\u5b57\u7b26\u4e32\u3002\u5982\u4e0b\u56fe\u53ef\u4ee5\u770b\u5230\uff0cembstr\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u662f\u4e00\u4e2a\u8fde\u7eed\u7684\u7a7a\u95f4\uff0c\u5176\u5b9eredisObject\u5360\u752816\u4e2a\u5b57\u8282\uff0csdshdr\u6700\u5c11\u5360\u75283\u4e2a\u5b57\u8282\uff0c\u90a3\u4e48\u8fd8\u5269\u4e0b64-3-16=45\u4e2a\u5b57\u8282\u4fdd\u5b58\u5b57\u7b26\u6570\u7ec4\uff0c\u518d\u526a\u53bb\u5b57\u7b26\u6570\u7ec4\u6700\u540e\u4fdd\u5b58\u7684'\\0'\uff0c\u90a3\u4e48\u5c31\u5269\u4e0b44\u4e2a\u5b57\u8282\u4e86\uff0c\u6240\u4ee5embstr\u7f16\u7801\u7684\u5b57\u7b26\u4e32\u6700\u591a44\u4e2a\u5b57\u8282\u3002 redisObject \u7684\u5b9a\u4e49\uff1a #define LRU_BITS 24 typedef struct redisObject { unsigned type : 4 ; unsigned encoding : 4 ; unsigned lru : LRU_BITS ; /* LRU time (relative to global lru_clock) or * LFU data (least significant 8 bits frequency * and most significant 16 bits access time). */ int refcount ; void * ptr ; } robj ;","title":"3.1 \u5b57\u7b26\u4e32\u7684\u7f16\u7801"},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_1","text":"","title":""},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/#4","text":"todo\u3002\u3002\u3002","title":"4. \u603b\u7ed3"},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/","text":"1. \u6982\u5ff5 \u00b6","title":"\u94fe\u8868"},{"location":"redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#1","text":"","title":"1. \u6982\u5ff5"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","text":"Epoll \u00b6 Epoll\u539f\u7406\u89e3\u6790_~~ LINUX ~~-CSDN\u535a\u5ba2_epoll\u539f\u7406 Epoll\u7684\u672c\u8d28\uff08\u5185\u90e8\u5b9e\u73b0\u539f\u7406\uff09_Likes\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_epoll \u6df1\u5ea6\u7406\u89e3select\u3001poll\u548cepoll_\u50bb\u773c\u54e5\u7684\u535a\u5ba2-CSDN\u535a\u5ba2 select\u3001poll\u3001epoll\u4e4b\u95f4\u7684\u533a\u522b(\u641c\u72d7\u9762\u8bd5) - aspirant - \u535a\u5ba2\u56ed (cnblogs.com) \u6982\u5ff5\uff1a IO\u591a\u8def\u590d\u7528\u6280\u672f\uff08\u8fdb\u7a0b\u963b\u585e\u4e0d\u5360\u7528CPU\u8d44\u6e90\uff09\u3002 select\u6b65\u9aa4 \uff1a \u4e3e\u4f8b\u6bd4\u5982\u8bf4\u8fdb\u7a0bA\uff0c\u8981\u540c\u65f6\u76d1\u542cSOCKET1\u3001SOCKET2\u3001SOCKET3\u4e09\u4e2a\u5957\u63a5\u5b57 \u8fdb\u7a0bA\u963b\u585e\uff0c\u5185\u6838\u5c06A\u4ece\u5de5\u4f5c\u961f\u5217\u79fb\u5230\u8fd9\u4e2a\u4e09\u4e2aSOCKET\u7684\u7b49\u5f85\u961f\u5217\u4e2d\uff1b SOCKET1\u63a5\u6536\u5230\u4e86\u6570\u636e\uff0c\u4e2d\u65ad\u7a0b\u5e8f\u5c06\u6240\u6709SOCKET\u7b49\u5f85\u961f\u5217\u4e2d\u7684\u8fdb\u7a0b\u79fb\u5165\u5de5\u4f5c\u961f\u5217\u3002 \u540c\u6b65\u5f02\u6b65\u3001\u963b\u585e\u975e\u963b\u585e \u00b6 \u201c\u963b\u585e\u201d\u4e0e\"\u975e\u963b\u585e\"\u4e0e\"\u540c\u6b65\"\u4e0e\u201c\u5f02\u6b65\"\u4e0d\u80fd\u7b80\u5355\u7684\u4ece\u5b57\u9762\u7406\u89e3\uff0c\u63d0\u4f9b\u4e00\u4e2a\u4ece\u5206\u5e03\u5f0f\u7cfb\u7edf\u89d2\u5ea6\u7684\u56de\u7b54\u3002 1.\u540c\u6b65\u4e0e\u5f02\u6b65 \u540c\u6b65\u548c\u5f02\u6b65\u5173\u6ce8\u7684\u662f \u6d88\u606f\u901a\u4fe1\u673a\u5236 (synchronous communication/ asynchronous communication) \u6240\u8c13\u540c\u6b65\uff0c\u5c31\u662f\u5728\u53d1\u51fa\u4e00\u4e2a\u8c03\u7528\u65f6\uff0c\u5728\u6ca1\u6709\u5f97\u5230\u7ed3\u679c\u4e4b\u524d\uff0c\u8be5\u8c03\u7528\u5c31\u4e0d\u8fd4\u56de\u3002\u4f46\u662f\u4e00\u65e6\u8c03\u7528\u8fd4\u56de\uff0c\u5c31\u5f97\u5230\u8fd4\u56de\u503c\u4e86\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u7531 \u8c03\u7528\u8005 \u4e3b\u52a8\u7b49\u5f85\u8fd9\u4e2a\u8c03\u7528\u7684\u7ed3\u679c\u3002 \u800c\u5f02\u6b65\u5219\u662f\u76f8\u53cd\uff0c\u8c03\u7528\u5728\u53d1\u51fa\u4e4b\u540e\uff0c\u8fd9\u4e2a\u8c03\u7528\u5c31\u76f4\u63a5\u8fd4\u56de\u4e86\uff0c\u6240\u4ee5\u6ca1\u6709\u8fd4\u56de\u7ed3\u679c \u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5f53\u4e00\u4e2a\u5f02\u6b65\u8fc7\u7a0b\u8c03\u7528\u53d1\u51fa\u540e\uff0c\u8c03\u7528\u8005\u4e0d\u4f1a\u7acb\u523b\u5f97\u5230\u7ed3\u679c\u3002\u800c\u662f\u5728 \u8c03\u7528 \u53d1\u51fa\u540e\uff0c*\u88ab\u8c03\u7528\u8005\u901a\u8fc7\u72b6\u6001\u3001\u901a\u77e5\u6765\u901a\u77e5\u8c03\u7528\u8005\uff0c\u6216\u901a\u8fc7\u56de\u8c03\u51fd\u6570\u5904\u7406\u8fd9\u4e2a\u8c03\u7528\u3002 \u4e3e\u4e2a\u901a\u4fd7\u7684\u4f8b\u5b50\uff1a \u4f60\u6253\u7535\u8bdd\u95ee\u4e66\u5e97\u8001\u677f\u6709\u6ca1\u6709\u300a\u5206\u5e03\u5f0f\u7cfb\u7edf\u300b\u8fd9\u672c\u4e66\uff0c\u5982\u679c\u662f\u540c\u6b65\u901a\u4fe1\u673a\u5236\uff0c\u4e66\u5e97\u8001\u677f\u4f1a\u8bf4\uff0c\u4f60\u7a0d\u7b49\uff0c\u201d\u6211\u67e5\u4e00\u4e0b\"\uff0c\u7136\u540e\u5f00\u59cb\u67e5\u554a\u67e5\uff0c\u7b49\u67e5\u597d\u4e86\uff08\u53ef\u80fd\u662f5\u79d2\uff0c\u4e5f\u53ef\u80fd\u662f\u4e00\u5929\uff09\u544a\u8bc9\u4f60\u7ed3\u679c\uff08\u8fd4\u56de\u7ed3\u679c\uff09\u3002 \u800c\u5f02\u6b65\u901a\u4fe1\u673a\u5236\uff0c\u4e66\u5e97\u8001\u677f\u76f4\u63a5\u544a\u8bc9\u4f60\u6211\u67e5\u4e00\u4e0b\u554a\uff0c\u67e5\u597d\u4e86\u6253\u7535\u8bdd\u7ed9\u4f60\uff0c\u7136\u540e\u76f4\u63a5\u6302\u7535\u8bdd\u4e86\uff08\u4e0d\u8fd4\u56de\u7ed3\u679c\uff09\u3002\u7136\u540e\u67e5\u597d\u4e86\uff0c\u4ed6\u4f1a\u4e3b\u52a8\u6253\u7535\u8bdd\u7ed9\u4f60\u3002\u5728\u8fd9\u91cc\u8001\u677f\u901a\u8fc7\u201c\u56de\u7535\u201d\u8fd9\u79cd\u65b9\u5f0f\u6765\u56de\u8c03\u3002 2.\u963b\u585e\u4e0e\u975e\u963b\u585e \u963b\u585e\u548c\u975e\u963b\u585e\u5173\u6ce8\u7684\u662f \u7a0b\u5e8f\u5728\u7b49\u5f85\u8c03\u7528\u7ed3\u679c\uff08\u6d88\u606f\uff0c\u8fd4\u56de\u503c\uff09\u65f6\u7684\u72b6\u6001. \u963b\u585e\u8c03\u7528\u662f\u6307\u8c03\u7528\u7ed3\u679c\u8fd4\u56de\u4e4b\u524d\uff0c\u5f53\u524d\u7ebf\u7a0b\u4f1a\u88ab\u6302\u8d77\u3002\u8c03\u7528\u7ebf\u7a0b\u53ea\u6709\u5728\u5f97\u5230\u7ed3\u679c\u4e4b\u540e\u624d\u4f1a\u8fd4\u56de\u3002 \u975e\u963b\u585e\u8c03\u7528\u6307\u5728\u4e0d\u80fd\u7acb\u523b\u5f97\u5230\u7ed3\u679c\u4e4b\u524d\uff0c\u8be5\u8c03\u7528\u4e0d\u4f1a\u963b\u585e\u5f53\u524d\u7ebf\u7a0b\u3002 \u8fd8\u662f\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c \u4f60\u6253\u7535\u8bdd\u95ee\u4e66\u5e97\u8001\u677f\u6709\u6ca1\u6709\u300a\u5206\u5e03\u5f0f\u7cfb\u7edf\u300b\u8fd9\u672c\u4e66\uff0c\u4f60\u5982\u679c\u662f\u963b\u585e\u5f0f\u8c03\u7528\uff0c\u4f60\u4f1a\u4e00\u76f4\u628a\u81ea\u5df1\u201c\u6302\u8d77\u201d\uff0c\u76f4\u5230\u5f97\u5230\u8fd9\u672c\u4e66\u6709\u6ca1\u6709\u7684\u7ed3\u679c\uff0c\u5982\u679c\u662f\u975e\u963b\u585e\u5f0f\u8c03\u7528\uff0c\u4f60\u4e0d\u7ba1\u8001\u677f\u6709\u6ca1\u6709\u544a\u8bc9\u4f60\uff0c\u4f60\u81ea\u5df1\u5148\u4e00\u8fb9\u53bb\u73a9\u4e86\uff0c \u5f53\u7136\u4f60\u4e5f\u8981\u5076\u5c14\u8fc7\u51e0\u5206\u949fcheck\u4e00\u4e0b\u8001\u677f\u6709\u6ca1\u6709\u8fd4\u56de\u7ed3\u679c\u3002 \u5728\u8fd9\u91cc\u963b\u585e\u4e0e\u975e\u963b\u585e\u4e0e\u662f\u5426\u540c\u6b65\u5f02\u6b65\u65e0\u5173\u3002\u8ddf\u8001\u677f\u901a\u8fc7\u4ec0\u4e48\u65b9\u5f0f\u56de\u7b54\u4f60\u7ed3\u679c\u65e0\u5173\u3002","title":"\u64cd\u4f5c\u7cfb\u7edf"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#epoll","text":"Epoll\u539f\u7406\u89e3\u6790_~~ LINUX ~~-CSDN\u535a\u5ba2_epoll\u539f\u7406 Epoll\u7684\u672c\u8d28\uff08\u5185\u90e8\u5b9e\u73b0\u539f\u7406\uff09_Likes\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_epoll \u6df1\u5ea6\u7406\u89e3select\u3001poll\u548cepoll_\u50bb\u773c\u54e5\u7684\u535a\u5ba2-CSDN\u535a\u5ba2 select\u3001poll\u3001epoll\u4e4b\u95f4\u7684\u533a\u522b(\u641c\u72d7\u9762\u8bd5) - aspirant - \u535a\u5ba2\u56ed (cnblogs.com) \u6982\u5ff5\uff1a IO\u591a\u8def\u590d\u7528\u6280\u672f\uff08\u8fdb\u7a0b\u963b\u585e\u4e0d\u5360\u7528CPU\u8d44\u6e90\uff09\u3002 select\u6b65\u9aa4 \uff1a \u4e3e\u4f8b\u6bd4\u5982\u8bf4\u8fdb\u7a0bA\uff0c\u8981\u540c\u65f6\u76d1\u542cSOCKET1\u3001SOCKET2\u3001SOCKET3\u4e09\u4e2a\u5957\u63a5\u5b57 \u8fdb\u7a0bA\u963b\u585e\uff0c\u5185\u6838\u5c06A\u4ece\u5de5\u4f5c\u961f\u5217\u79fb\u5230\u8fd9\u4e2a\u4e09\u4e2aSOCKET\u7684\u7b49\u5f85\u961f\u5217\u4e2d\uff1b SOCKET1\u63a5\u6536\u5230\u4e86\u6570\u636e\uff0c\u4e2d\u65ad\u7a0b\u5e8f\u5c06\u6240\u6709SOCKET\u7b49\u5f85\u961f\u5217\u4e2d\u7684\u8fdb\u7a0b\u79fb\u5165\u5de5\u4f5c\u961f\u5217\u3002","title":"Epoll"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#_1","text":"\u201c\u963b\u585e\u201d\u4e0e\"\u975e\u963b\u585e\"\u4e0e\"\u540c\u6b65\"\u4e0e\u201c\u5f02\u6b65\"\u4e0d\u80fd\u7b80\u5355\u7684\u4ece\u5b57\u9762\u7406\u89e3\uff0c\u63d0\u4f9b\u4e00\u4e2a\u4ece\u5206\u5e03\u5f0f\u7cfb\u7edf\u89d2\u5ea6\u7684\u56de\u7b54\u3002 1.\u540c\u6b65\u4e0e\u5f02\u6b65 \u540c\u6b65\u548c\u5f02\u6b65\u5173\u6ce8\u7684\u662f \u6d88\u606f\u901a\u4fe1\u673a\u5236 (synchronous communication/ asynchronous communication) \u6240\u8c13\u540c\u6b65\uff0c\u5c31\u662f\u5728\u53d1\u51fa\u4e00\u4e2a\u8c03\u7528\u65f6\uff0c\u5728\u6ca1\u6709\u5f97\u5230\u7ed3\u679c\u4e4b\u524d\uff0c\u8be5\u8c03\u7528\u5c31\u4e0d\u8fd4\u56de\u3002\u4f46\u662f\u4e00\u65e6\u8c03\u7528\u8fd4\u56de\uff0c\u5c31\u5f97\u5230\u8fd4\u56de\u503c\u4e86\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u7531 \u8c03\u7528\u8005 \u4e3b\u52a8\u7b49\u5f85\u8fd9\u4e2a\u8c03\u7528\u7684\u7ed3\u679c\u3002 \u800c\u5f02\u6b65\u5219\u662f\u76f8\u53cd\uff0c\u8c03\u7528\u5728\u53d1\u51fa\u4e4b\u540e\uff0c\u8fd9\u4e2a\u8c03\u7528\u5c31\u76f4\u63a5\u8fd4\u56de\u4e86\uff0c\u6240\u4ee5\u6ca1\u6709\u8fd4\u56de\u7ed3\u679c \u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5f53\u4e00\u4e2a\u5f02\u6b65\u8fc7\u7a0b\u8c03\u7528\u53d1\u51fa\u540e\uff0c\u8c03\u7528\u8005\u4e0d\u4f1a\u7acb\u523b\u5f97\u5230\u7ed3\u679c\u3002\u800c\u662f\u5728 \u8c03\u7528 \u53d1\u51fa\u540e\uff0c*\u88ab\u8c03\u7528\u8005\u901a\u8fc7\u72b6\u6001\u3001\u901a\u77e5\u6765\u901a\u77e5\u8c03\u7528\u8005\uff0c\u6216\u901a\u8fc7\u56de\u8c03\u51fd\u6570\u5904\u7406\u8fd9\u4e2a\u8c03\u7528\u3002 \u4e3e\u4e2a\u901a\u4fd7\u7684\u4f8b\u5b50\uff1a \u4f60\u6253\u7535\u8bdd\u95ee\u4e66\u5e97\u8001\u677f\u6709\u6ca1\u6709\u300a\u5206\u5e03\u5f0f\u7cfb\u7edf\u300b\u8fd9\u672c\u4e66\uff0c\u5982\u679c\u662f\u540c\u6b65\u901a\u4fe1\u673a\u5236\uff0c\u4e66\u5e97\u8001\u677f\u4f1a\u8bf4\uff0c\u4f60\u7a0d\u7b49\uff0c\u201d\u6211\u67e5\u4e00\u4e0b\"\uff0c\u7136\u540e\u5f00\u59cb\u67e5\u554a\u67e5\uff0c\u7b49\u67e5\u597d\u4e86\uff08\u53ef\u80fd\u662f5\u79d2\uff0c\u4e5f\u53ef\u80fd\u662f\u4e00\u5929\uff09\u544a\u8bc9\u4f60\u7ed3\u679c\uff08\u8fd4\u56de\u7ed3\u679c\uff09\u3002 \u800c\u5f02\u6b65\u901a\u4fe1\u673a\u5236\uff0c\u4e66\u5e97\u8001\u677f\u76f4\u63a5\u544a\u8bc9\u4f60\u6211\u67e5\u4e00\u4e0b\u554a\uff0c\u67e5\u597d\u4e86\u6253\u7535\u8bdd\u7ed9\u4f60\uff0c\u7136\u540e\u76f4\u63a5\u6302\u7535\u8bdd\u4e86\uff08\u4e0d\u8fd4\u56de\u7ed3\u679c\uff09\u3002\u7136\u540e\u67e5\u597d\u4e86\uff0c\u4ed6\u4f1a\u4e3b\u52a8\u6253\u7535\u8bdd\u7ed9\u4f60\u3002\u5728\u8fd9\u91cc\u8001\u677f\u901a\u8fc7\u201c\u56de\u7535\u201d\u8fd9\u79cd\u65b9\u5f0f\u6765\u56de\u8c03\u3002 2.\u963b\u585e\u4e0e\u975e\u963b\u585e \u963b\u585e\u548c\u975e\u963b\u585e\u5173\u6ce8\u7684\u662f \u7a0b\u5e8f\u5728\u7b49\u5f85\u8c03\u7528\u7ed3\u679c\uff08\u6d88\u606f\uff0c\u8fd4\u56de\u503c\uff09\u65f6\u7684\u72b6\u6001. \u963b\u585e\u8c03\u7528\u662f\u6307\u8c03\u7528\u7ed3\u679c\u8fd4\u56de\u4e4b\u524d\uff0c\u5f53\u524d\u7ebf\u7a0b\u4f1a\u88ab\u6302\u8d77\u3002\u8c03\u7528\u7ebf\u7a0b\u53ea\u6709\u5728\u5f97\u5230\u7ed3\u679c\u4e4b\u540e\u624d\u4f1a\u8fd4\u56de\u3002 \u975e\u963b\u585e\u8c03\u7528\u6307\u5728\u4e0d\u80fd\u7acb\u523b\u5f97\u5230\u7ed3\u679c\u4e4b\u524d\uff0c\u8be5\u8c03\u7528\u4e0d\u4f1a\u963b\u585e\u5f53\u524d\u7ebf\u7a0b\u3002 \u8fd8\u662f\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c \u4f60\u6253\u7535\u8bdd\u95ee\u4e66\u5e97\u8001\u677f\u6709\u6ca1\u6709\u300a\u5206\u5e03\u5f0f\u7cfb\u7edf\u300b\u8fd9\u672c\u4e66\uff0c\u4f60\u5982\u679c\u662f\u963b\u585e\u5f0f\u8c03\u7528\uff0c\u4f60\u4f1a\u4e00\u76f4\u628a\u81ea\u5df1\u201c\u6302\u8d77\u201d\uff0c\u76f4\u5230\u5f97\u5230\u8fd9\u672c\u4e66\u6709\u6ca1\u6709\u7684\u7ed3\u679c\uff0c\u5982\u679c\u662f\u975e\u963b\u585e\u5f0f\u8c03\u7528\uff0c\u4f60\u4e0d\u7ba1\u8001\u677f\u6709\u6ca1\u6709\u544a\u8bc9\u4f60\uff0c\u4f60\u81ea\u5df1\u5148\u4e00\u8fb9\u53bb\u73a9\u4e86\uff0c \u5f53\u7136\u4f60\u4e5f\u8981\u5076\u5c14\u8fc7\u51e0\u5206\u949fcheck\u4e00\u4e0b\u8001\u677f\u6709\u6ca1\u6709\u8fd4\u56de\u7ed3\u679c\u3002 \u5728\u8fd9\u91cc\u963b\u585e\u4e0e\u975e\u963b\u585e\u4e0e\u662f\u5426\u540c\u6b65\u5f02\u6b65\u65e0\u5173\u3002\u8ddf\u8001\u677f\u901a\u8fc7\u4ec0\u4e48\u65b9\u5f0f\u56de\u7b54\u4f60\u7ed3\u679c\u65e0\u5173\u3002","title":"\u540c\u6b65\u5f02\u6b65\u3001\u963b\u585e\u975e\u963b\u585e"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%95%B0%E6%8D%AE%E5%BA%93/","text":"Redis \u00b6 \u6570\u636e\u6301\u4e45\u5316 \u00b6 RDB \u00b6 \u670d\u52a1\u5668\u542f\u52a8\u7684\u65f6\u5019\uff0c\u68c0\u6d4b\u5230RDB\u6587\u4ef6\u5c31\u81ea\u52a8\u8f7d\u5165\uff08\u5982\u679c\u670d\u52a1\u5668\u5f00\u542f\u4e86AOF\uff0c\u4f1a\u4f18\u5148\u4f7f\u7528AOF\u6587\u4ef6\u8fd8\u539f\u6570\u636e\u5e93\u72b6\u6001\uff09\u3002 \u547d\u4ee4\uff1a save \u548c bgsave \uff0c save \u4f1a\u963b\u585eRedis\u670d\u52a1\u5668\u8fdb\u7a0b\uff0c bgsave \u5b50\u8fdb\u7a0b\u8d1f\u8d23\u521b\u5efaRDB\u6587\u4ef6\u3002 dirty\u8ba1\u6570\u5668 \uff1a\u4e0a\u4e00\u6b21\u6267\u884c save \u6216\u8005 bgsave \u547d\u4ee4\u540e\uff0c\u670d\u52a1\u5668\u5bf9\u6570\u636e\u5e93\u72b6\u6001\u8fdb\u884c\u591a\u5c11\u6b21\u4fee\u6539\u3002 lastsave\u5c5e\u6027\uff1a \u670d\u52a1\u4e0a\u6b21\u6267\u884c\u4fdd\u5b58\u64cd\u4f5c\u7684\u65f6\u95f4\u3002 \u6587\u4ef6\u7ed3\u6784\uff1a REDIS\u6807\u660e\u662fRDB\u6587\u4ef6 db_version\u8868\u793aRDB\u6587\u4ef6\u7684\u7248\u672c\u53f7 databases\u591a\u4e2a\u6570\u636e\u5e93\u5df2\u7ecf\u5bf9\u5e94\u7684\u952e\u503c check_sum\u6821\u9a8c\u548c\uff0c\u6839\u636e\u524d\u9762\u56db\u4e2a\u90e8\u5206\u8ba1\u7b97\u5f97\u51fa \u91cd\u70b9\uff1a AOF \u00b6 \u4e0eRDB\u4fdd\u5b58\u6570\u636e\u5e93\u4e2d\u7684\u952e\u503c\u5bf9\u6765\u8bb0\u5f55\u6570\u636e\u5e93\u5bf9\u5e94\u72b6\u6001\u4e0d\u540c\uff0cAOF\u662f\u901a\u8fc7\u4fdd\u5b58Redis\u670d\u52a1\u5668\u6267\u884c\u7684\u5199\u547d\u4ee4\u6765\u8bb0\u5f55\u6570\u636e\u5e93\u72b6\u6001\u3002 \u6587\u4ef6\u5199\u5165\uff1a \u547d\u4ee4\u8ffd\u52a0\uff1a\u5ba2\u6237\u7aef\u53d1\u9001\u5199\u547d\u4ee4->\u670d\u52a1\u7aef\u6267\u884c\u5199\u547d\u4ee4->\u5c06\u534f\u8bae\u5185\u5bb9\u8ffd\u52a0\u5230aof_buf\u7f13\u51b2\u533a\u672b\u5c3e\u3002 \u6587\u4ef6\u5199\u5165\uff1a \u6587\u4ef6\u540c\u6b65\uff08\u53ef\u4ee5\u7406\u89e3\u4e3a\u4fdd\u5b58\uff09\uff1a \u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u4e00\u822c\u8c03\u7528\u4e86write\u540e\u6570\u636e\u4e0d\u4f1a\u7acb\u9a6c\u5199\u5165\uff0c\u800c\u662f\u5148\u4fdd\u5b58\u5728\u5185\u5b58\u7f13\u51b2\u533a\u91cc\u9762\uff0c\u7b49\u5185\u5bb9\u5230\u4e86\u4e00\u5b9a\u5927\u5c0f\u6216\u8005\u65f6\u95f4\u8d85\u8fc7\u6307\u5b9a\u65f6\u9650\u540e\uff0c\u624d\u771f\u6b63\u5c06\u7f13\u51b2\u533a\u7684\u6570\u636e\u5199\u5230\u78c1\u76d8\u4e0a\u3002 \u6587\u4ef6\u8f7d\u5165\uff1a \u56e0\u4e3aAOF\u6587\u4ef6\u5305\u542b\u4e86\u91cd\u5efa\u6570\u636e\u5e93\u72b6\u6001\u9700\u8981\u7684\u6240\u6709\u5199\u547d\u4ee4\uff0c\u6240\u4ee5\u670d\u52a1\u5668\u53ea\u9700\u8981\u8bfb\u5165\u5e76\u91cd\u65b0\u6267\u884c\u4e00\u904d\u5c31\u884c\u4e86\uff08fake client\uff09\u3002 AOF\u91cd\u5199\uff1a AOF\u6587\u4ef6\u8d8a\u6765\u8d8a\u5927\uff0c\u5f71\u54cdRedis\u670d\u52a1\u5668\u3001\u5bbf\u4e3b\u673a\uff0c\u6062\u590d\u65f6\u95f4\u8fb9\u957f\u3002AOF\u91cd\u5199\uff0c\u7528\u4e0d\u5e26\u5197\u4f59\u547d\u4ee4\u7684\u65b0AOF\u6587\u4ef6\u4ee3\u66ff\uff08\u539f\u5b50\u64cd\u4f5c\uff09\u8001\u7684AOF\u6587\u4ef6\u3002 \u8bfb\u53d6\u73b0\u6709\u7684\u952e\u503c\u5bf9\uff0c\u7136\u540e\u7528\u4e00\u4e2a\u547d\u4ee4\u53bb\u4ee3\u66ff\u539f\u5148\u7684\u591a\u4e2a\u547d\u4ee4\uff0c\u5c06\u5f53\u524d\u952e\u503c\u5bf9\u8bb0\u5f55\u4e0b\u6765\u3002 \u91cd\u5199\u671f\u95f4\u670d\u52a1\u5668\u8fdb\u7a0b\u65b0\u5904\u7406\u7684\u547d\u4ee4\u8bf7\u6c42\u6539\u53d8\u6570\u636e\u5e93\u72b6\u6001\uff0c\u4f7f\u7528aof_rewrite_buf\uff1a \u5b50\u8fdb\u7a0b\u91cd\u5199\u5b8c\u6bd5\u540e\uff0c\u670d\u52a1\u5668\u8fdb\u7a0b\u5c06AOF\u91cd\u5199\u7f13\u51b2\u533a\u7684\u5185\u5bb9\u5199\u5230\u65b0\u7684AOF\u6587\u4ef6\u4e2d\u3002 \u91cd\u70b9\uff1a \u6df7\u5408\u6301\u4e45\u5316 \u00b6 redis4.0\u540e\u6709\u4e86\u6df7\u5408\u6301\u4e45\u5316\u7684\u7279\u6027\uff0c\u901a\u8fc7bgrewriteaof\u8fdb\u884cAOF\u91cd\u5199\u7684\u65f6\u5019\uff0c\u5148\u6309\u7167rdb\u683c\u5f0f\u5bf9\u6570\u636e\u5e93\u72b6\u6001\u8fdb\u884c\u4fdd\u5b58\uff0c\u518d\u5c06aof_rewrite_buf\u5199\u5230AOF\u6587\u4ef6\u4e2d\u3002 \u53c2\u8003\u56de\u7b54 \u00b6 bgsave\u505a\u955c\u50cf\u5168\u91cf\u6301\u4e45\u5316\uff0caof\u505a\u589e\u91cf\u6301\u4e45\u5316\u3002\u56e0\u4e3abgsave\u4f1a\u8017\u8d39\u8f83\u957f\u65f6\u95f4\uff0c\u4e0d\u591f\u5b9e\u65f6\uff0c\u5728\u505c\u673a\u7684\u65f6\u5019\u4f1a\u5bfc\u81f4\u5927\u91cf\u4e22\u5931\u6570\u636e\uff0c\u6240\u4ee5\u9700\u8981aof\u6765\u914d\u5408\u4f7f\u7528\u3002\u5728redis\u5b9e\u4f8b\u91cd\u542f\u65f6\uff0c\u4f18\u5148\u4f7f\u7528aof\u6765\u6062\u590d\u5185\u5b58\u7684\u72b6\u6001\uff0c\u5982\u679c\u6ca1\u6709aof\u65e5\u5fd7\uff0c\u5c31\u4f1a\u4f7f\u7528rdb\u6587\u4ef6\u6765\u6062\u590d\u3002 \u5982\u679c\u518d\u95eeaof\u6587\u4ef6\u8fc7\u5927\u6062\u590d\u65f6\u95f4\u8fc7\u957f\u600e\u4e48\u529e\uff1f\u4f60\u544a\u8bc9\u9762\u8bd5\u5b98\uff0cRedis\u4f1a\u5b9a\u671f\u505aaof\u91cd\u5199\uff0c\u538b\u7f29aof\u6587\u4ef6\u65e5\u5fd7\u5927\u5c0f\u3002\u5982\u679c\u9762\u8bd5\u5b98\u4e0d\u591f\u6ee1\u610f\uff0c\u518d\u62ff\u51fa\u6740\u624b\u950f\u7b54\u6848\uff0cRedis4.0\u4e4b\u540e\u6709\u4e86\u6df7\u5408\u6301\u4e45\u5316\u7684\u529f\u80fd\uff0c\u5c06bgsave\u7684\u5168\u91cf\u548caof\u7684\u589e\u91cf\u505a\u4e86\u878d\u5408\u5904\u7406\uff0c\u8fd9\u6837\u65e2\u4fdd\u8bc1\u4e86\u6062\u590d\u7684\u6548\u7387\u53c8\u517c\u987e\u4e86\u6570\u636e\u7684\u5b89\u5168\u6027\u3002\u8fd9\u4e2a\u529f\u80fd\u751a\u81f3\u5f88\u591a\u9762\u8bd5\u5b98\u90fd\u4e0d\u77e5\u9053\uff0c\u4ed6\u4eec\u80af\u5b9a\u4f1a\u5bf9\u4f60\u522e\u76ee\u76f8\u770b\u3002 \u5982\u679c\u5bf9\u65b9\u8ffd\u95ee\u90a3\u5982\u679c\u7a81\u7136\u673a\u5668\u6389\u7535\u4f1a\u600e\u6837\uff1f\u53d6\u51b3\u4e8eaof\u65e5\u5fd7sync\u5c5e\u6027\u7684\u914d\u7f6e\uff0c\u5982\u679c\u4e0d\u8981\u6c42\u6027\u80fd\uff0c\u5728\u6bcf\u6761\u5199\u6307\u4ee4\u65f6\u90fdsync\u4e00\u4e0b\u78c1\u76d8\uff0c\u5c31\u4e0d\u4f1a\u4e22\u5931\u6570\u636e\u3002\u4f46\u662f\u5728\u9ad8\u6027\u80fd\u7684\u8981\u6c42\u4e0b\u6bcf\u6b21\u90fdsync\u662f\u4e0d\u73b0\u5b9e\u7684\uff0c\u4e00\u822c\u90fd\u4f7f\u7528\u5b9a\u65f6sync\uff0c\u6bd4\u59821s1\u6b21\uff0c\u8fd9\u4e2a\u65f6\u5019\u6700\u591a\u5c31\u4f1a\u4e22\u59311s\u7684\u6570\u636e\u3002 \u5982\u679c\u5bf9\u65b9\u8ffd\u95eebgsave\u7684\u539f\u7406\u662f\u4ec0\u4e48\uff1f\u4f60\u7ed9\u51fa\u4e24\u4e2a\u8bcd\u6c47\u5c31\u53ef\u4ee5\u4e86\uff0cfork\u548ccow\u3002fork\u662f\u6307redis\u901a\u8fc7\u521b\u5efa\u5b50\u8fdb\u7a0b\u6765\u8fdb\u884cbgsave\u64cd\u4f5c\uff0ccow\u6307\u7684\u662fcopy on write\uff0c\u5b50\u8fdb\u7a0b\u521b\u5efa\u540e\uff0c\u7236\u5b50\u8fdb\u7a0b\u5171\u4eab\u6570\u636e\u6bb5\uff0c\u7236\u8fdb\u7a0b\u7ee7\u7eed\u63d0\u4f9b\u8bfb\u5199\u670d\u52a1\uff0c\u5199\u810f\u7684\u9875\u9762\u6570\u636e\u4f1a\u9010\u6e10\u548c\u5b50\u8fdb\u7a0b\u5206\u79bb\u5f00\u6765\u3002 Redis\u6709\u54ea\u4e9b\u6570\u636e\u7ed3\u6784\uff1f \u00b6 \u5b57\u7b26\u4e32String\u3001\u5b57\u5178Hash\u3001\u5217\u8868List\u3001\u96c6\u5408Set\u3001\u6709\u5e8f\u96c6\u5408SortedSet\u3002 \u5982\u679c\u4f60\u662fRedis\u4e2d\u9ad8\u7ea7\u7528\u6237\uff0c\u8fd8\u9700\u8981\u52a0\u4e0a\u4e0b\u9762\u51e0\u79cd\u6570\u636e\u7ed3\u6784\uff1a HyperLogLog\uff1a\uff1a\u7528\u4e8e\u57fa\u6570\u7edf\u8ba1\uff0c\u6bd4\u5982\u7f51\u9875\u7684UV\uff0c\u6bd4set\u6216bitmap\u66f4\u8282\u7701\u7a7a\u95f4\uff08\u7b80\u5355\u601d\u8003\u539f\u7406\uff09\u3002 Geo Sets\uff1a\u5730\u7406\u4f4d\u7f6e\u8ddd\u79bb\u6392\u5e8f\u7b97\u6cd5\u662f GeoHash\uff08\u5c06\u4e8c\u7ef4\u7684\u7ecf\u7eac\u5ea6\u5750\u6807\u8f6c\u6362\u6210\u4e00\u4e2a\u53ef\u6bd4\u8f83\u7684\u5b57\u7b26\u4e32\u4fe1\u606f\uff09\u3002 Pub/Sub\uff1a\u6d88\u8d39\u8ba2\u9605\u6a21\u5f0f \u5982\u679c\u4f60\u8bf4\u8fd8\u73a9\u8fc7Redis Module\uff0c\u50cfBloomFilter\uff0cRedisSearch\uff08\u9ad8\u6027\u80fd\u7684\u5168\u6587\u641c\u7d22\u5f15\u64ce\uff09\uff0cRedis-ML\uff0c\u9762\u8bd5\u5b98\u5f97\u773c\u775b\u5c31\u5f00\u59cb\u53d1\u4eae\u4e86\u3002 Redis\u5206\u5e03\u5f0f\u9501 \u00b6 \u4e3b\u8981\u7684\u6838\u5fc3\u5c31\u662fsetnx\u547d\u4ee4\uff0c\u57fa\u672c\u903b\u8f91\u5982\u4e0b\uff1a setnx\u8fd4\u56deTrue\uff0c\u8bf4\u660e\u83b7\u53d6\u5230\u4e86\u9501\uff0c\u6267\u884c\u6709\u8d44\u6e90\u7ade\u4e89\u90e8\u5206\u7684\u64cd\u4f5c\uff0c\u64cd\u4f5c\u5b8c\u540e\u5220\u9664\u6389\u4ee3\u8868\u9501\u7684key\uff1b setnx\u8fd4\u56deFalse\uff0c\u5219\u4e0d\u65ad\u91cd\u8bd5\u76f4\u5230\u83b7\u53d6\u9501\uff0c\u7136\u540e\u6267\u884c\u4e0a\u4e00\u6b65\u7684\u64cd\u4f5c\uff1b \u8981\u6ce8\u610f\u7684\u95ee\u9898\uff1a setnx\u7684\u65f6\u5019\u540c\u65f6\u8bbe\u7f6eexpire\u65f6\u95f4\uff0c\u907f\u514d\u6709\u8fdb\u7a0b\u957f\u671f\u5360\u7528\u9501\uff0c\u5bfc\u81f4\u5176\u5b83\u8fdb\u7a0b\u65e0\u6cd5\u83b7\u53d6\u9501\uff1b \u5982\u679c\u83b7\u53d6\u9501\uff0c\u7136\u540e\u6267\u884c\u8fc7\u7a0b\u4e2d\u9501\u8fc7\u671f\u4e86\uff0c\u6b64\u65f6\u8fd8\u672a\u6267\u884c\u5b8c\uff0c\u5176\u4ed6\u8fdb\u7a0b\u83b7\u53d6\u5230\u4e86\u9501\uff0c\u5c31\u4f1a\u9020\u6210\u4e34\u754c\u533a\u7ade\u4e89\uff08Redis \u5206\u5e03\u5f0f\u9501\u4e0d\u8981\u7528\u4e8e\u8f83\u957f\u65f6\u95f4\u7684\u4efb\u52a1\uff09; \u5ef6\u65f6\u961f\u5217 \u00b6 \u4f7f\u7528sortedset\u7ed3\u6784\uff0c\u65f6\u95f4\u6233\u4f5c\u4e3ascore\u3002 \u662f\u5426\u4f7f\u7528\u8fc7Redis\u96c6\u7fa4\uff0c\u96c6\u7fa4\u7684\u539f\u7406\u662f\u4ec0\u4e48\uff1f \u00b6 Redis Sentinal\u7740\u773c\u4e8e\u9ad8\u53ef\u7528\uff0c\u5728master\u5b95\u673a\u65f6\u4f1a\u81ea\u52a8\u5c06slave\u63d0\u5347\u4e3amaster\uff0c\u7ee7\u7eed\u63d0\u4f9b\u670d\u52a1\u3002 Redis Cluster\u7740\u773c\u4e8e\u6269\u5c55\u6027\uff0c\u5728\u5355\u4e2aredis\u5185\u5b58\u4e0d\u8db3\u65f6\uff0c\u4f7f\u7528Cluster\u8fdb\u884c\u5206\u7247\u5b58\u50a8\u3002 Redis\u7684\u540c\u6b65\u673a\u5236\u4e86\u89e3\u4e48\uff1f \u00b6 Redis\u53ef\u4ee5\u4f7f\u7528\u4e3b\u4ece\u540c\u6b65\uff0c\u4ece\u4ece\u540c\u6b65\u3002\u7b2c\u4e00\u6b21\u540c\u6b65\u65f6\uff0c\u4e3b\u8282\u70b9\u505a\u4e00\u6b21bgsave\uff0c\u5e76\u540c\u65f6\u5c06\u540e\u7eed\u4fee\u6539\u64cd\u4f5c\u8bb0\u5f55\u5230\u5185\u5b58buffer\uff0c\u5f85\u5b8c\u6210\u540e\u5c06rdb\u6587\u4ef6\u5168\u91cf\u540c\u6b65\u5230\u590d\u5236\u8282\u70b9\uff0c\u590d\u5236\u8282\u70b9\u63a5\u53d7\u5b8c\u6210\u540e\u5c06rdb\u955c\u50cf\u52a0\u8f7d\u5230\u5185\u5b58\u3002\u52a0\u8f7d\u5b8c\u6210\u540e\uff0c\u518d\u901a\u77e5\u4e3b\u8282\u70b9\u5c06\u671f\u95f4\u4fee\u6539\u7684\u64cd\u4f5c\u8bb0\u5f55\u540c\u6b65\u5230\u590d\u5236\u8282\u70b9\u8fdb\u884c\u91cd\u653e\u5c31\u5b8c\u6210\u4e86\u540c\u6b65\u8fc7\u7a0b\u3002 \u53c2\u8003 \u00b6 \u51e0\u7387\u5927\u7684Redis\u9762\u8bd5\u9898\uff08\u542b\u7b54\u6848\uff09 \u5929\u4e0b\u65e0\u96be\u8bd5\u4e4bRedis\u9762\u8bd5\u5201\u96be\u5927\u5168 (qq.com) Mysql \u00b6 Mysql\u4e8b\u52a1\u9694\u79bb\u7ea7\u522b \u00b6 \u810f\u8bfb\uff1a \u5982\u679c\u4e00\u4e2a\u4e8b\u52a1\u8bfb\u5230\u4e86\u53e6\u4e00\u4e2a\u672a\u63d0\u4ea4\u4e8b\u52a1\u4fee\u6539\u8fc7\u7684\u6570\u636e\uff0c\u90a3\u5c31\u610f\u5473\u7740\u53d1\u751f\u4e86 \u810f\u8bfb \u3002 \u4e0d\u53ef\u91cd\u590d\u8bfb\uff1a \u5982\u679c\u4e00\u4e2a\u4e8b\u52a1\u53ea\u80fd\u8bfb\u5230\u53e6\u4e00\u4e2a\u5df2\u7ecf\u63d0\u4ea4\u7684\u4e8b\u52a1\u4fee\u6539\u8fc7\u7684\u6570\u636e\uff0c\u5e76\u4e14\u5176\u4ed6\u4e8b\u52a1\u6bcf\u5bf9\u8be5\u6570\u636e\u8fdb\u884c\u4e00\u6b21\u4fee\u6539\u5e76\u63d0\u4ea4\u540e\uff0c\u8be5\u4e8b\u52a1\u90fd\u80fd\u67e5\u8be2\u5f97\u5230\u6700\u65b0\u503c\uff0c\u90a3\u5c31\u610f\u5473\u7740\u53d1\u751f\u4e86 \u4e0d\u53ef\u91cd\u590d\u8bfb \u3002 \u5e7b\u8bfb\uff1a \u5982\u679c\u4e00\u4e2a\u4e8b\u52a1\u5148\u6839\u636e\u67d0\u4e9b\u6761\u4ef6\u67e5\u8be2\u51fa\u4e00\u4e9b\u8bb0\u5f55\uff0c\u4e4b\u540e\u53e6\u4e00\u4e2a\u4e8b\u52a1\u53c8\u5411\u8868\u4e2d\u63d2\u5165\u4e86\u7b26\u5408\u8fd9\u4e9b\u6761\u4ef6\u7684\u8bb0\u5f55\uff0c\u539f\u5148\u7684\u4e8b\u52a1\u518d\u6b21\u6309\u7167\u8be5\u6761\u4ef6\u67e5\u8be2\u65f6\uff0c\u80fd\u628a\u53e6\u4e00\u4e2a\u4e8b\u52a1\u63d2\u5165\u7684\u8bb0\u5f55\u4e5f\u8bfb\u51fa\u6765\uff0c\u90a3\u5c31\u610f\u5473\u7740\u53d1\u751f\u4e86 \u5e7b\u8bfb \u3002 \u5e7b\u8bfb \u5f3a\u8c03\u7684\u662f\u4e00\u4e2a\u4e8b\u52a1\u6309\u7167\u67d0\u4e2a\u76f8\u540c\u6761\u4ef6\u591a\u6b21\u8bfb\u53d6\u8bb0\u5f55\u65f6\uff0c\u540e\u8bfb\u53d6\u65f6\u8bfb\u5230\u4e86\u4e4b\u524d\u6ca1\u6709\u8bfb\u5230\u7684\u8bb0\u5f55\u3002 MVCC\u539f\u7406 \u00b6 MVCC \uff0c\u5168\u79f0 Multi-Version Concurrency Control \uff0c\u7ffb\u8bd1\u8fc7\u6765\u5c31\u662f\u591a\u7248\u672c\u5e76\u53d1\u63a7\u5236\uff0c\u662f\u4e00\u79cd\u591a\u7248\u672c\u5e76\u53d1\u63a7\u5236\u7684\u65b9\u6cd5\u3002\u5728mysql innodb\u7684\u5b9e\u73b0\u4e3b\u8981\u662f\u4e3a\u4e86\u89e3\u51b3\u8bfb\u5199\u51b2\u7a81\u7684\u540c\u65f6\u63d0\u9ad8\u6570\u636e\u5e93\u7684\u5e76\u53d1\u6027\u80fd\uff0c\u505a\u5230\u5373\u4f7f\u6709\u8bfb\u5199\u51b2\u7a81\uff08 \u5199\u9501\u662f\u6392\u4ed6\u7684,\u5b83\u4f1a\u963b\u585e\u5176\u4ed6\u8bfb\u9501\u548c\u5199\u9501 \uff09\u7684\u65f6\u5019\u4e5f\u80fd\u5e76\u53d1\u7684\u8bfb\u3002 \u5b9e\u73b0\uff1a \u4e24\u4e2a\u9690\u85cf\u5217 DB_TRX_ID \u548c DB_ROLL_PTR \u3002 ReadView\uff1a \u5feb\u7167\u8bfb\u7684\u65f6\u5019\u4ea7\u751f\u7684\u8bfb\u89c6\u56fe\uff0cRC\u548cRR\u9694\u79bb\u7ea7\u522b\u4e0b\u8d77\u4f5c\u7528\u3002 \u4f1a\u8bb0\u5f55\u5f53\u524d\u6d3b\u8dc3\u7684\u4e8b\u52a1id\uff0c\u6570\u636e\u53ef\u89c1\u6027\u7684\u5224\u65ad\u89c4\u5219\u4e3a\uff1a \u8bb0\u5f55\u7684trx_id\u7b49\u4e8e\u5f53\u524d\u4e8b\u52a1trx_id\uff0c\u53ef\u89c1\uff1b \u8bb0\u5f55\u7684trx_id\u5c0f\u4e8e\u89c6\u56fe\u4e2d\u6700\u5c0f\u7684\u6d3b\u8dc3trx_id\uff0c\u53ef\u89c1\uff1b \u8bb0\u5f55\u7684trx_id\u5927\u4e8e\u89c6\u56fe\u4e2d\u6700\u5927\u7684\u6d3b\u8dc3trx_id\uff0c\u4e0d\u53ef\u89c1\uff1b \u8bb0\u5f55\u7684trx_id\u5927\u4e8e\u6700\u5c0f\u6d3b\u8dc3trx_id\u540c\u65f6\u5c0f\u4e8e\u6700\u5927\u6d3b\u8dc3trx_id\uff0c\u5728\u6d3b\u8dc3\u7684trx_id\u4e2d\u5219\u4e0d\u53ef\u89c1\uff0c\u53cd\u4e4b\u53ef\u89c1\u3002 RC\u548cRR\u7684\u533a\u522b\u5c31\u662fRR\u53ea\u751f\u6210\u4e00\u6b21ReadView\u3002 \u53c2\u8003\uff1a MVCC\u591a\u7248\u672c\u5e76\u53d1\u63a7\u5236 - \u7b80\u4e66 (jianshu.com) https://blog.csdn.net/whoamiyang/article/details/51901888 \u641e\u6e05\u695amysql\u7684MVCC\u5b9e\u73b0 https://blog.csdn.net/SnailMann/article/details/94724197 https://blog.csdn.net/cumtmonster/article/details/106669873 \u9501 \u00b6 \u884c\u9501\uff1a \u5171\u4eab\u9501-s\u9501\u3001\u6392\u4ed6\u9501-x\u9501\uff0cIS\u9501\uff0cIX\u9501 LOCK_REC_NOT_GAP\uff1a\u53ea\u9501\u4f4f\u4e00\u6761\u8bb0\u5f55\uff0c\u7b49\u503c\u67e5\u8be2\u7684\u65f6\u5019\uff1b Gap Locks\uff1a\u9501\u4f4f\u4e00\u4e2a\u533a\u95f4\u7684\u8bb0\u5f55\uff08\u4e0d\u5b58\u5728\uff09\uff0c\u53ef\u4ee5\u89e3\u51b3\u5e7b\u8bfb\u95ee\u9898\uff1b Next-Key Locks\uff1a\u9501\u4f4f\u5f53\u524d\u8bb0\u5f55\u4ee5\u53ca\u6b64\u6761\u8bb0\u5f55\u4e4b\u524d\u7684\u8bb0\u5f55\u7684\u9501\uff1b Insert Intention Locks\uff1a\u63d2\u5165\u610f\u5411\u9501\uff0c\u63d2\u5165\u65f6\u8981\u5224\u65ad\u662f\u5426\u6709gap\u9501\uff0c\u5982\u679c\u6709\u5219\u8981\u751f\u6210\u4e00\u4e2a\u63d2\u5165\u610f\u5411\u9501\u7ed3\u6784\u3002 \u884c\u9501\u517c\u5bb9\u6027\uff1a \u8868\u9501\uff1a \u5171\u4eab\u9501-s\u9501\u3001\u6392\u4ed6\u9501-x\u9501\uff0cIS\u9501\uff0cIX\u9501 \u610f\u5411\u5171\u4eab\u9501\uff0c\u82f1\u6587\u540d\uff1a Intention Shared Lock \uff0c\u7b80\u79f0 IS\u9501 \u3002\u5f53\u4e8b\u52a1\u51c6\u5907\u5728\u67d0\u6761\u8bb0\u5f55\u4e0a\u52a0 S\u9501 \u65f6\uff0c\u9700\u8981\u5148\u5728\u8868\u7ea7\u522b\u52a0\u4e00\u4e2a IS\u9501 \u3002 \u610f\u5411\u72ec\u5360\u9501\uff0c\u82f1\u6587\u540d\uff1a Intention Exclusive Lock \uff0c\u7b80\u79f0 IX\u9501 \u3002\u5f53\u4e8b\u52a1\u51c6\u5907\u5728\u67d0\u6761\u8bb0\u5f55\u4e0a\u52a0 X\u9501 \u65f6\uff0c\u9700\u8981\u5148\u5728\u8868\u7ea7\u522b\u52a0\u4e00\u4e2a IX\u9501 \u3002 IS\u3001IX\u9501\u662f\u8868\u7ea7\u9501\uff0c\u5b83\u4eec\u7684\u63d0\u51fa\u4ec5\u4ec5\u4e3a\u4e86\u5728\u4e4b\u540e\u52a0\u8868\u7ea7\u522b\u7684S\u9501\u548cX\u9501\u65f6\u53ef\u4ee5\u5feb\u901f\u5224\u65ad\u8868\u4e2d\u7684\u8bb0\u5f55\u662f\u5426\u88ab\u4e0a\u9501\uff0c\u4ee5\u907f\u514d\u7528\u904d\u5386\u7684\u65b9\u5f0f\u6765\u67e5\u770b\u8868\u4e2d\u6709\u6ca1\u6709\u4e0a\u9501\u7684\u8bb0\u5f55\uff0c\u4e5f\u5c31\u662f\u8bf4\u5176\u5b9eIS\u9501\u548cIX\u9501\u662f\u517c\u5bb9\u7684\uff0cIX\u9501\u548cIX\u9501\u662f\u517c\u5bb9\u7684 \u8868\u9501\u517c\u5bb9\u6027\uff1a \u6ce8\u610f\uff1a InnoDB\u884c\u9501\u662f\u901a\u8fc7\u7ed9\u7d22\u5f15\u4e0a\u7684\u7d22\u5f15\u9879\u52a0\u9501\u6765\u5b9e\u73b0\u7684\uff0c\u53ea\u6709\u901a\u8fc7\u7d22\u5f15\uff08\u4e3b\u952e\u7d22\u5f15\u3001\u552f\u4e00\u7d22\u5f15\u6216\u666e\u901a\u7d22\u5f15\uff09\u6761\u4ef6\u68c0\u7d22\u6570\u636e\uff0cInnoDB\u624d\u4f7f\u7528\u884c\u7ea7\u9501\uff0c\u5426\u5219\uff0cInnoDB\u5c06\u4f7f\u7528\u8868\u9501\u3002 \u53c2\u8003\uff1a https://zhuanlan.zhihu.com/p/29150809/ \u5206\u5e93\u5206\u8868 \u00b6 \u53c2\u8003 \u00b6 \u51e0\u7387\u5927\u7684\u6570\u636e\u5e93\uff08MySQL\uff09\u9762\u8bd5\u9898\uff08\u542b\u7b54\u6848\uff09_\u7776-CSDN\u535a\u5ba2_mysql\u6570\u636e\u5e93\u9762\u8bd5","title":"\u6570\u636e\u5e93"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%95%B0%E6%8D%AE%E5%BA%93/#redis","text":"","title":"Redis"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%95%B0%E6%8D%AE%E5%BA%93/#_1","text":"","title":"\u6570\u636e\u6301\u4e45\u5316"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%95%B0%E6%8D%AE%E5%BA%93/#rdb","text":"\u670d\u52a1\u5668\u542f\u52a8\u7684\u65f6\u5019\uff0c\u68c0\u6d4b\u5230RDB\u6587\u4ef6\u5c31\u81ea\u52a8\u8f7d\u5165\uff08\u5982\u679c\u670d\u52a1\u5668\u5f00\u542f\u4e86AOF\uff0c\u4f1a\u4f18\u5148\u4f7f\u7528AOF\u6587\u4ef6\u8fd8\u539f\u6570\u636e\u5e93\u72b6\u6001\uff09\u3002 \u547d\u4ee4\uff1a save \u548c bgsave \uff0c save \u4f1a\u963b\u585eRedis\u670d\u52a1\u5668\u8fdb\u7a0b\uff0c bgsave \u5b50\u8fdb\u7a0b\u8d1f\u8d23\u521b\u5efaRDB\u6587\u4ef6\u3002 dirty\u8ba1\u6570\u5668 \uff1a\u4e0a\u4e00\u6b21\u6267\u884c save \u6216\u8005 bgsave \u547d\u4ee4\u540e\uff0c\u670d\u52a1\u5668\u5bf9\u6570\u636e\u5e93\u72b6\u6001\u8fdb\u884c\u591a\u5c11\u6b21\u4fee\u6539\u3002 lastsave\u5c5e\u6027\uff1a \u670d\u52a1\u4e0a\u6b21\u6267\u884c\u4fdd\u5b58\u64cd\u4f5c\u7684\u65f6\u95f4\u3002 \u6587\u4ef6\u7ed3\u6784\uff1a REDIS\u6807\u660e\u662fRDB\u6587\u4ef6 db_version\u8868\u793aRDB\u6587\u4ef6\u7684\u7248\u672c\u53f7 databases\u591a\u4e2a\u6570\u636e\u5e93\u5df2\u7ecf\u5bf9\u5e94\u7684\u952e\u503c check_sum\u6821\u9a8c\u548c\uff0c\u6839\u636e\u524d\u9762\u56db\u4e2a\u90e8\u5206\u8ba1\u7b97\u5f97\u51fa \u91cd\u70b9\uff1a","title":"RDB"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%95%B0%E6%8D%AE%E5%BA%93/#aof","text":"\u4e0eRDB\u4fdd\u5b58\u6570\u636e\u5e93\u4e2d\u7684\u952e\u503c\u5bf9\u6765\u8bb0\u5f55\u6570\u636e\u5e93\u5bf9\u5e94\u72b6\u6001\u4e0d\u540c\uff0cAOF\u662f\u901a\u8fc7\u4fdd\u5b58Redis\u670d\u52a1\u5668\u6267\u884c\u7684\u5199\u547d\u4ee4\u6765\u8bb0\u5f55\u6570\u636e\u5e93\u72b6\u6001\u3002 \u6587\u4ef6\u5199\u5165\uff1a \u547d\u4ee4\u8ffd\u52a0\uff1a\u5ba2\u6237\u7aef\u53d1\u9001\u5199\u547d\u4ee4->\u670d\u52a1\u7aef\u6267\u884c\u5199\u547d\u4ee4->\u5c06\u534f\u8bae\u5185\u5bb9\u8ffd\u52a0\u5230aof_buf\u7f13\u51b2\u533a\u672b\u5c3e\u3002 \u6587\u4ef6\u5199\u5165\uff1a \u6587\u4ef6\u540c\u6b65\uff08\u53ef\u4ee5\u7406\u89e3\u4e3a\u4fdd\u5b58\uff09\uff1a \u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u4e00\u822c\u8c03\u7528\u4e86write\u540e\u6570\u636e\u4e0d\u4f1a\u7acb\u9a6c\u5199\u5165\uff0c\u800c\u662f\u5148\u4fdd\u5b58\u5728\u5185\u5b58\u7f13\u51b2\u533a\u91cc\u9762\uff0c\u7b49\u5185\u5bb9\u5230\u4e86\u4e00\u5b9a\u5927\u5c0f\u6216\u8005\u65f6\u95f4\u8d85\u8fc7\u6307\u5b9a\u65f6\u9650\u540e\uff0c\u624d\u771f\u6b63\u5c06\u7f13\u51b2\u533a\u7684\u6570\u636e\u5199\u5230\u78c1\u76d8\u4e0a\u3002 \u6587\u4ef6\u8f7d\u5165\uff1a \u56e0\u4e3aAOF\u6587\u4ef6\u5305\u542b\u4e86\u91cd\u5efa\u6570\u636e\u5e93\u72b6\u6001\u9700\u8981\u7684\u6240\u6709\u5199\u547d\u4ee4\uff0c\u6240\u4ee5\u670d\u52a1\u5668\u53ea\u9700\u8981\u8bfb\u5165\u5e76\u91cd\u65b0\u6267\u884c\u4e00\u904d\u5c31\u884c\u4e86\uff08fake client\uff09\u3002 AOF\u91cd\u5199\uff1a AOF\u6587\u4ef6\u8d8a\u6765\u8d8a\u5927\uff0c\u5f71\u54cdRedis\u670d\u52a1\u5668\u3001\u5bbf\u4e3b\u673a\uff0c\u6062\u590d\u65f6\u95f4\u8fb9\u957f\u3002AOF\u91cd\u5199\uff0c\u7528\u4e0d\u5e26\u5197\u4f59\u547d\u4ee4\u7684\u65b0AOF\u6587\u4ef6\u4ee3\u66ff\uff08\u539f\u5b50\u64cd\u4f5c\uff09\u8001\u7684AOF\u6587\u4ef6\u3002 \u8bfb\u53d6\u73b0\u6709\u7684\u952e\u503c\u5bf9\uff0c\u7136\u540e\u7528\u4e00\u4e2a\u547d\u4ee4\u53bb\u4ee3\u66ff\u539f\u5148\u7684\u591a\u4e2a\u547d\u4ee4\uff0c\u5c06\u5f53\u524d\u952e\u503c\u5bf9\u8bb0\u5f55\u4e0b\u6765\u3002 \u91cd\u5199\u671f\u95f4\u670d\u52a1\u5668\u8fdb\u7a0b\u65b0\u5904\u7406\u7684\u547d\u4ee4\u8bf7\u6c42\u6539\u53d8\u6570\u636e\u5e93\u72b6\u6001\uff0c\u4f7f\u7528aof_rewrite_buf\uff1a \u5b50\u8fdb\u7a0b\u91cd\u5199\u5b8c\u6bd5\u540e\uff0c\u670d\u52a1\u5668\u8fdb\u7a0b\u5c06AOF\u91cd\u5199\u7f13\u51b2\u533a\u7684\u5185\u5bb9\u5199\u5230\u65b0\u7684AOF\u6587\u4ef6\u4e2d\u3002 \u91cd\u70b9\uff1a","title":"AOF"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%95%B0%E6%8D%AE%E5%BA%93/#_2","text":"redis4.0\u540e\u6709\u4e86\u6df7\u5408\u6301\u4e45\u5316\u7684\u7279\u6027\uff0c\u901a\u8fc7bgrewriteaof\u8fdb\u884cAOF\u91cd\u5199\u7684\u65f6\u5019\uff0c\u5148\u6309\u7167rdb\u683c\u5f0f\u5bf9\u6570\u636e\u5e93\u72b6\u6001\u8fdb\u884c\u4fdd\u5b58\uff0c\u518d\u5c06aof_rewrite_buf\u5199\u5230AOF\u6587\u4ef6\u4e2d\u3002","title":"\u6df7\u5408\u6301\u4e45\u5316"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%95%B0%E6%8D%AE%E5%BA%93/#_3","text":"bgsave\u505a\u955c\u50cf\u5168\u91cf\u6301\u4e45\u5316\uff0caof\u505a\u589e\u91cf\u6301\u4e45\u5316\u3002\u56e0\u4e3abgsave\u4f1a\u8017\u8d39\u8f83\u957f\u65f6\u95f4\uff0c\u4e0d\u591f\u5b9e\u65f6\uff0c\u5728\u505c\u673a\u7684\u65f6\u5019\u4f1a\u5bfc\u81f4\u5927\u91cf\u4e22\u5931\u6570\u636e\uff0c\u6240\u4ee5\u9700\u8981aof\u6765\u914d\u5408\u4f7f\u7528\u3002\u5728redis\u5b9e\u4f8b\u91cd\u542f\u65f6\uff0c\u4f18\u5148\u4f7f\u7528aof\u6765\u6062\u590d\u5185\u5b58\u7684\u72b6\u6001\uff0c\u5982\u679c\u6ca1\u6709aof\u65e5\u5fd7\uff0c\u5c31\u4f1a\u4f7f\u7528rdb\u6587\u4ef6\u6765\u6062\u590d\u3002 \u5982\u679c\u518d\u95eeaof\u6587\u4ef6\u8fc7\u5927\u6062\u590d\u65f6\u95f4\u8fc7\u957f\u600e\u4e48\u529e\uff1f\u4f60\u544a\u8bc9\u9762\u8bd5\u5b98\uff0cRedis\u4f1a\u5b9a\u671f\u505aaof\u91cd\u5199\uff0c\u538b\u7f29aof\u6587\u4ef6\u65e5\u5fd7\u5927\u5c0f\u3002\u5982\u679c\u9762\u8bd5\u5b98\u4e0d\u591f\u6ee1\u610f\uff0c\u518d\u62ff\u51fa\u6740\u624b\u950f\u7b54\u6848\uff0cRedis4.0\u4e4b\u540e\u6709\u4e86\u6df7\u5408\u6301\u4e45\u5316\u7684\u529f\u80fd\uff0c\u5c06bgsave\u7684\u5168\u91cf\u548caof\u7684\u589e\u91cf\u505a\u4e86\u878d\u5408\u5904\u7406\uff0c\u8fd9\u6837\u65e2\u4fdd\u8bc1\u4e86\u6062\u590d\u7684\u6548\u7387\u53c8\u517c\u987e\u4e86\u6570\u636e\u7684\u5b89\u5168\u6027\u3002\u8fd9\u4e2a\u529f\u80fd\u751a\u81f3\u5f88\u591a\u9762\u8bd5\u5b98\u90fd\u4e0d\u77e5\u9053\uff0c\u4ed6\u4eec\u80af\u5b9a\u4f1a\u5bf9\u4f60\u522e\u76ee\u76f8\u770b\u3002 \u5982\u679c\u5bf9\u65b9\u8ffd\u95ee\u90a3\u5982\u679c\u7a81\u7136\u673a\u5668\u6389\u7535\u4f1a\u600e\u6837\uff1f\u53d6\u51b3\u4e8eaof\u65e5\u5fd7sync\u5c5e\u6027\u7684\u914d\u7f6e\uff0c\u5982\u679c\u4e0d\u8981\u6c42\u6027\u80fd\uff0c\u5728\u6bcf\u6761\u5199\u6307\u4ee4\u65f6\u90fdsync\u4e00\u4e0b\u78c1\u76d8\uff0c\u5c31\u4e0d\u4f1a\u4e22\u5931\u6570\u636e\u3002\u4f46\u662f\u5728\u9ad8\u6027\u80fd\u7684\u8981\u6c42\u4e0b\u6bcf\u6b21\u90fdsync\u662f\u4e0d\u73b0\u5b9e\u7684\uff0c\u4e00\u822c\u90fd\u4f7f\u7528\u5b9a\u65f6sync\uff0c\u6bd4\u59821s1\u6b21\uff0c\u8fd9\u4e2a\u65f6\u5019\u6700\u591a\u5c31\u4f1a\u4e22\u59311s\u7684\u6570\u636e\u3002 \u5982\u679c\u5bf9\u65b9\u8ffd\u95eebgsave\u7684\u539f\u7406\u662f\u4ec0\u4e48\uff1f\u4f60\u7ed9\u51fa\u4e24\u4e2a\u8bcd\u6c47\u5c31\u53ef\u4ee5\u4e86\uff0cfork\u548ccow\u3002fork\u662f\u6307redis\u901a\u8fc7\u521b\u5efa\u5b50\u8fdb\u7a0b\u6765\u8fdb\u884cbgsave\u64cd\u4f5c\uff0ccow\u6307\u7684\u662fcopy on write\uff0c\u5b50\u8fdb\u7a0b\u521b\u5efa\u540e\uff0c\u7236\u5b50\u8fdb\u7a0b\u5171\u4eab\u6570\u636e\u6bb5\uff0c\u7236\u8fdb\u7a0b\u7ee7\u7eed\u63d0\u4f9b\u8bfb\u5199\u670d\u52a1\uff0c\u5199\u810f\u7684\u9875\u9762\u6570\u636e\u4f1a\u9010\u6e10\u548c\u5b50\u8fdb\u7a0b\u5206\u79bb\u5f00\u6765\u3002","title":"\u53c2\u8003\u56de\u7b54"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%95%B0%E6%8D%AE%E5%BA%93/#redis_1","text":"\u5b57\u7b26\u4e32String\u3001\u5b57\u5178Hash\u3001\u5217\u8868List\u3001\u96c6\u5408Set\u3001\u6709\u5e8f\u96c6\u5408SortedSet\u3002 \u5982\u679c\u4f60\u662fRedis\u4e2d\u9ad8\u7ea7\u7528\u6237\uff0c\u8fd8\u9700\u8981\u52a0\u4e0a\u4e0b\u9762\u51e0\u79cd\u6570\u636e\u7ed3\u6784\uff1a HyperLogLog\uff1a\uff1a\u7528\u4e8e\u57fa\u6570\u7edf\u8ba1\uff0c\u6bd4\u5982\u7f51\u9875\u7684UV\uff0c\u6bd4set\u6216bitmap\u66f4\u8282\u7701\u7a7a\u95f4\uff08\u7b80\u5355\u601d\u8003\u539f\u7406\uff09\u3002 Geo Sets\uff1a\u5730\u7406\u4f4d\u7f6e\u8ddd\u79bb\u6392\u5e8f\u7b97\u6cd5\u662f GeoHash\uff08\u5c06\u4e8c\u7ef4\u7684\u7ecf\u7eac\u5ea6\u5750\u6807\u8f6c\u6362\u6210\u4e00\u4e2a\u53ef\u6bd4\u8f83\u7684\u5b57\u7b26\u4e32\u4fe1\u606f\uff09\u3002 Pub/Sub\uff1a\u6d88\u8d39\u8ba2\u9605\u6a21\u5f0f \u5982\u679c\u4f60\u8bf4\u8fd8\u73a9\u8fc7Redis Module\uff0c\u50cfBloomFilter\uff0cRedisSearch\uff08\u9ad8\u6027\u80fd\u7684\u5168\u6587\u641c\u7d22\u5f15\u64ce\uff09\uff0cRedis-ML\uff0c\u9762\u8bd5\u5b98\u5f97\u773c\u775b\u5c31\u5f00\u59cb\u53d1\u4eae\u4e86\u3002","title":"Redis\u6709\u54ea\u4e9b\u6570\u636e\u7ed3\u6784\uff1f"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%95%B0%E6%8D%AE%E5%BA%93/#redis_2","text":"\u4e3b\u8981\u7684\u6838\u5fc3\u5c31\u662fsetnx\u547d\u4ee4\uff0c\u57fa\u672c\u903b\u8f91\u5982\u4e0b\uff1a setnx\u8fd4\u56deTrue\uff0c\u8bf4\u660e\u83b7\u53d6\u5230\u4e86\u9501\uff0c\u6267\u884c\u6709\u8d44\u6e90\u7ade\u4e89\u90e8\u5206\u7684\u64cd\u4f5c\uff0c\u64cd\u4f5c\u5b8c\u540e\u5220\u9664\u6389\u4ee3\u8868\u9501\u7684key\uff1b setnx\u8fd4\u56deFalse\uff0c\u5219\u4e0d\u65ad\u91cd\u8bd5\u76f4\u5230\u83b7\u53d6\u9501\uff0c\u7136\u540e\u6267\u884c\u4e0a\u4e00\u6b65\u7684\u64cd\u4f5c\uff1b \u8981\u6ce8\u610f\u7684\u95ee\u9898\uff1a setnx\u7684\u65f6\u5019\u540c\u65f6\u8bbe\u7f6eexpire\u65f6\u95f4\uff0c\u907f\u514d\u6709\u8fdb\u7a0b\u957f\u671f\u5360\u7528\u9501\uff0c\u5bfc\u81f4\u5176\u5b83\u8fdb\u7a0b\u65e0\u6cd5\u83b7\u53d6\u9501\uff1b \u5982\u679c\u83b7\u53d6\u9501\uff0c\u7136\u540e\u6267\u884c\u8fc7\u7a0b\u4e2d\u9501\u8fc7\u671f\u4e86\uff0c\u6b64\u65f6\u8fd8\u672a\u6267\u884c\u5b8c\uff0c\u5176\u4ed6\u8fdb\u7a0b\u83b7\u53d6\u5230\u4e86\u9501\uff0c\u5c31\u4f1a\u9020\u6210\u4e34\u754c\u533a\u7ade\u4e89\uff08Redis \u5206\u5e03\u5f0f\u9501\u4e0d\u8981\u7528\u4e8e\u8f83\u957f\u65f6\u95f4\u7684\u4efb\u52a1\uff09;","title":"Redis\u5206\u5e03\u5f0f\u9501"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%95%B0%E6%8D%AE%E5%BA%93/#_4","text":"\u4f7f\u7528sortedset\u7ed3\u6784\uff0c\u65f6\u95f4\u6233\u4f5c\u4e3ascore\u3002","title":"\u5ef6\u65f6\u961f\u5217"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%95%B0%E6%8D%AE%E5%BA%93/#redis_3","text":"Redis Sentinal\u7740\u773c\u4e8e\u9ad8\u53ef\u7528\uff0c\u5728master\u5b95\u673a\u65f6\u4f1a\u81ea\u52a8\u5c06slave\u63d0\u5347\u4e3amaster\uff0c\u7ee7\u7eed\u63d0\u4f9b\u670d\u52a1\u3002 Redis Cluster\u7740\u773c\u4e8e\u6269\u5c55\u6027\uff0c\u5728\u5355\u4e2aredis\u5185\u5b58\u4e0d\u8db3\u65f6\uff0c\u4f7f\u7528Cluster\u8fdb\u884c\u5206\u7247\u5b58\u50a8\u3002","title":"\u662f\u5426\u4f7f\u7528\u8fc7Redis\u96c6\u7fa4\uff0c\u96c6\u7fa4\u7684\u539f\u7406\u662f\u4ec0\u4e48\uff1f"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%95%B0%E6%8D%AE%E5%BA%93/#redis_4","text":"Redis\u53ef\u4ee5\u4f7f\u7528\u4e3b\u4ece\u540c\u6b65\uff0c\u4ece\u4ece\u540c\u6b65\u3002\u7b2c\u4e00\u6b21\u540c\u6b65\u65f6\uff0c\u4e3b\u8282\u70b9\u505a\u4e00\u6b21bgsave\uff0c\u5e76\u540c\u65f6\u5c06\u540e\u7eed\u4fee\u6539\u64cd\u4f5c\u8bb0\u5f55\u5230\u5185\u5b58buffer\uff0c\u5f85\u5b8c\u6210\u540e\u5c06rdb\u6587\u4ef6\u5168\u91cf\u540c\u6b65\u5230\u590d\u5236\u8282\u70b9\uff0c\u590d\u5236\u8282\u70b9\u63a5\u53d7\u5b8c\u6210\u540e\u5c06rdb\u955c\u50cf\u52a0\u8f7d\u5230\u5185\u5b58\u3002\u52a0\u8f7d\u5b8c\u6210\u540e\uff0c\u518d\u901a\u77e5\u4e3b\u8282\u70b9\u5c06\u671f\u95f4\u4fee\u6539\u7684\u64cd\u4f5c\u8bb0\u5f55\u540c\u6b65\u5230\u590d\u5236\u8282\u70b9\u8fdb\u884c\u91cd\u653e\u5c31\u5b8c\u6210\u4e86\u540c\u6b65\u8fc7\u7a0b\u3002","title":"Redis\u7684\u540c\u6b65\u673a\u5236\u4e86\u89e3\u4e48\uff1f"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%95%B0%E6%8D%AE%E5%BA%93/#_5","text":"\u51e0\u7387\u5927\u7684Redis\u9762\u8bd5\u9898\uff08\u542b\u7b54\u6848\uff09 \u5929\u4e0b\u65e0\u96be\u8bd5\u4e4bRedis\u9762\u8bd5\u5201\u96be\u5927\u5168 (qq.com)","title":"\u53c2\u8003"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%95%B0%E6%8D%AE%E5%BA%93/#mysql","text":"","title":"Mysql"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%95%B0%E6%8D%AE%E5%BA%93/#mysql_1","text":"\u810f\u8bfb\uff1a \u5982\u679c\u4e00\u4e2a\u4e8b\u52a1\u8bfb\u5230\u4e86\u53e6\u4e00\u4e2a\u672a\u63d0\u4ea4\u4e8b\u52a1\u4fee\u6539\u8fc7\u7684\u6570\u636e\uff0c\u90a3\u5c31\u610f\u5473\u7740\u53d1\u751f\u4e86 \u810f\u8bfb \u3002 \u4e0d\u53ef\u91cd\u590d\u8bfb\uff1a \u5982\u679c\u4e00\u4e2a\u4e8b\u52a1\u53ea\u80fd\u8bfb\u5230\u53e6\u4e00\u4e2a\u5df2\u7ecf\u63d0\u4ea4\u7684\u4e8b\u52a1\u4fee\u6539\u8fc7\u7684\u6570\u636e\uff0c\u5e76\u4e14\u5176\u4ed6\u4e8b\u52a1\u6bcf\u5bf9\u8be5\u6570\u636e\u8fdb\u884c\u4e00\u6b21\u4fee\u6539\u5e76\u63d0\u4ea4\u540e\uff0c\u8be5\u4e8b\u52a1\u90fd\u80fd\u67e5\u8be2\u5f97\u5230\u6700\u65b0\u503c\uff0c\u90a3\u5c31\u610f\u5473\u7740\u53d1\u751f\u4e86 \u4e0d\u53ef\u91cd\u590d\u8bfb \u3002 \u5e7b\u8bfb\uff1a \u5982\u679c\u4e00\u4e2a\u4e8b\u52a1\u5148\u6839\u636e\u67d0\u4e9b\u6761\u4ef6\u67e5\u8be2\u51fa\u4e00\u4e9b\u8bb0\u5f55\uff0c\u4e4b\u540e\u53e6\u4e00\u4e2a\u4e8b\u52a1\u53c8\u5411\u8868\u4e2d\u63d2\u5165\u4e86\u7b26\u5408\u8fd9\u4e9b\u6761\u4ef6\u7684\u8bb0\u5f55\uff0c\u539f\u5148\u7684\u4e8b\u52a1\u518d\u6b21\u6309\u7167\u8be5\u6761\u4ef6\u67e5\u8be2\u65f6\uff0c\u80fd\u628a\u53e6\u4e00\u4e2a\u4e8b\u52a1\u63d2\u5165\u7684\u8bb0\u5f55\u4e5f\u8bfb\u51fa\u6765\uff0c\u90a3\u5c31\u610f\u5473\u7740\u53d1\u751f\u4e86 \u5e7b\u8bfb \u3002 \u5e7b\u8bfb \u5f3a\u8c03\u7684\u662f\u4e00\u4e2a\u4e8b\u52a1\u6309\u7167\u67d0\u4e2a\u76f8\u540c\u6761\u4ef6\u591a\u6b21\u8bfb\u53d6\u8bb0\u5f55\u65f6\uff0c\u540e\u8bfb\u53d6\u65f6\u8bfb\u5230\u4e86\u4e4b\u524d\u6ca1\u6709\u8bfb\u5230\u7684\u8bb0\u5f55\u3002","title":"Mysql\u4e8b\u52a1\u9694\u79bb\u7ea7\u522b"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%95%B0%E6%8D%AE%E5%BA%93/#mvcc","text":"MVCC \uff0c\u5168\u79f0 Multi-Version Concurrency Control \uff0c\u7ffb\u8bd1\u8fc7\u6765\u5c31\u662f\u591a\u7248\u672c\u5e76\u53d1\u63a7\u5236\uff0c\u662f\u4e00\u79cd\u591a\u7248\u672c\u5e76\u53d1\u63a7\u5236\u7684\u65b9\u6cd5\u3002\u5728mysql innodb\u7684\u5b9e\u73b0\u4e3b\u8981\u662f\u4e3a\u4e86\u89e3\u51b3\u8bfb\u5199\u51b2\u7a81\u7684\u540c\u65f6\u63d0\u9ad8\u6570\u636e\u5e93\u7684\u5e76\u53d1\u6027\u80fd\uff0c\u505a\u5230\u5373\u4f7f\u6709\u8bfb\u5199\u51b2\u7a81\uff08 \u5199\u9501\u662f\u6392\u4ed6\u7684,\u5b83\u4f1a\u963b\u585e\u5176\u4ed6\u8bfb\u9501\u548c\u5199\u9501 \uff09\u7684\u65f6\u5019\u4e5f\u80fd\u5e76\u53d1\u7684\u8bfb\u3002 \u5b9e\u73b0\uff1a \u4e24\u4e2a\u9690\u85cf\u5217 DB_TRX_ID \u548c DB_ROLL_PTR \u3002 ReadView\uff1a \u5feb\u7167\u8bfb\u7684\u65f6\u5019\u4ea7\u751f\u7684\u8bfb\u89c6\u56fe\uff0cRC\u548cRR\u9694\u79bb\u7ea7\u522b\u4e0b\u8d77\u4f5c\u7528\u3002 \u4f1a\u8bb0\u5f55\u5f53\u524d\u6d3b\u8dc3\u7684\u4e8b\u52a1id\uff0c\u6570\u636e\u53ef\u89c1\u6027\u7684\u5224\u65ad\u89c4\u5219\u4e3a\uff1a \u8bb0\u5f55\u7684trx_id\u7b49\u4e8e\u5f53\u524d\u4e8b\u52a1trx_id\uff0c\u53ef\u89c1\uff1b \u8bb0\u5f55\u7684trx_id\u5c0f\u4e8e\u89c6\u56fe\u4e2d\u6700\u5c0f\u7684\u6d3b\u8dc3trx_id\uff0c\u53ef\u89c1\uff1b \u8bb0\u5f55\u7684trx_id\u5927\u4e8e\u89c6\u56fe\u4e2d\u6700\u5927\u7684\u6d3b\u8dc3trx_id\uff0c\u4e0d\u53ef\u89c1\uff1b \u8bb0\u5f55\u7684trx_id\u5927\u4e8e\u6700\u5c0f\u6d3b\u8dc3trx_id\u540c\u65f6\u5c0f\u4e8e\u6700\u5927\u6d3b\u8dc3trx_id\uff0c\u5728\u6d3b\u8dc3\u7684trx_id\u4e2d\u5219\u4e0d\u53ef\u89c1\uff0c\u53cd\u4e4b\u53ef\u89c1\u3002 RC\u548cRR\u7684\u533a\u522b\u5c31\u662fRR\u53ea\u751f\u6210\u4e00\u6b21ReadView\u3002 \u53c2\u8003\uff1a MVCC\u591a\u7248\u672c\u5e76\u53d1\u63a7\u5236 - \u7b80\u4e66 (jianshu.com) https://blog.csdn.net/whoamiyang/article/details/51901888 \u641e\u6e05\u695amysql\u7684MVCC\u5b9e\u73b0 https://blog.csdn.net/SnailMann/article/details/94724197 https://blog.csdn.net/cumtmonster/article/details/106669873","title":"MVCC\u539f\u7406"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%95%B0%E6%8D%AE%E5%BA%93/#_6","text":"\u884c\u9501\uff1a \u5171\u4eab\u9501-s\u9501\u3001\u6392\u4ed6\u9501-x\u9501\uff0cIS\u9501\uff0cIX\u9501 LOCK_REC_NOT_GAP\uff1a\u53ea\u9501\u4f4f\u4e00\u6761\u8bb0\u5f55\uff0c\u7b49\u503c\u67e5\u8be2\u7684\u65f6\u5019\uff1b Gap Locks\uff1a\u9501\u4f4f\u4e00\u4e2a\u533a\u95f4\u7684\u8bb0\u5f55\uff08\u4e0d\u5b58\u5728\uff09\uff0c\u53ef\u4ee5\u89e3\u51b3\u5e7b\u8bfb\u95ee\u9898\uff1b Next-Key Locks\uff1a\u9501\u4f4f\u5f53\u524d\u8bb0\u5f55\u4ee5\u53ca\u6b64\u6761\u8bb0\u5f55\u4e4b\u524d\u7684\u8bb0\u5f55\u7684\u9501\uff1b Insert Intention Locks\uff1a\u63d2\u5165\u610f\u5411\u9501\uff0c\u63d2\u5165\u65f6\u8981\u5224\u65ad\u662f\u5426\u6709gap\u9501\uff0c\u5982\u679c\u6709\u5219\u8981\u751f\u6210\u4e00\u4e2a\u63d2\u5165\u610f\u5411\u9501\u7ed3\u6784\u3002 \u884c\u9501\u517c\u5bb9\u6027\uff1a \u8868\u9501\uff1a \u5171\u4eab\u9501-s\u9501\u3001\u6392\u4ed6\u9501-x\u9501\uff0cIS\u9501\uff0cIX\u9501 \u610f\u5411\u5171\u4eab\u9501\uff0c\u82f1\u6587\u540d\uff1a Intention Shared Lock \uff0c\u7b80\u79f0 IS\u9501 \u3002\u5f53\u4e8b\u52a1\u51c6\u5907\u5728\u67d0\u6761\u8bb0\u5f55\u4e0a\u52a0 S\u9501 \u65f6\uff0c\u9700\u8981\u5148\u5728\u8868\u7ea7\u522b\u52a0\u4e00\u4e2a IS\u9501 \u3002 \u610f\u5411\u72ec\u5360\u9501\uff0c\u82f1\u6587\u540d\uff1a Intention Exclusive Lock \uff0c\u7b80\u79f0 IX\u9501 \u3002\u5f53\u4e8b\u52a1\u51c6\u5907\u5728\u67d0\u6761\u8bb0\u5f55\u4e0a\u52a0 X\u9501 \u65f6\uff0c\u9700\u8981\u5148\u5728\u8868\u7ea7\u522b\u52a0\u4e00\u4e2a IX\u9501 \u3002 IS\u3001IX\u9501\u662f\u8868\u7ea7\u9501\uff0c\u5b83\u4eec\u7684\u63d0\u51fa\u4ec5\u4ec5\u4e3a\u4e86\u5728\u4e4b\u540e\u52a0\u8868\u7ea7\u522b\u7684S\u9501\u548cX\u9501\u65f6\u53ef\u4ee5\u5feb\u901f\u5224\u65ad\u8868\u4e2d\u7684\u8bb0\u5f55\u662f\u5426\u88ab\u4e0a\u9501\uff0c\u4ee5\u907f\u514d\u7528\u904d\u5386\u7684\u65b9\u5f0f\u6765\u67e5\u770b\u8868\u4e2d\u6709\u6ca1\u6709\u4e0a\u9501\u7684\u8bb0\u5f55\uff0c\u4e5f\u5c31\u662f\u8bf4\u5176\u5b9eIS\u9501\u548cIX\u9501\u662f\u517c\u5bb9\u7684\uff0cIX\u9501\u548cIX\u9501\u662f\u517c\u5bb9\u7684 \u8868\u9501\u517c\u5bb9\u6027\uff1a \u6ce8\u610f\uff1a InnoDB\u884c\u9501\u662f\u901a\u8fc7\u7ed9\u7d22\u5f15\u4e0a\u7684\u7d22\u5f15\u9879\u52a0\u9501\u6765\u5b9e\u73b0\u7684\uff0c\u53ea\u6709\u901a\u8fc7\u7d22\u5f15\uff08\u4e3b\u952e\u7d22\u5f15\u3001\u552f\u4e00\u7d22\u5f15\u6216\u666e\u901a\u7d22\u5f15\uff09\u6761\u4ef6\u68c0\u7d22\u6570\u636e\uff0cInnoDB\u624d\u4f7f\u7528\u884c\u7ea7\u9501\uff0c\u5426\u5219\uff0cInnoDB\u5c06\u4f7f\u7528\u8868\u9501\u3002 \u53c2\u8003\uff1a https://zhuanlan.zhihu.com/p/29150809/","title":"\u9501"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%95%B0%E6%8D%AE%E5%BA%93/#_7","text":"","title":"\u5206\u5e93\u5206\u8868"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%95%B0%E6%8D%AE%E5%BA%93/#_8","text":"\u51e0\u7387\u5927\u7684\u6570\u636e\u5e93\uff08MySQL\uff09\u9762\u8bd5\u9898\uff08\u542b\u7b54\u6848\uff09_\u7776-CSDN\u535a\u5ba2_mysql\u6570\u636e\u5e93\u9762\u8bd5","title":"\u53c2\u8003"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%AE%97%E6%B3%95/","text":"\u9ad8\u9891\u9762\u8bd5\u9898 \u00b6 \u4e1c\u54e5\u5403\u8461\u8404\u65f6\u7adf\u7136\u5403\u51fa\u4e00\u9053\u7b97\u6cd5\u9898\uff01 \u00b7 labuladong\u7684\u7b97\u6cd5\u5c0f\u6284 (gitee.io) 969. \u714e\u997c\u6392\u5e8f - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u5206\u89e3-\u9010\u4f4d\u76f8\u4e58 - \u5b57\u7b26\u4e32\u76f8\u4e58 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u53cc\u6307\u9488 - \u63a5\u96e8\u6c34 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) 5. \u6700\u957f\u56de\u6587\u5b50\u4e32 \u9898\u89e3 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u6808 - \u6709\u6548\u7684\u62ec\u53f7 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u6570\u5b66\u6cd5 - \u5b8c\u7f8e\u77e9\u5f62 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) bisec - \u8003\u573a\u5c31\u5ea7 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u4e8c\u5206\u67e5\u627e - \u5224\u65ad\u5b50\u5e8f\u5217 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u6bcf\u65e5\u4e00\u9898 \u00b6 \u52a8\u6001\u89c4\u5212 - \u6253\u5bb6\u52ab\u820d II - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u627e\u89c4\u5f8b - Z \u5b57\u5f62\u53d8\u6362 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u6570\u5b66 - \u6574\u6570\u53cd\u8f6c - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u4e8c\u5206\u6cd5 - \u641c\u7d22\u63d2\u5165\u4f4d\u7f6e - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u56de\u6eaf - \u7ec4\u5408\u603b\u548c - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u56de\u6eaf-\u6570\u7ec4 - \u7ec4\u5408\u603b\u548c II - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u6ed1\u52a8\u7a97\u53e3-\u4e8c\u5206 \u8d2a\u5fc3\u7b97\u6cd5 \u00b6 \u533a\u95f4\u8c03\u5ea6 \u00b6 \u8d2a\u5fc3 - \u65e0\u91cd\u53e0\u533a\u95f4 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u8d2a\u5fc3\u7b97\u6cd5 - \u7528\u6700\u5c11\u6570\u91cf\u7684\u7bad\u5f15\u7206\u6c14\u7403 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u8df3\u8dc3\u6e38\u620f \u00b6 \u8d2a\u5fc3 - \u8df3\u8dc3\u6e38\u620f - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u8d2a\u5fc3 - \u8df3\u8dc3\u6e38\u620f II - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u52a8\u6001\u89c4\u5212 \u00b6 \u80cc\u5305\u95ee\u9898 \u00b6 \u52a8\u6001\u89c4\u5212 - \u5206\u5272\u7b49\u548c\u5b50\u96c6 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u52a8\u6001\u89c4\u5212 - \u96f6\u94b1\u5151\u6362 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u52a8\u6001\u89c4\u5212 - \u96f6\u94b1\u5151\u6362 II - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u5b50\u5e8f\u5217\u7c7b\u578b \u00b6 \u52a8\u6001\u89c4\u5212 - \u7f16\u8f91\u8ddd\u79bb - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff08\u52a8\u6001\u89c4\u5212 + \u4e8c\u5206\u67e5\u627e\uff0c\u6e05\u6670\u56fe\u89e3\uff09 - \u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u52a8\u6001\u89c4\u5212 - \u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u52a8\u6001\u89c4\u5212-\u4e8c\u5206\u6cd5 - \u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u52a8\u6001\u89c4\u5212-\u4e8c\u5206\u6cd5 - \u4fc4\u7f57\u65af\u5957\u5a03\u4fe1\u5c01\u95ee\u9898 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u52a8\u6001\u89c4\u5212 - \u6700\u5927\u5b50\u5e8f\u548c - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u52a8\u6001\u89c4\u5212 - \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u52a8\u6001\u89c4\u5212 - \u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5220\u9664\u64cd\u4f5c - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u52a8\u6001\u89c4\u5212 - \u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u5c0fASCII\u5220\u9664\u548c - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u52a8\u6001\u89c4\u5212 - \u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u7ecf\u5178\u95ee\u9898 \u00b6 \u52a8\u6001\u89c4\u5212 - \u6700\u5c0f\u8def\u5f84\u548c - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u52a8\u6001\u89c4\u5212 - \u5730\u4e0b\u57ce\u6e38\u620f - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u52a8\u6001\u89c4\u5212 - \u81ea\u7531\u4e4b\u8def - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u52a8\u6001\u89c4\u5212 - \u9e21\u86cb\u6389\u843d - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com)","title":"\u7b97\u6cd5"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%AE%97%E6%B3%95/#_1","text":"\u4e1c\u54e5\u5403\u8461\u8404\u65f6\u7adf\u7136\u5403\u51fa\u4e00\u9053\u7b97\u6cd5\u9898\uff01 \u00b7 labuladong\u7684\u7b97\u6cd5\u5c0f\u6284 (gitee.io) 969. \u714e\u997c\u6392\u5e8f - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u5206\u89e3-\u9010\u4f4d\u76f8\u4e58 - \u5b57\u7b26\u4e32\u76f8\u4e58 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u53cc\u6307\u9488 - \u63a5\u96e8\u6c34 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) 5. \u6700\u957f\u56de\u6587\u5b50\u4e32 \u9898\u89e3 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u6808 - \u6709\u6548\u7684\u62ec\u53f7 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u6570\u5b66\u6cd5 - \u5b8c\u7f8e\u77e9\u5f62 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) bisec - \u8003\u573a\u5c31\u5ea7 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u4e8c\u5206\u67e5\u627e - \u5224\u65ad\u5b50\u5e8f\u5217 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com)","title":"\u9ad8\u9891\u9762\u8bd5\u9898"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%AE%97%E6%B3%95/#_2","text":"\u52a8\u6001\u89c4\u5212 - \u6253\u5bb6\u52ab\u820d II - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u627e\u89c4\u5f8b - Z \u5b57\u5f62\u53d8\u6362 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u6570\u5b66 - \u6574\u6570\u53cd\u8f6c - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u4e8c\u5206\u6cd5 - \u641c\u7d22\u63d2\u5165\u4f4d\u7f6e - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u56de\u6eaf - \u7ec4\u5408\u603b\u548c - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u56de\u6eaf-\u6570\u7ec4 - \u7ec4\u5408\u603b\u548c II - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u6ed1\u52a8\u7a97\u53e3-\u4e8c\u5206","title":"\u6bcf\u65e5\u4e00\u9898"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%AE%97%E6%B3%95/#_3","text":"","title":"\u8d2a\u5fc3\u7b97\u6cd5"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%AE%97%E6%B3%95/#_4","text":"\u8d2a\u5fc3 - \u65e0\u91cd\u53e0\u533a\u95f4 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u8d2a\u5fc3\u7b97\u6cd5 - \u7528\u6700\u5c11\u6570\u91cf\u7684\u7bad\u5f15\u7206\u6c14\u7403 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com)","title":"\u533a\u95f4\u8c03\u5ea6"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%AE%97%E6%B3%95/#_5","text":"\u8d2a\u5fc3 - \u8df3\u8dc3\u6e38\u620f - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u8d2a\u5fc3 - \u8df3\u8dc3\u6e38\u620f II - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com)","title":"\u8df3\u8dc3\u6e38\u620f"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%AE%97%E6%B3%95/#_6","text":"","title":"\u52a8\u6001\u89c4\u5212"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%AE%97%E6%B3%95/#_7","text":"\u52a8\u6001\u89c4\u5212 - \u5206\u5272\u7b49\u548c\u5b50\u96c6 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u52a8\u6001\u89c4\u5212 - \u96f6\u94b1\u5151\u6362 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u52a8\u6001\u89c4\u5212 - \u96f6\u94b1\u5151\u6362 II - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com)","title":"\u80cc\u5305\u95ee\u9898"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%AE%97%E6%B3%95/#_8","text":"\u52a8\u6001\u89c4\u5212 - \u7f16\u8f91\u8ddd\u79bb - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff08\u52a8\u6001\u89c4\u5212 + \u4e8c\u5206\u67e5\u627e\uff0c\u6e05\u6670\u56fe\u89e3\uff09 - \u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u52a8\u6001\u89c4\u5212 - \u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u52a8\u6001\u89c4\u5212-\u4e8c\u5206\u6cd5 - \u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u52a8\u6001\u89c4\u5212-\u4e8c\u5206\u6cd5 - \u4fc4\u7f57\u65af\u5957\u5a03\u4fe1\u5c01\u95ee\u9898 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u52a8\u6001\u89c4\u5212 - \u6700\u5927\u5b50\u5e8f\u548c - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u52a8\u6001\u89c4\u5212 - \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u52a8\u6001\u89c4\u5212 - \u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5220\u9664\u64cd\u4f5c - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u52a8\u6001\u89c4\u5212 - \u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u5c0fASCII\u5220\u9664\u548c - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u52a8\u6001\u89c4\u5212 - \u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217 - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com)","title":"\u5b50\u5e8f\u5217\u7c7b\u578b"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%AE%97%E6%B3%95/#_9","text":"\u52a8\u6001\u89c4\u5212 - \u6700\u5c0f\u8def\u5f84\u548c - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u52a8\u6001\u89c4\u5212 - \u5730\u4e0b\u57ce\u6e38\u620f - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u52a8\u6001\u89c4\u5212 - \u81ea\u7531\u4e4b\u8def - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com) \u52a8\u6001\u89c4\u5212 - \u9e21\u86cb\u6389\u843d - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com)","title":"\u7ecf\u5178\u95ee\u9898"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%BD%91%E7%BB%9C/","text":"TCP\u4e09\u6b21\u63e1\u624b \u00b6 1.\u4e09\u6b21\u63e1\u624b\u7684\u610f\u4e49\uff1f \u00b6 \u6211\u4eec\u90fd\u77e5\u9053\uff0cTCP\u534f\u8bae\u662f\u4e00\u4e2a\u9762\u5411\u8fde\u63a5\u7684\u534f\u8bae\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u6b63\u5f0f\u5efa\u7acb\u8fde\u63a5\u4f20\u8f93\u6570\u636e\u4e4b\u524d\uff0c\u4e00\u822c\u8981\u901a\u8fc7\u4e09\u6b21\u63e1\u624b\u8fd9\u79cd\u65b9\u5f0f\uff0c\u540c\u6b65\u8fde\u63a5\u53cc\u65b9\u7684\u5e8f\u5217\u53f7\u548c\u786e\u8ba4\u53f7\u5e76\u4ea4\u6362 TCP \u7a97\u53e3\u5927\u5c0f\u4fe1\u606f\u3002 2.\u4e09\u6b21\u63e1\u624b\u7684\u8fc7\u7a0b\uff1f \u00b6 \u5ba2\u6237\u7aef->\u670d\u52a1\u7aef\uff1a\u53d1\u9001SYN\u5305\uff0c\u5e26\u4e2aISN\uff081\uff09\uff0c\u8fdb\u5165SYN_SENT\u72b6\u6001\uff1b \u670d\u52a1\u7aef->\u5ba2\u6237\u7aef\uff1a\u6536\u5230SYN\u5305\uff0c\u53d1\u9001SYN+ACK\u5305\uff0c\u5e26\u4e2aISN\uff082\uff09\u548cack=ISN\uff081\uff09+1\uff0c\u8fdb\u5165SYN_RCVD\u72b6\u6001\uff1b \u5ba2\u6237\u7aef->\u670d\u52a1\u7aef\uff1a\u5bf9\u670d\u52a1\u7aef\u7684SYN\u8fdb\u884c\u786e\u8ba4\uff0c\u53d1\u9001ACK\u5305\uff0c\u5e26\u4e2aack=ISN\uff082\uff09+1\u3002 3.\u53ef\u4ee5\u4e24\u6b21\u63e1\u624b\u5417\uff1f \u00b6 \u4e0d\u53ef\u4ee5\uff08\u670d\u52a1\u7aef\u53d1\u9001ACK+SYN\u5305\u540e\u5c31\u8ba4\u4e3a\u8fde\u63a5\u5efa\u7acb\uff091.\u5ba2\u6237\u7aefSYN\u5305\u5ef6\u65f6\u4e86\uff0c\u670d\u52a1\u7aef\u8ba4\u4e3a\u8fde\u63a5\u5efa\u7acb\u4e86\uff0c\u767d\u767d\u7b49\u5f85\u5ba2\u6237\u7aef\u7684\u4fe1\u606f\uff0c\u8d44\u6e90\u6d6a\u8d39\u30022.\u670d\u52a1\u7aef\u65e0\u6cd5\u786e\u8ba4\u5ba2\u6237\u7aef\u662f\u5426\u6536\u5230ACK+SYN\u5305\uff0c\u65e0\u6cd5\u4fdd\u8bc1\u6210\u529f\u4e92\u6362\u521d\u59cb\u5e8f\u5217\u53f7\u3002 \u603b\u7ed3\uff1a\u5176\u5b9e\u4e09\u6b21\u63e1\u624b\u8bf4\u767d\u4e86\uff0c\u5c31\u662f\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u5404\u81ea\u786e\u8ba4\u5bf9\u65b9\u6536\u53d1\u4fe1\u606f\u7684\u80fd\u529b\u3002 4.\u53ef\u4ee5\u56db\u6b21\u63e1\u624b\u5417\uff1f \u00b6 \u53ef\u4ee5\uff0c\u4f46\u662f\u4f1a\u964d\u4f4e\u6548\u7387\u3002 5.\u5efa\u7acb\u8fde\u63a5\u540e\u5ba2\u6237\u7aef\u51fa\u73b0\u6545\u969c \u00b6 \u670d\u52a1\u7aef\u6bcf\u6b21\u6536\u5230\u8bf7\u6c42\u90fd\u4f1a\u590d\u4f4d\u4e00\u4e2a\u8ba1\u6570\u5668\uff0c\u65f6\u95f4\u901a\u5e38\u8bbe\u7f6e\u4e3a2\u5c0f\u65f6\uff0c\u5982\u679c2\u4e2a\u5c0f\u65f6\u5185\u8fd8\u6ca1\u6536\u5230\u6570\u636e\uff0c\u670d\u52a1\u5668\u5c31\u4f1a\u6bcf\u969475\u79d2\u53d1\u9001\u4e00\u4e2a\u63a2\u6d4b\u62a5\u6587\u6bb5\uff0c\u53d1\u900110\u6b21\u540e\u4f9d\u7136\u6ca1\u6709\u53cd\u5e94\uff0c\u670d\u52a1\u5668\u5c31close\u4e86\u3002 TCP\u56db\u6b21\u6325\u624b \u00b6 TIME_WAIT\u72b6\u6001 \u00b6 Tcp\u62a5\u6587\u683c\u5f0f \u00b6 TCP\u62a5\u6587\u683c\u5f0f\u89e3\u6790 (biancheng.net) \u4e09\u6b21\u63e1\u624b\u7684\u6293\u5305 Tcp\u662f\u4ec0\u4e48\uff1f \u00b6 TCP \u662f\u4e00\u4e2a\u53ef\u9760\u7684\uff08reliable\uff09\u3001\u9762\u5411\u8fde\u63a5\u7684\uff08connection-oriented\uff09\u3001\u57fa\u4e8e\u5b57\u8282\u6d41\uff08byte-stream\uff09\u3001\u5168\u53cc\u5de5\u7684\uff08full-duplex\uff09\u534f\u8bae\u3002 \u9762\u5411\u8fde\u63a5\uff1a\u8981\u6c42\u6b63\u5f0f\u53d1\u9001\u6570\u636e\u4e4b\u524d\uff0c\u901a\u8fc7[\u63e1\u624b]\u5efa\u7acb\u4e00\u4e2a \u903b\u8f91 \u8fde\u63a5\uff0c\u7ed3\u675f\u901a\u4fe1\u65f6\u901a\u8fc7[\u6325\u624b]\u6765\u65ad\u5f00\u8fde\u63a5\u3002 \u53ef\u9760\u7684\uff1a1.\u6821\u9a8c\u548c\uff1b2.\u5e8f\u5217\u53f7\uff08\u4e71\u5e8f\u548c\u91cd\u590d\uff09;3.\u8d85\u65f6\u91cd\u4f20;4.\u6d41\u91cf\u63a7\u5236\uff0c\u62e5\u585e\u63a7\u5236\u3002 \u5b57\u8282\u6d41\uff1a\u6ca1\u6709\u56fa\u5b9a\u62a5\u6587\u8fb9\u754c\u3002 \u5168\u53cc\u5de5\uff1a\u63a5\u6536\u7aef\u548c\u53d1\u9001\u7aef\u90fd\u53ef\u4ee5\u662f\u5ba2\u6237\u7aef\u6216\u8005\u670d\u52a1\u7aef\uff0c\u6bcf\u4e2a\u65b9\u5411\u7684\u6570\u636e\u6d41\u90fd\u6709\u72ec\u7acb\u7ba1\u7406\u5e8f\u5217\u53f7\u3001\u6ed1\u52a8\u7a97\u53e3\u5927\u5c0f\u3001MSS\u7b49\u4fe1\u606f\u3002 \u4e3a\u4ec0\u4e48 SYN \u6bb5\u4e0d\u643a\u5e26\u6570\u636e\u5374\u8981\u6d88\u8017\u4e00\u4e2a\u5e8f\u5217\u53f7\u5462\uff1f \u00b6 \u51e1\u662f\u6d88\u8017\u5e8f\u5217\u53f7\u7684 TCP \u62a5\u6587\u6bb5\uff0c\u4e00\u5b9a\u9700\u8981\u5bf9\u7aef\u786e\u8ba4\u3002\u5982\u679c\u8fd9\u4e2a\u6bb5\u6ca1\u6709\u6536\u5230\u786e\u8ba4\uff0c\u4f1a\u4e00\u76f4\u91cd\u4f20\u76f4\u5230\u8fbe\u5230\u6307\u5b9a\u7684\u6b21\u6570\u4e3a\u6b62\u3002 TCP\u72b6\u6001\u56fe \u00b6 TCP Fast Open \u00b6 SO_REUSEPORT \u00b6 \u591a\u4e2a\u8fdb\u7a0b\u76d1\u542c\u540c\u4e00\u4e2a\u7aef\u53e3 TIME_WAIT \u5b58\u5728\u7684\u539f\u56e0\u662f\u4ec0\u4e48 \u00b6 \u6570\u636e\u62a5\u6587\u53ef\u80fd\u5728\u53d1\u9001\u9014\u4e2d\u5ef6\u8fdf\u4f46\u6700\u7ec8\u4f1a\u5230\u8fbe\uff0c\u56e0\u6b64\u8981\u7b49\u8001\u7684\u201c\u8ff7\u8def\u201d\u7684\u91cd\u590d\u62a5\u6587\u6bb5\u5728\u7f51\u7edc\u4e2d\u8fc7\u671f\u5931\u6548\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u7528 \u76f8\u540c \u6e90\u7aef\u53e3\u548c\u76ee\u6807\u7aef\u53e3\u521b\u5efa\u65b0\u8fde\u63a5\u65f6\u6536\u5230\u65e7\u8fde\u63a5\u59d7\u59d7\u6765\u8fdf\u7684\u6570\u636e\u5305\uff0c\u9020\u6210\u6570\u636e\u9519\u4e71\u3002 \u7b2c\u4e8c\u4e2a\u539f\u56e0\u662f\u786e\u4fdd\u53ef\u9760\u5b9e\u73b0 TCP \u5168\u53cc\u5de5\u7ec8\u6b62\u8fde\u63a5\u3002\u5173\u95ed\u8fde\u63a5\u7684\u56db\u6b21\u6325\u624b\u4e2d\uff0c\u6700\u7ec8\u7684 ACK \u7531\u4e3b\u52a8\u5173\u95ed\u65b9\u53d1\u51fa\uff0c\u5982\u679c\u8fd9\u4e2a ACK \u4e22\u5931\uff0c\u5bf9\u7aef\uff08\u88ab\u52a8\u5173\u95ed\u65b9\uff09\u5c06\u91cd\u53d1 FIN\uff0c\u5982\u679c\u4e3b\u52a8\u5173\u95ed\u65b9\u4e0d\u7ef4\u6301 TIME_WAIT \u76f4\u63a5\u8fdb\u5165 CLOSED \u72b6\u6001\uff0c\u5219\u65e0\u6cd5\u91cd\u4f20 ACK\uff0c\u88ab\u52a8\u5173\u95ed\u65b9\u56e0\u6b64\u4e0d\u80fd\u53ca\u65f6\u53ef\u9760\u91ca\u653e\u3002 \u4e3a\u4ec0\u4e48\u65f6\u95f4\u662f\u4e24\u4e2a MSL \u00b6 1 \u4e2a MSL \u786e\u4fdd\u56db\u6b21\u6325\u624b\u4e2d\u4e3b\u52a8\u5173\u95ed\u65b9\u6700\u540e\u7684 ACK \u62a5\u6587\u6700\u7ec8\u80fd\u8fbe\u5230\u5bf9\u7aef 1 \u4e2a MSL \u786e\u4fdd\u5bf9\u7aef\u6ca1\u6709\u6536\u5230 ACK \u91cd\u4f20\u7684 FIN \u62a5\u6587\u53ef\u4ee5\u5230\u8fbe 2MS = \u53bb\u5411 ACK \u6d88\u606f\u6700\u5927\u5b58\u6d3b\u65f6\u95f4\uff08MSL) + \u6765\u5411 FIN \u6d88\u606f\u7684\u6700\u5927\u5b58\u6d3b\u65f6\u95f4\uff08MSL\uff09 \u7f51\u7edc\u5206\u5c42\u6a21\u578b \u00b6","title":"\u7f51\u7edc"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%BD%91%E7%BB%9C/#tcp","text":"","title":"TCP\u4e09\u6b21\u63e1\u624b"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%BD%91%E7%BB%9C/#1","text":"\u6211\u4eec\u90fd\u77e5\u9053\uff0cTCP\u534f\u8bae\u662f\u4e00\u4e2a\u9762\u5411\u8fde\u63a5\u7684\u534f\u8bae\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u6b63\u5f0f\u5efa\u7acb\u8fde\u63a5\u4f20\u8f93\u6570\u636e\u4e4b\u524d\uff0c\u4e00\u822c\u8981\u901a\u8fc7\u4e09\u6b21\u63e1\u624b\u8fd9\u79cd\u65b9\u5f0f\uff0c\u540c\u6b65\u8fde\u63a5\u53cc\u65b9\u7684\u5e8f\u5217\u53f7\u548c\u786e\u8ba4\u53f7\u5e76\u4ea4\u6362 TCP \u7a97\u53e3\u5927\u5c0f\u4fe1\u606f\u3002","title":"1.\u4e09\u6b21\u63e1\u624b\u7684\u610f\u4e49\uff1f"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%BD%91%E7%BB%9C/#2","text":"\u5ba2\u6237\u7aef->\u670d\u52a1\u7aef\uff1a\u53d1\u9001SYN\u5305\uff0c\u5e26\u4e2aISN\uff081\uff09\uff0c\u8fdb\u5165SYN_SENT\u72b6\u6001\uff1b \u670d\u52a1\u7aef->\u5ba2\u6237\u7aef\uff1a\u6536\u5230SYN\u5305\uff0c\u53d1\u9001SYN+ACK\u5305\uff0c\u5e26\u4e2aISN\uff082\uff09\u548cack=ISN\uff081\uff09+1\uff0c\u8fdb\u5165SYN_RCVD\u72b6\u6001\uff1b \u5ba2\u6237\u7aef->\u670d\u52a1\u7aef\uff1a\u5bf9\u670d\u52a1\u7aef\u7684SYN\u8fdb\u884c\u786e\u8ba4\uff0c\u53d1\u9001ACK\u5305\uff0c\u5e26\u4e2aack=ISN\uff082\uff09+1\u3002","title":"2.\u4e09\u6b21\u63e1\u624b\u7684\u8fc7\u7a0b\uff1f"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%BD%91%E7%BB%9C/#3","text":"\u4e0d\u53ef\u4ee5\uff08\u670d\u52a1\u7aef\u53d1\u9001ACK+SYN\u5305\u540e\u5c31\u8ba4\u4e3a\u8fde\u63a5\u5efa\u7acb\uff091.\u5ba2\u6237\u7aefSYN\u5305\u5ef6\u65f6\u4e86\uff0c\u670d\u52a1\u7aef\u8ba4\u4e3a\u8fde\u63a5\u5efa\u7acb\u4e86\uff0c\u767d\u767d\u7b49\u5f85\u5ba2\u6237\u7aef\u7684\u4fe1\u606f\uff0c\u8d44\u6e90\u6d6a\u8d39\u30022.\u670d\u52a1\u7aef\u65e0\u6cd5\u786e\u8ba4\u5ba2\u6237\u7aef\u662f\u5426\u6536\u5230ACK+SYN\u5305\uff0c\u65e0\u6cd5\u4fdd\u8bc1\u6210\u529f\u4e92\u6362\u521d\u59cb\u5e8f\u5217\u53f7\u3002 \u603b\u7ed3\uff1a\u5176\u5b9e\u4e09\u6b21\u63e1\u624b\u8bf4\u767d\u4e86\uff0c\u5c31\u662f\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u5404\u81ea\u786e\u8ba4\u5bf9\u65b9\u6536\u53d1\u4fe1\u606f\u7684\u80fd\u529b\u3002","title":"3.\u53ef\u4ee5\u4e24\u6b21\u63e1\u624b\u5417\uff1f"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%BD%91%E7%BB%9C/#4","text":"\u53ef\u4ee5\uff0c\u4f46\u662f\u4f1a\u964d\u4f4e\u6548\u7387\u3002","title":"4.\u53ef\u4ee5\u56db\u6b21\u63e1\u624b\u5417\uff1f"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%BD%91%E7%BB%9C/#5","text":"\u670d\u52a1\u7aef\u6bcf\u6b21\u6536\u5230\u8bf7\u6c42\u90fd\u4f1a\u590d\u4f4d\u4e00\u4e2a\u8ba1\u6570\u5668\uff0c\u65f6\u95f4\u901a\u5e38\u8bbe\u7f6e\u4e3a2\u5c0f\u65f6\uff0c\u5982\u679c2\u4e2a\u5c0f\u65f6\u5185\u8fd8\u6ca1\u6536\u5230\u6570\u636e\uff0c\u670d\u52a1\u5668\u5c31\u4f1a\u6bcf\u969475\u79d2\u53d1\u9001\u4e00\u4e2a\u63a2\u6d4b\u62a5\u6587\u6bb5\uff0c\u53d1\u900110\u6b21\u540e\u4f9d\u7136\u6ca1\u6709\u53cd\u5e94\uff0c\u670d\u52a1\u5668\u5c31close\u4e86\u3002","title":"5.\u5efa\u7acb\u8fde\u63a5\u540e\u5ba2\u6237\u7aef\u51fa\u73b0\u6545\u969c"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%BD%91%E7%BB%9C/#tcp_1","text":"","title":"TCP\u56db\u6b21\u6325\u624b"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%BD%91%E7%BB%9C/#time_wait","text":"","title":"TIME_WAIT\u72b6\u6001"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%BD%91%E7%BB%9C/#tcp_2","text":"TCP\u62a5\u6587\u683c\u5f0f\u89e3\u6790 (biancheng.net) \u4e09\u6b21\u63e1\u624b\u7684\u6293\u5305","title":"Tcp\u62a5\u6587\u683c\u5f0f"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%BD%91%E7%BB%9C/#tcp_3","text":"TCP \u662f\u4e00\u4e2a\u53ef\u9760\u7684\uff08reliable\uff09\u3001\u9762\u5411\u8fde\u63a5\u7684\uff08connection-oriented\uff09\u3001\u57fa\u4e8e\u5b57\u8282\u6d41\uff08byte-stream\uff09\u3001\u5168\u53cc\u5de5\u7684\uff08full-duplex\uff09\u534f\u8bae\u3002 \u9762\u5411\u8fde\u63a5\uff1a\u8981\u6c42\u6b63\u5f0f\u53d1\u9001\u6570\u636e\u4e4b\u524d\uff0c\u901a\u8fc7[\u63e1\u624b]\u5efa\u7acb\u4e00\u4e2a \u903b\u8f91 \u8fde\u63a5\uff0c\u7ed3\u675f\u901a\u4fe1\u65f6\u901a\u8fc7[\u6325\u624b]\u6765\u65ad\u5f00\u8fde\u63a5\u3002 \u53ef\u9760\u7684\uff1a1.\u6821\u9a8c\u548c\uff1b2.\u5e8f\u5217\u53f7\uff08\u4e71\u5e8f\u548c\u91cd\u590d\uff09;3.\u8d85\u65f6\u91cd\u4f20;4.\u6d41\u91cf\u63a7\u5236\uff0c\u62e5\u585e\u63a7\u5236\u3002 \u5b57\u8282\u6d41\uff1a\u6ca1\u6709\u56fa\u5b9a\u62a5\u6587\u8fb9\u754c\u3002 \u5168\u53cc\u5de5\uff1a\u63a5\u6536\u7aef\u548c\u53d1\u9001\u7aef\u90fd\u53ef\u4ee5\u662f\u5ba2\u6237\u7aef\u6216\u8005\u670d\u52a1\u7aef\uff0c\u6bcf\u4e2a\u65b9\u5411\u7684\u6570\u636e\u6d41\u90fd\u6709\u72ec\u7acb\u7ba1\u7406\u5e8f\u5217\u53f7\u3001\u6ed1\u52a8\u7a97\u53e3\u5927\u5c0f\u3001MSS\u7b49\u4fe1\u606f\u3002","title":"Tcp\u662f\u4ec0\u4e48\uff1f"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%BD%91%E7%BB%9C/#syn","text":"\u51e1\u662f\u6d88\u8017\u5e8f\u5217\u53f7\u7684 TCP \u62a5\u6587\u6bb5\uff0c\u4e00\u5b9a\u9700\u8981\u5bf9\u7aef\u786e\u8ba4\u3002\u5982\u679c\u8fd9\u4e2a\u6bb5\u6ca1\u6709\u6536\u5230\u786e\u8ba4\uff0c\u4f1a\u4e00\u76f4\u91cd\u4f20\u76f4\u5230\u8fbe\u5230\u6307\u5b9a\u7684\u6b21\u6570\u4e3a\u6b62\u3002","title":"\u4e3a\u4ec0\u4e48 SYN \u6bb5\u4e0d\u643a\u5e26\u6570\u636e\u5374\u8981\u6d88\u8017\u4e00\u4e2a\u5e8f\u5217\u53f7\u5462\uff1f"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%BD%91%E7%BB%9C/#tcp_4","text":"","title":"TCP\u72b6\u6001\u56fe"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%BD%91%E7%BB%9C/#tcp-fast-open","text":"","title":"TCP Fast Open"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%BD%91%E7%BB%9C/#so_reuseport","text":"\u591a\u4e2a\u8fdb\u7a0b\u76d1\u542c\u540c\u4e00\u4e2a\u7aef\u53e3","title":"SO_REUSEPORT"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%BD%91%E7%BB%9C/#time_wait_1","text":"\u6570\u636e\u62a5\u6587\u53ef\u80fd\u5728\u53d1\u9001\u9014\u4e2d\u5ef6\u8fdf\u4f46\u6700\u7ec8\u4f1a\u5230\u8fbe\uff0c\u56e0\u6b64\u8981\u7b49\u8001\u7684\u201c\u8ff7\u8def\u201d\u7684\u91cd\u590d\u62a5\u6587\u6bb5\u5728\u7f51\u7edc\u4e2d\u8fc7\u671f\u5931\u6548\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u7528 \u76f8\u540c \u6e90\u7aef\u53e3\u548c\u76ee\u6807\u7aef\u53e3\u521b\u5efa\u65b0\u8fde\u63a5\u65f6\u6536\u5230\u65e7\u8fde\u63a5\u59d7\u59d7\u6765\u8fdf\u7684\u6570\u636e\u5305\uff0c\u9020\u6210\u6570\u636e\u9519\u4e71\u3002 \u7b2c\u4e8c\u4e2a\u539f\u56e0\u662f\u786e\u4fdd\u53ef\u9760\u5b9e\u73b0 TCP \u5168\u53cc\u5de5\u7ec8\u6b62\u8fde\u63a5\u3002\u5173\u95ed\u8fde\u63a5\u7684\u56db\u6b21\u6325\u624b\u4e2d\uff0c\u6700\u7ec8\u7684 ACK \u7531\u4e3b\u52a8\u5173\u95ed\u65b9\u53d1\u51fa\uff0c\u5982\u679c\u8fd9\u4e2a ACK \u4e22\u5931\uff0c\u5bf9\u7aef\uff08\u88ab\u52a8\u5173\u95ed\u65b9\uff09\u5c06\u91cd\u53d1 FIN\uff0c\u5982\u679c\u4e3b\u52a8\u5173\u95ed\u65b9\u4e0d\u7ef4\u6301 TIME_WAIT \u76f4\u63a5\u8fdb\u5165 CLOSED \u72b6\u6001\uff0c\u5219\u65e0\u6cd5\u91cd\u4f20 ACK\uff0c\u88ab\u52a8\u5173\u95ed\u65b9\u56e0\u6b64\u4e0d\u80fd\u53ca\u65f6\u53ef\u9760\u91ca\u653e\u3002","title":"TIME_WAIT \u5b58\u5728\u7684\u539f\u56e0\u662f\u4ec0\u4e48"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%BD%91%E7%BB%9C/#msl","text":"1 \u4e2a MSL \u786e\u4fdd\u56db\u6b21\u6325\u624b\u4e2d\u4e3b\u52a8\u5173\u95ed\u65b9\u6700\u540e\u7684 ACK \u62a5\u6587\u6700\u7ec8\u80fd\u8fbe\u5230\u5bf9\u7aef 1 \u4e2a MSL \u786e\u4fdd\u5bf9\u7aef\u6ca1\u6709\u6536\u5230 ACK \u91cd\u4f20\u7684 FIN \u62a5\u6587\u53ef\u4ee5\u5230\u8fbe 2MS = \u53bb\u5411 ACK \u6d88\u606f\u6700\u5927\u5b58\u6d3b\u65f6\u95f4\uff08MSL) + \u6765\u5411 FIN \u6d88\u606f\u7684\u6700\u5927\u5b58\u6d3b\u65f6\u95f4\uff08MSL\uff09","title":"\u4e3a\u4ec0\u4e48\u65f6\u95f4\u662f\u4e24\u4e2a MSL"},{"location":"%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%BD%91%E7%BB%9C/#_1","text":"","title":"\u7f51\u7edc\u5206\u5c42\u6a21\u578b"}]}